/*
 * Copyright (c) 2009-2016 ARM Limited. All rights reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 (the License); you may
 * not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @file     STM32F103xx.h
 * @brief    CMSIS HeaderFile
 * @version  1.0
 * @date     02. June 2021
 * @note     Generated by SVDConv V3.2.53 on Wednesday, 02.06.2021 22:55:04
 *           from File 'STM32F103xx.svd',
 *           last modified on Wednesday, 14.04.2021 22:50:36
 */



/** @addtogroup
  * @{
  */


/** @addtogroup STM32F103xx
  * @{
  */


#ifndef STM32F103XX_H
#define STM32F103XX_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup Configuration_of_CMSIS
  * @{
  */



/* =========================================================================================================================== */
/* ================                                Interrupt Number Definition                                ================ */
/* =========================================================================================================================== */

#define STM32F10X_MD

typedef enum IRQn
{
/******  Cortex-M3 Processor Exceptions Numbers ***************************************************/
  NonMaskableInt_IRQn         = -14,    /*!< 2 Non Maskable Interrupt                             */
  MemoryManagement_IRQn       = -12,    /*!< 4 Cortex-M3 Memory Management Interrupt              */
  BusFault_IRQn               = -11,    /*!< 5 Cortex-M3 Bus Fault Interrupt                      */
  UsageFault_IRQn             = -10,    /*!< 6 Cortex-M3 Usage Fault Interrupt                    */
  SVCall_IRQn                 = -5,     /*!< 11 Cortex-M3 SV Call Interrupt                       */
  DebugMonitor_IRQn           = -4,     /*!< 12 Cortex-M3 Debug Monitor Interrupt                 */
  PendSV_IRQn                 = -2,     /*!< 14 Cortex-M3 Pend SV Interrupt                       */
  SysTick_IRQn                = -1,     /*!< 15 Cortex-M3 System Tick Interrupt                   */

/******  STM32 specific Interrupt Numbers *********************************************************/
  WWDG_IRQn                   = 0,      /*!< Window WatchDog Interrupt                            */
  PVD_IRQn                    = 1,      /*!< PVD through EXTI Line detection Interrupt            */
  TAMPER_IRQn                 = 2,      /*!< Tamper Interrupt                                     */
  RTC_IRQn                    = 3,      /*!< RTC global Interrupt                                 */
  FLASH_IRQn                  = 4,      /*!< FLASH global Interrupt                               */
  RCC_IRQn                    = 5,      /*!< RCC global Interrupt                                 */
  EXTI0_IRQn                  = 6,      /*!< EXTI Line0 Interrupt                                 */
  EXTI1_IRQn                  = 7,      /*!< EXTI Line1 Interrupt                                 */
  EXTI2_IRQn                  = 8,      /*!< EXTI Line2 Interrupt                                 */
  EXTI3_IRQn                  = 9,      /*!< EXTI Line3 Interrupt                                 */
  EXTI4_IRQn                  = 10,     /*!< EXTI Line4 Interrupt                                 */
  DMA1_Channel1_IRQn          = 11,     /*!< DMA1 Channel 1 global Interrupt                      */
  DMA1_Channel2_IRQn          = 12,     /*!< DMA1 Channel 2 global Interrupt                      */
  DMA1_Channel3_IRQn          = 13,     /*!< DMA1 Channel 3 global Interrupt                      */
  DMA1_Channel4_IRQn          = 14,     /*!< DMA1 Channel 4 global Interrupt                      */
  DMA1_Channel5_IRQn          = 15,     /*!< DMA1 Channel 5 global Interrupt                      */
  DMA1_Channel6_IRQn          = 16,     /*!< DMA1 Channel 6 global Interrupt                      */
  DMA1_Channel7_IRQn          = 17,     /*!< DMA1 Channel 7 global Interrupt                      */

#ifdef STM32F10X_LD
  ADC1_2_IRQn                 = 18,     /*!< ADC1 and ADC2 global Interrupt                       */
  USB_HP_CAN1_TX_IRQn         = 19,     /*!< USB Device High Priority or CAN1 TX Interrupts       */
  USB_LP_CAN1_RX0_IRQn        = 20,     /*!< USB Device Low Priority or CAN1 RX0 Interrupts       */
  CAN1_RX1_IRQn               = 21,     /*!< CAN1 RX1 Interrupt                                   */
  CAN1_SCE_IRQn               = 22,     /*!< CAN1 SCE Interrupt                                   */
  EXTI9_5_IRQn                = 23,     /*!< External Line[9:5] Interrupts                        */
  TIM1_BRK_IRQn               = 24,     /*!< TIM1 Break Interrupt                                 */
  TIM1_UP_IRQn                = 25,     /*!< TIM1 Update Interrupt                                */
  TIM1_TRG_COM_IRQn           = 26,     /*!< TIM1 Trigger and Commutation Interrupt               */
  TIM1_CC_IRQn                = 27,     /*!< TIM1 Capture Compare Interrupt                       */
  TIM2_IRQn                   = 28,     /*!< TIM2 global Interrupt                                */
  TIM3_IRQn                   = 29,     /*!< TIM3 global Interrupt                                */
  I2C1_EV_IRQn                = 31,     /*!< I2C1 Event Interrupt                                 */
  I2C1_ER_IRQn                = 32,     /*!< I2C1 Error Interrupt                                 */
  SPI1_IRQn                   = 35,     /*!< SPI1 global Interrupt                                */
  USART1_IRQn                 = 37,     /*!< USART1 global Interrupt                              */
  USART2_IRQn                 = 38,     /*!< USART2 global Interrupt                              */
  EXTI15_10_IRQn              = 40,     /*!< External Line[15:10] Interrupts                      */
  RTCAlarm_IRQn               = 41,     /*!< RTC Alarm through EXTI Line Interrupt                */
  USBWakeUp_IRQn              = 42      /*!< USB Device WakeUp from suspend through EXTI Line Interrupt */
#endif /* STM32F10X_LD */

#ifdef STM32F10X_LD_VL
  ADC1_IRQn                   = 18,     /*!< ADC1 global Interrupt                                */
  EXTI9_5_IRQn                = 23,     /*!< External Line[9:5] Interrupts                        */
  TIM1_BRK_TIM15_IRQn         = 24,     /*!< TIM1 Break and TIM15 Interrupts                      */
  TIM1_UP_TIM16_IRQn          = 25,     /*!< TIM1 Update and TIM16 Interrupts                     */
  TIM1_TRG_COM_TIM17_IRQn     = 26,     /*!< TIM1 Trigger and Commutation and TIM17 Interrupt     */
  TIM1_CC_IRQn                = 27,     /*!< TIM1 Capture Compare Interrupt                       */
  TIM2_IRQn                   = 28,     /*!< TIM2 global Interrupt                                */
  TIM3_IRQn                   = 29,     /*!< TIM3 global Interrupt                                */
  I2C1_EV_IRQn                = 31,     /*!< I2C1 Event Interrupt                                 */
  I2C1_ER_IRQn                = 32,     /*!< I2C1 Error Interrupt                                 */
  SPI1_IRQn                   = 35,     /*!< SPI1 global Interrupt                                */
  USART1_IRQn                 = 37,     /*!< USART1 global Interrupt                              */
  USART2_IRQn                 = 38,     /*!< USART2 global Interrupt                              */
  EXTI15_10_IRQn              = 40,     /*!< External Line[15:10] Interrupts                      */
  RTCAlarm_IRQn               = 41,     /*!< RTC Alarm through EXTI Line Interrupt                */
  CEC_IRQn                    = 42,     /*!< HDMI-CEC Interrupt                                   */
  TIM6_DAC_IRQn               = 54,     /*!< TIM6 and DAC underrun Interrupt                      */
  TIM7_IRQn                   = 55      /*!< TIM7 Interrupt                                       */
#endif /* STM32F10X_LD_VL */

#ifdef STM32F10X_MD
  ADC1_2_IRQn                 = 18,     /*!< ADC1 and ADC2 global Interrupt                       */
  USB_HP_CAN1_TX_IRQn         = 19,     /*!< USB Device High Priority or CAN1 TX Interrupts       */
  USB_LP_CAN1_RX0_IRQn        = 20,     /*!< USB Device Low Priority or CAN1 RX0 Interrupts       */
  CAN1_RX1_IRQn               = 21,     /*!< CAN1 RX1 Interrupt                                   */
  CAN1_SCE_IRQn               = 22,     /*!< CAN1 SCE Interrupt                                   */
  EXTI9_5_IRQn                = 23,     /*!< External Line[9:5] Interrupts                        */
  TIM1_BRK_IRQn               = 24,     /*!< TIM1 Break Interrupt                                 */
  TIM1_UP_IRQn                = 25,     /*!< TIM1 Update Interrupt                                */
  TIM1_TRG_COM_IRQn           = 26,     /*!< TIM1 Trigger and Commutation Interrupt               */
  TIM1_CC_IRQn                = 27,     /*!< TIM1 Capture Compare Interrupt                       */
  TIM2_IRQn                   = 28,     /*!< TIM2 global Interrupt                                */
  TIM3_IRQn                   = 29,     /*!< TIM3 global Interrupt                                */
  TIM4_IRQn                   = 30,     /*!< TIM4 global Interrupt                                */
  I2C1_EV_IRQn                = 31,     /*!< I2C1 Event Interrupt                                 */
  I2C1_ER_IRQn                = 32,     /*!< I2C1 Error Interrupt                                 */
  I2C2_EV_IRQn                = 33,     /*!< I2C2 Event Interrupt                                 */
  I2C2_ER_IRQn                = 34,     /*!< I2C2 Error Interrupt                                 */
  SPI1_IRQn                   = 35,     /*!< SPI1 global Interrupt                                */
  SPI2_IRQn                   = 36,     /*!< SPI2 global Interrupt                                */
  USART1_IRQn                 = 37,     /*!< USART1 global Interrupt                              */
  USART2_IRQn                 = 38,     /*!< USART2 global Interrupt                              */
  USART3_IRQn                 = 39,     /*!< USART3 global Interrupt                              */
  EXTI15_10_IRQn              = 40,     /*!< External Line[15:10] Interrupts                      */
  RTCAlarm_IRQn               = 41,     /*!< RTC Alarm through EXTI Line Interrupt                */
  USBWakeUp_IRQn              = 42      /*!< USB Device WakeUp from suspend through EXTI Line Interrupt */
#endif /* STM32F10X_MD */

#ifdef STM32F10X_MD_VL
  ADC1_IRQn                   = 18,     /*!< ADC1 global Interrupt                                */
  EXTI9_5_IRQn                = 23,     /*!< External Line[9:5] Interrupts                        */
  TIM1_BRK_TIM15_IRQn         = 24,     /*!< TIM1 Break and TIM15 Interrupts                      */
  TIM1_UP_TIM16_IRQn          = 25,     /*!< TIM1 Update and TIM16 Interrupts                     */
  TIM1_TRG_COM_TIM17_IRQn     = 26,     /*!< TIM1 Trigger and Commutation and TIM17 Interrupt     */
  TIM1_CC_IRQn                = 27,     /*!< TIM1 Capture Compare Interrupt                       */
  TIM2_IRQn                   = 28,     /*!< TIM2 global Interrupt                                */
  TIM3_IRQn                   = 29,     /*!< TIM3 global Interrupt                                */
  TIM4_IRQn                   = 30,     /*!< TIM4 global Interrupt                                */
  I2C1_EV_IRQn                = 31,     /*!< I2C1 Event Interrupt                                 */
  I2C1_ER_IRQn                = 32,     /*!< I2C1 Error Interrupt                                 */
  I2C2_EV_IRQn                = 33,     /*!< I2C2 Event Interrupt                                 */
  I2C2_ER_IRQn                = 34,     /*!< I2C2 Error Interrupt                                 */
  SPI1_IRQn                   = 35,     /*!< SPI1 global Interrupt                                */
  SPI2_IRQn                   = 36,     /*!< SPI2 global Interrupt                                */
  USART1_IRQn                 = 37,     /*!< USART1 global Interrupt                              */
  USART2_IRQn                 = 38,     /*!< USART2 global Interrupt                              */
  USART3_IRQn                 = 39,     /*!< USART3 global Interrupt                              */
  EXTI15_10_IRQn              = 40,     /*!< External Line[15:10] Interrupts                      */
  RTCAlarm_IRQn               = 41,     /*!< RTC Alarm through EXTI Line Interrupt                */
  CEC_IRQn                    = 42,     /*!< HDMI-CEC Interrupt                                   */
  TIM6_DAC_IRQn               = 54,     /*!< TIM6 and DAC underrun Interrupt                      */
  TIM7_IRQn                   = 55      /*!< TIM7 Interrupt                                       */
#endif /* STM32F10X_MD_VL */

#ifdef STM32F10X_HD
  ADC1_2_IRQn                 = 18,     /*!< ADC1 and ADC2 global Interrupt                       */
  USB_HP_CAN1_TX_IRQn         = 19,     /*!< USB Device High Priority or CAN1 TX Interrupts       */
  USB_LP_CAN1_RX0_IRQn        = 20,     /*!< USB Device Low Priority or CAN1 RX0 Interrupts       */
  CAN1_RX1_IRQn               = 21,     /*!< CAN1 RX1 Interrupt                                   */
  CAN1_SCE_IRQn               = 22,     /*!< CAN1 SCE Interrupt                                   */
  EXTI9_5_IRQn                = 23,     /*!< External Line[9:5] Interrupts                        */
  TIM1_BRK_IRQn               = 24,     /*!< TIM1 Break Interrupt                                 */
  TIM1_UP_IRQn                = 25,     /*!< TIM1 Update Interrupt                                */
  TIM1_TRG_COM_IRQn           = 26,     /*!< TIM1 Trigger and Commutation Interrupt               */
  TIM1_CC_IRQn                = 27,     /*!< TIM1 Capture Compare Interrupt                       */
  TIM2_IRQn                   = 28,     /*!< TIM2 global Interrupt                                */
  TIM3_IRQn                   = 29,     /*!< TIM3 global Interrupt                                */
  TIM4_IRQn                   = 30,     /*!< TIM4 global Interrupt                                */
  I2C1_EV_IRQn                = 31,     /*!< I2C1 Event Interrupt                                 */
  I2C1_ER_IRQn                = 32,     /*!< I2C1 Error Interrupt                                 */
  I2C2_EV_IRQn                = 33,     /*!< I2C2 Event Interrupt                                 */
  I2C2_ER_IRQn                = 34,     /*!< I2C2 Error Interrupt                                 */
  SPI1_IRQn                   = 35,     /*!< SPI1 global Interrupt                                */
  SPI2_IRQn                   = 36,     /*!< SPI2 global Interrupt                                */
  USART1_IRQn                 = 37,     /*!< USART1 global Interrupt                              */
  USART2_IRQn                 = 38,     /*!< USART2 global Interrupt                              */
  USART3_IRQn                 = 39,     /*!< USART3 global Interrupt                              */
  EXTI15_10_IRQn              = 40,     /*!< External Line[15:10] Interrupts                      */
  RTCAlarm_IRQn               = 41,     /*!< RTC Alarm through EXTI Line Interrupt                */
  USBWakeUp_IRQn              = 42,     /*!< USB Device WakeUp from suspend through EXTI Line Interrupt */
  TIM8_BRK_IRQn               = 43,     /*!< TIM8 Break Interrupt                                 */
  TIM8_UP_IRQn                = 44,     /*!< TIM8 Update Interrupt                                */
  TIM8_TRG_COM_IRQn           = 45,     /*!< TIM8 Trigger and Commutation Interrupt               */
  TIM8_CC_IRQn                = 46,     /*!< TIM8 Capture Compare Interrupt                       */
  ADC3_IRQn                   = 47,     /*!< ADC3 global Interrupt                                */
  FSMC_IRQn                   = 48,     /*!< FSMC global Interrupt                                */
  SDIO_IRQn                   = 49,     /*!< SDIO global Interrupt                                */
  TIM5_IRQn                   = 50,     /*!< TIM5 global Interrupt                                */
  SPI3_IRQn                   = 51,     /*!< SPI3 global Interrupt                                */
  UART4_IRQn                  = 52,     /*!< UART4 global Interrupt                               */
  UART5_IRQn                  = 53,     /*!< UART5 global Interrupt                               */
  TIM6_IRQn                   = 54,     /*!< TIM6 global Interrupt                                */
  TIM7_IRQn                   = 55,     /*!< TIM7 global Interrupt                                */
  DMA2_Channel1_IRQn          = 56,     /*!< DMA2 Channel 1 global Interrupt                      */
  DMA2_Channel2_IRQn          = 57,     /*!< DMA2 Channel 2 global Interrupt                      */
  DMA2_Channel3_IRQn          = 58,     /*!< DMA2 Channel 3 global Interrupt                      */
  DMA2_Channel4_5_IRQn        = 59      /*!< DMA2 Channel 4 and Channel 5 global Interrupt        */
#endif /* STM32F10X_HD */

#ifdef STM32F10X_HD_VL
  ADC1_IRQn                   = 18,     /*!< ADC1 global Interrupt                                */
  EXTI9_5_IRQn                = 23,     /*!< External Line[9:5] Interrupts                        */
  TIM1_BRK_TIM15_IRQn         = 24,     /*!< TIM1 Break and TIM15 Interrupts                      */
  TIM1_UP_TIM16_IRQn          = 25,     /*!< TIM1 Update and TIM16 Interrupts                     */
  TIM1_TRG_COM_TIM17_IRQn     = 26,     /*!< TIM1 Trigger and Commutation and TIM17 Interrupt     */
  TIM1_CC_IRQn                = 27,     /*!< TIM1 Capture Compare Interrupt                       */
  TIM2_IRQn                   = 28,     /*!< TIM2 global Interrupt                                */
  TIM3_IRQn                   = 29,     /*!< TIM3 global Interrupt                                */
  TIM4_IRQn                   = 30,     /*!< TIM4 global Interrupt                                */
  I2C1_EV_IRQn                = 31,     /*!< I2C1 Event Interrupt                                 */
  I2C1_ER_IRQn                = 32,     /*!< I2C1 Error Interrupt                                 */
  I2C2_EV_IRQn                = 33,     /*!< I2C2 Event Interrupt                                 */
  I2C2_ER_IRQn                = 34,     /*!< I2C2 Error Interrupt                                 */
  SPI1_IRQn                   = 35,     /*!< SPI1 global Interrupt                                */
  SPI2_IRQn                   = 36,     /*!< SPI2 global Interrupt                                */
  USART1_IRQn                 = 37,     /*!< USART1 global Interrupt                              */
  USART2_IRQn                 = 38,     /*!< USART2 global Interrupt                              */
  USART3_IRQn                 = 39,     /*!< USART3 global Interrupt                              */
  EXTI15_10_IRQn              = 40,     /*!< External Line[15:10] Interrupts                      */
  RTCAlarm_IRQn               = 41,     /*!< RTC Alarm through EXTI Line Interrupt                */
  CEC_IRQn                    = 42,     /*!< HDMI-CEC Interrupt                                   */
  TIM12_IRQn                  = 43,     /*!< TIM12 global Interrupt                               */
  TIM13_IRQn                  = 44,     /*!< TIM13 global Interrupt                               */
  TIM14_IRQn                  = 45,     /*!< TIM14 global Interrupt                               */
  TIM5_IRQn                   = 50,     /*!< TIM5 global Interrupt                                */
  SPI3_IRQn                   = 51,     /*!< SPI3 global Interrupt                                */
  UART4_IRQn                  = 52,     /*!< UART4 global Interrupt                               */
  UART5_IRQn                  = 53,     /*!< UART5 global Interrupt                               */
  TIM6_DAC_IRQn               = 54,     /*!< TIM6 and DAC underrun Interrupt                      */
  TIM7_IRQn                   = 55,     /*!< TIM7 Interrupt                                       */
  DMA2_Channel1_IRQn          = 56,     /*!< DMA2 Channel 1 global Interrupt                      */
  DMA2_Channel2_IRQn          = 57,     /*!< DMA2 Channel 2 global Interrupt                      */
  DMA2_Channel3_IRQn          = 58,     /*!< DMA2 Channel 3 global Interrupt                      */
  DMA2_Channel4_5_IRQn        = 59,     /*!< DMA2 Channel 4 and Channel 5 global Interrupt        */
  DMA2_Channel5_IRQn          = 60      /*!< DMA2 Channel 5 global Interrupt (DMA2 Channel 5 is
                                             mapped at position 60 only if the MISC_REMAP bit in
                                             the AFIO_MAPR2 register is set)                      */
#endif /* STM32F10X_HD_VL */

#ifdef STM32F10X_XL
  ADC1_2_IRQn                 = 18,     /*!< ADC1 and ADC2 global Interrupt                       */
  USB_HP_CAN1_TX_IRQn         = 19,     /*!< USB Device High Priority or CAN1 TX Interrupts       */
  USB_LP_CAN1_RX0_IRQn        = 20,     /*!< USB Device Low Priority or CAN1 RX0 Interrupts       */
  CAN1_RX1_IRQn               = 21,     /*!< CAN1 RX1 Interrupt                                   */
  CAN1_SCE_IRQn               = 22,     /*!< CAN1 SCE Interrupt                                   */
  EXTI9_5_IRQn                = 23,     /*!< External Line[9:5] Interrupts                        */
  TIM1_BRK_TIM9_IRQn          = 24,     /*!< TIM1 Break Interrupt and TIM9 global Interrupt       */
  TIM1_UP_TIM10_IRQn          = 25,     /*!< TIM1 Update Interrupt and TIM10 global Interrupt     */
  TIM1_TRG_COM_TIM11_IRQn     = 26,     /*!< TIM1 Trigger and Commutation Interrupt and TIM11 global interrupt */
  TIM1_CC_IRQn                = 27,     /*!< TIM1 Capture Compare Interrupt                       */
  TIM2_IRQn                   = 28,     /*!< TIM2 global Interrupt                                */
  TIM3_IRQn                   = 29,     /*!< TIM3 global Interrupt                                */
  TIM4_IRQn                   = 30,     /*!< TIM4 global Interrupt                                */
  I2C1_EV_IRQn                = 31,     /*!< I2C1 Event Interrupt                                 */
  I2C1_ER_IRQn                = 32,     /*!< I2C1 Error Interrupt                                 */
  I2C2_EV_IRQn                = 33,     /*!< I2C2 Event Interrupt                                 */
  I2C2_ER_IRQn                = 34,     /*!< I2C2 Error Interrupt                                 */
  SPI1_IRQn                   = 35,     /*!< SPI1 global Interrupt                                */
  SPI2_IRQn                   = 36,     /*!< SPI2 global Interrupt                                */
  USART1_IRQn                 = 37,     /*!< USART1 global Interrupt                              */
  USART2_IRQn                 = 38,     /*!< USART2 global Interrupt                              */
  USART3_IRQn                 = 39,     /*!< USART3 global Interrupt                              */
  EXTI15_10_IRQn              = 40,     /*!< External Line[15:10] Interrupts                      */
  RTCAlarm_IRQn               = 41,     /*!< RTC Alarm through EXTI Line Interrupt                */
  USBWakeUp_IRQn              = 42,     /*!< USB Device WakeUp from suspend through EXTI Line Interrupt */
  TIM8_BRK_TIM12_IRQn         = 43,     /*!< TIM8 Break Interrupt and TIM12 global Interrupt      */
  TIM8_UP_TIM13_IRQn          = 44,     /*!< TIM8 Update Interrupt and TIM13 global Interrupt     */
  TIM8_TRG_COM_TIM14_IRQn     = 45,     /*!< TIM8 Trigger and Commutation Interrupt and TIM14 global interrupt */
  TIM8_CC_IRQn                = 46,     /*!< TIM8 Capture Compare Interrupt                       */
  ADC3_IRQn                   = 47,     /*!< ADC3 global Interrupt                                */
  FSMC_IRQn                   = 48,     /*!< FSMC global Interrupt                                */
  SDIO_IRQn                   = 49,     /*!< SDIO global Interrupt                                */
  TIM5_IRQn                   = 50,     /*!< TIM5 global Interrupt                                */
  SPI3_IRQn                   = 51,     /*!< SPI3 global Interrupt                                */
  UART4_IRQn                  = 52,     /*!< UART4 global Interrupt                               */
  UART5_IRQn                  = 53,     /*!< UART5 global Interrupt                               */
  TIM6_IRQn                   = 54,     /*!< TIM6 global Interrupt                                */
  TIM7_IRQn                   = 55,     /*!< TIM7 global Interrupt                                */
  DMA2_Channel1_IRQn          = 56,     /*!< DMA2 Channel 1 global Interrupt                      */
  DMA2_Channel2_IRQn          = 57,     /*!< DMA2 Channel 2 global Interrupt                      */
  DMA2_Channel3_IRQn          = 58,     /*!< DMA2 Channel 3 global Interrupt                      */
  DMA2_Channel4_5_IRQn        = 59      /*!< DMA2 Channel 4 and Channel 5 global Interrupt        */
#endif /* STM32F10X_XL */

#ifdef STM32F10X_CL
  ADC1_2_IRQn                 = 18,     /*!< ADC1 and ADC2 global Interrupt                       */
  CAN1_TX_IRQn                = 19,     /*!< USB Device High Priority or CAN1 TX Interrupts       */
  CAN1_RX0_IRQn               = 20,     /*!< USB Device Low Priority or CAN1 RX0 Interrupts       */
  CAN1_RX1_IRQn               = 21,     /*!< CAN1 RX1 Interrupt                                   */
  CAN1_SCE_IRQn               = 22,     /*!< CAN1 SCE Interrupt                                   */
  EXTI9_5_IRQn                = 23,     /*!< External Line[9:5] Interrupts                        */
  TIM1_BRK_IRQn               = 24,     /*!< TIM1 Break Interrupt                                 */
  TIM1_UP_IRQn                = 25,     /*!< TIM1 Update Interrupt                                */
  TIM1_TRG_COM_IRQn           = 26,     /*!< TIM1 Trigger and Commutation Interrupt               */
  TIM1_CC_IRQn                = 27,     /*!< TIM1 Capture Compare Interrupt                       */
  TIM2_IRQn                   = 28,     /*!< TIM2 global Interrupt                                */
  TIM3_IRQn                   = 29,     /*!< TIM3 global Interrupt                                */
  TIM4_IRQn                   = 30,     /*!< TIM4 global Interrupt                                */
  I2C1_EV_IRQn                = 31,     /*!< I2C1 Event Interrupt                                 */
  I2C1_ER_IRQn                = 32,     /*!< I2C1 Error Interrupt                                 */
  I2C2_EV_IRQn                = 33,     /*!< I2C2 Event Interrupt                                 */
  I2C2_ER_IRQn                = 34,     /*!< I2C2 Error Interrupt                                 */
  SPI1_IRQn                   = 35,     /*!< SPI1 global Interrupt                                */
  SPI2_IRQn                   = 36,     /*!< SPI2 global Interrupt                                */
  USART1_IRQn                 = 37,     /*!< USART1 global Interrupt                              */
  USART2_IRQn                 = 38,     /*!< USART2 global Interrupt                              */
  USART3_IRQn                 = 39,     /*!< USART3 global Interrupt                              */
  EXTI15_10_IRQn              = 40,     /*!< External Line[15:10] Interrupts                      */
  RTCAlarm_IRQn               = 41,     /*!< RTC Alarm through EXTI Line Interrupt                */
  OTG_FS_WKUP_IRQn            = 42,     /*!< USB OTG FS WakeUp from suspend through EXTI Line Interrupt */
  TIM5_IRQn                   = 50,     /*!< TIM5 global Interrupt                                */
  SPI3_IRQn                   = 51,     /*!< SPI3 global Interrupt                                */
  UART4_IRQn                  = 52,     /*!< UART4 global Interrupt                               */
  UART5_IRQn                  = 53,     /*!< UART5 global Interrupt                               */
  TIM6_IRQn                   = 54,     /*!< TIM6 global Interrupt                                */
  TIM7_IRQn                   = 55,     /*!< TIM7 global Interrupt                                */
  DMA2_Channel1_IRQn          = 56,     /*!< DMA2 Channel 1 global Interrupt                      */
  DMA2_Channel2_IRQn          = 57,     /*!< DMA2 Channel 2 global Interrupt                      */
  DMA2_Channel3_IRQn          = 58,     /*!< DMA2 Channel 3 global Interrupt                      */
  DMA2_Channel4_IRQn          = 59,     /*!< DMA2 Channel 4 global Interrupt                      */
  DMA2_Channel5_IRQn          = 60,     /*!< DMA2 Channel 5 global Interrupt                      */
  ETH_IRQn                    = 61,     /*!< Ethernet global Interrupt                            */
  ETH_WKUP_IRQn               = 62,     /*!< Ethernet Wakeup through EXTI line Interrupt          */
  CAN2_TX_IRQn                = 63,     /*!< CAN2 TX Interrupt                                    */
  CAN2_RX0_IRQn               = 64,     /*!< CAN2 RX0 Interrupt                                   */
  CAN2_RX1_IRQn               = 65,     /*!< CAN2 RX1 Interrupt                                   */
  CAN2_SCE_IRQn               = 66,     /*!< CAN2 SCE Interrupt                                   */
  OTG_FS_IRQn                 = 67      /*!< USB OTG FS global Interrupt                          */
#endif /* STM32F10X_CL */
} IRQn_Type;


/* =========================================================================================================================== */
/* ================                           Processor and Core Peripheral Section                           ================ */
/* =========================================================================================================================== */

/* =============================  Configuration of the undefined Processor and Core Peripherals  ============================= */
#define __UNDEF_REV                 0x0000U     /*!< undef Core Revision                                                       */
#define __NVIC_PRIO_BITS               0        /*!< Number of Bits used for Priority Levels                                   */
#define __Vendor_SysTickConfig         0        /*!< Set to 1 if different SysTick Config is used                              */


/** @} */ /* End of group Configuration_of_CMSIS */

//#include "core_undef.h"                         /*!< undefined processor and core peripherals                                  */
#include "core_cm3.h"

/* ========================================  Start of section using anonymous unions  ======================================== */
#if defined (__CC_ARM)
  #pragma push
  #pragma anon_unions
#elif defined (__ICCARM__)
  #pragma language=extended
#elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wc11-extensions"
  #pragma clang diagnostic ignored "-Wreserved-id-macro"
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning 586
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#else
  #warning Not supported compiler type
#endif

// attribute for AHB Periphearl Word aligned access


/* =========================================================================================================================== */
/* ================                            Device Specific Peripheral Section                             ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                           FSMC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Flexible static memory controller (FSMC)
  */

typedef struct {                                /*!< (@ 0xA0000000) FSMC Structure                                             */

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) SRAM/NOR-Flash chip-select control register 1              */

    struct {
      __IOM uint32_t MBKEN      : 1;            /*!< (@ 0x00000000) MBKEN                                                      */
      __IOM uint32_t MUXEN      : 1;            /*!< (@ 0x00000001) MUXEN                                                      */
      __IOM uint32_t MTYP       : 2;            /*!< (@ 0x00000002) MTYP                                                       */
      __IOM uint32_t MWID       : 2;            /*!< (@ 0x00000004) MWID                                                       */
      __IOM uint32_t FACCEN     : 1;            /*!< (@ 0x00000006) FACCEN                                                     */
      __IM  uint32_t            : 1;
      __IOM uint32_t BURSTEN    : 1;            /*!< (@ 0x00000008) BURSTEN                                                    */
      __IOM uint32_t WAITPOL    : 1;            /*!< (@ 0x00000009) WAITPOL                                                    */
      __IM  uint32_t            : 1;
      __IOM uint32_t WAITCFG    : 1;            /*!< (@ 0x0000000B) WAITCFG                                                    */
      __IOM uint32_t WREN       : 1;            /*!< (@ 0x0000000C) WREN                                                       */
      __IOM uint32_t WAITEN     : 1;            /*!< (@ 0x0000000D) WAITEN                                                     */
      __IOM uint32_t EXTMOD     : 1;            /*!< (@ 0x0000000E) EXTMOD                                                     */
      __IOM uint32_t ASYNCWAIT  : 1;            /*!< (@ 0x0000000F) ASYNCWAIT                                                  */
      __IM  uint32_t            : 3;
      __IOM uint32_t CBURSTRW   : 1;            /*!< (@ 0x00000013) CBURSTRW                                                   */
    } bit;
  } BCR1;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000004) SRAM/NOR-Flash chip-select timing register 1               */

    struct {
      __IOM uint32_t ADDSET     : 4;            /*!< (@ 0x00000000) ADDSET                                                     */
      __IOM uint32_t ADDHLD     : 4;            /*!< (@ 0x00000004) ADDHLD                                                     */
      __IOM uint32_t DATAST     : 8;            /*!< (@ 0x00000008) DATAST                                                     */
      __IOM uint32_t BUSTURN    : 4;            /*!< (@ 0x00000010) BUSTURN                                                    */
      __IOM uint32_t CLKDIV     : 4;            /*!< (@ 0x00000014) CLKDIV                                                     */
      __IOM uint32_t DATLAT     : 4;            /*!< (@ 0x00000018) DATLAT                                                     */
      __IOM uint32_t ACCMOD     : 2;            /*!< (@ 0x0000001C) ACCMOD                                                     */
    } bit;
  } BTR1;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000008) SRAM/NOR-Flash chip-select control register 2              */

    struct {
      __IOM uint32_t MBKEN      : 1;            /*!< (@ 0x00000000) MBKEN                                                      */
      __IOM uint32_t MUXEN      : 1;            /*!< (@ 0x00000001) MUXEN                                                      */
      __IOM uint32_t MTYP       : 2;            /*!< (@ 0x00000002) MTYP                                                       */
      __IOM uint32_t MWID       : 2;            /*!< (@ 0x00000004) MWID                                                       */
      __IOM uint32_t FACCEN     : 1;            /*!< (@ 0x00000006) FACCEN                                                     */
      __IM  uint32_t            : 1;
      __IOM uint32_t BURSTEN    : 1;            /*!< (@ 0x00000008) BURSTEN                                                    */
      __IOM uint32_t WAITPOL    : 1;            /*!< (@ 0x00000009) WAITPOL                                                    */
      __IOM uint32_t WRAPMOD    : 1;            /*!< (@ 0x0000000A) WRAPMOD                                                    */
      __IOM uint32_t WAITCFG    : 1;            /*!< (@ 0x0000000B) WAITCFG                                                    */
      __IOM uint32_t WREN       : 1;            /*!< (@ 0x0000000C) WREN                                                       */
      __IOM uint32_t WAITEN     : 1;            /*!< (@ 0x0000000D) WAITEN                                                     */
      __IOM uint32_t EXTMOD     : 1;            /*!< (@ 0x0000000E) EXTMOD                                                     */
      __IOM uint32_t ASYNCWAIT  : 1;            /*!< (@ 0x0000000F) ASYNCWAIT                                                  */
      __IM  uint32_t            : 3;
      __IOM uint32_t CBURSTRW   : 1;            /*!< (@ 0x00000013) CBURSTRW                                                   */
    } bit;
  } BCR2;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000000C) SRAM/NOR-Flash chip-select timing register 2               */

    struct {
      __IOM uint32_t ADDSET     : 4;            /*!< (@ 0x00000000) ADDSET                                                     */
      __IOM uint32_t ADDHLD     : 4;            /*!< (@ 0x00000004) ADDHLD                                                     */
      __IOM uint32_t DATAST     : 8;            /*!< (@ 0x00000008) DATAST                                                     */
      __IOM uint32_t BUSTURN    : 4;            /*!< (@ 0x00000010) BUSTURN                                                    */
      __IOM uint32_t CLKDIV     : 4;            /*!< (@ 0x00000014) CLKDIV                                                     */
      __IOM uint32_t DATLAT     : 4;            /*!< (@ 0x00000018) DATLAT                                                     */
      __IOM uint32_t ACCMOD     : 2;            /*!< (@ 0x0000001C) ACCMOD                                                     */
    } bit;
  } BTR2;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) SRAM/NOR-Flash chip-select control register 3              */

    struct {
      __IOM uint32_t MBKEN      : 1;            /*!< (@ 0x00000000) MBKEN                                                      */
      __IOM uint32_t MUXEN      : 1;            /*!< (@ 0x00000001) MUXEN                                                      */
      __IOM uint32_t MTYP       : 2;            /*!< (@ 0x00000002) MTYP                                                       */
      __IOM uint32_t MWID       : 2;            /*!< (@ 0x00000004) MWID                                                       */
      __IOM uint32_t FACCEN     : 1;            /*!< (@ 0x00000006) FACCEN                                                     */
      __IM  uint32_t            : 1;
      __IOM uint32_t BURSTEN    : 1;            /*!< (@ 0x00000008) BURSTEN                                                    */
      __IOM uint32_t WAITPOL    : 1;            /*!< (@ 0x00000009) WAITPOL                                                    */
      __IOM uint32_t WRAPMOD    : 1;            /*!< (@ 0x0000000A) WRAPMOD                                                    */
      __IOM uint32_t WAITCFG    : 1;            /*!< (@ 0x0000000B) WAITCFG                                                    */
      __IOM uint32_t WREN       : 1;            /*!< (@ 0x0000000C) WREN                                                       */
      __IOM uint32_t WAITEN     : 1;            /*!< (@ 0x0000000D) WAITEN                                                     */
      __IOM uint32_t EXTMOD     : 1;            /*!< (@ 0x0000000E) EXTMOD                                                     */
      __IOM uint32_t ASYNCWAIT  : 1;            /*!< (@ 0x0000000F) ASYNCWAIT                                                  */
      __IM  uint32_t            : 3;
      __IOM uint32_t CBURSTRW   : 1;            /*!< (@ 0x00000013) CBURSTRW                                                   */
    } bit;
  } BCR3;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000014) SRAM/NOR-Flash chip-select timing register 3               */

    struct {
      __IOM uint32_t ADDSET     : 4;            /*!< (@ 0x00000000) ADDSET                                                     */
      __IOM uint32_t ADDHLD     : 4;            /*!< (@ 0x00000004) ADDHLD                                                     */
      __IOM uint32_t DATAST     : 8;            /*!< (@ 0x00000008) DATAST                                                     */
      __IOM uint32_t BUSTURN    : 4;            /*!< (@ 0x00000010) BUSTURN                                                    */
      __IOM uint32_t CLKDIV     : 4;            /*!< (@ 0x00000014) CLKDIV                                                     */
      __IOM uint32_t DATLAT     : 4;            /*!< (@ 0x00000018) DATLAT                                                     */
      __IOM uint32_t ACCMOD     : 2;            /*!< (@ 0x0000001C) ACCMOD                                                     */
    } bit;
  } BTR3;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000018) SRAM/NOR-Flash chip-select control register 4              */

    struct {
      __IOM uint32_t MBKEN      : 1;            /*!< (@ 0x00000000) MBKEN                                                      */
      __IOM uint32_t MUXEN      : 1;            /*!< (@ 0x00000001) MUXEN                                                      */
      __IOM uint32_t MTYP       : 2;            /*!< (@ 0x00000002) MTYP                                                       */
      __IOM uint32_t MWID       : 2;            /*!< (@ 0x00000004) MWID                                                       */
      __IOM uint32_t FACCEN     : 1;            /*!< (@ 0x00000006) FACCEN                                                     */
      __IM  uint32_t            : 1;
      __IOM uint32_t BURSTEN    : 1;            /*!< (@ 0x00000008) BURSTEN                                                    */
      __IOM uint32_t WAITPOL    : 1;            /*!< (@ 0x00000009) WAITPOL                                                    */
      __IOM uint32_t WRAPMOD    : 1;            /*!< (@ 0x0000000A) WRAPMOD                                                    */
      __IOM uint32_t WAITCFG    : 1;            /*!< (@ 0x0000000B) WAITCFG                                                    */
      __IOM uint32_t WREN       : 1;            /*!< (@ 0x0000000C) WREN                                                       */
      __IOM uint32_t WAITEN     : 1;            /*!< (@ 0x0000000D) WAITEN                                                     */
      __IOM uint32_t EXTMOD     : 1;            /*!< (@ 0x0000000E) EXTMOD                                                     */
      __IOM uint32_t ASYNCWAIT  : 1;            /*!< (@ 0x0000000F) ASYNCWAIT                                                  */
      __IM  uint32_t            : 3;
      __IOM uint32_t CBURSTRW   : 1;            /*!< (@ 0x00000013) CBURSTRW                                                   */
    } bit;
  } BCR4;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000001C) SRAM/NOR-Flash chip-select timing register 4               */

    struct {
      __IOM uint32_t ADDSET     : 4;            /*!< (@ 0x00000000) ADDSET                                                     */
      __IOM uint32_t ADDHLD     : 4;            /*!< (@ 0x00000004) ADDHLD                                                     */
      __IOM uint32_t DATAST     : 8;            /*!< (@ 0x00000008) DATAST                                                     */
      __IOM uint32_t BUSTURN    : 4;            /*!< (@ 0x00000010) BUSTURN                                                    */
      __IOM uint32_t CLKDIV     : 4;            /*!< (@ 0x00000014) CLKDIV                                                     */
      __IOM uint32_t DATLAT     : 4;            /*!< (@ 0x00000018) DATLAT                                                     */
      __IOM uint32_t ACCMOD     : 2;            /*!< (@ 0x0000001C) ACCMOD                                                     */
    } bit;
  } BTR4;
  __IM  uint32_t  RESERVED[16];

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000060) PC Card/NAND Flash control register 2                      */

    struct {
      __IM  uint32_t            : 1;
      __IOM uint32_t PWAITEN    : 1;            /*!< (@ 0x00000001) PWAITEN                                                    */
      __IOM uint32_t PBKEN      : 1;            /*!< (@ 0x00000002) PBKEN                                                      */
      __IOM uint32_t PTYP       : 1;            /*!< (@ 0x00000003) PTYP                                                       */
      __IOM uint32_t PWID       : 2;            /*!< (@ 0x00000004) PWID                                                       */
      __IOM uint32_t ECCEN      : 1;            /*!< (@ 0x00000006) ECCEN                                                      */
      __IM  uint32_t            : 2;
      __IOM uint32_t TCLR       : 4;            /*!< (@ 0x00000009) TCLR                                                       */
      __IOM uint32_t TAR        : 4;            /*!< (@ 0x0000000D) TAR                                                        */
      __IOM uint32_t ECCPS      : 3;            /*!< (@ 0x00000011) ECCPS                                                      */
    } bit;
  } PCR2;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000064) FIFO status and interrupt register 2                       */

    struct {
      __IOM uint32_t IRS        : 1;            /*!< (@ 0x00000000) IRS                                                        */
      __IOM uint32_t ILS        : 1;            /*!< (@ 0x00000001) ILS                                                        */
      __IOM uint32_t IFS        : 1;            /*!< (@ 0x00000002) IFS                                                        */
      __IOM uint32_t IREN       : 1;            /*!< (@ 0x00000003) IREN                                                       */
      __IOM uint32_t ILEN       : 1;            /*!< (@ 0x00000004) ILEN                                                       */
      __IOM uint32_t IFEN       : 1;            /*!< (@ 0x00000005) IFEN                                                       */
      __IM  uint32_t FEMPT      : 1;            /*!< (@ 0x00000006) FEMPT                                                      */
    } bit;
  } SR2;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000068) Common memory space timing register 2                      */

    struct {
      __IOM uint32_t MEMSETx    : 8;            /*!< (@ 0x00000000) MEMSETx                                                    */
      __IOM uint32_t MEMWAITx   : 8;            /*!< (@ 0x00000008) MEMWAITx                                                   */
      __IOM uint32_t MEMHOLDx   : 8;            /*!< (@ 0x00000010) MEMHOLDx                                                   */
      __IOM uint32_t MEMHIZx    : 8;            /*!< (@ 0x00000018) MEMHIZx                                                    */
    } bit;
  } PMEM2;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000006C) Attribute memory space timing register 2                   */

    struct {
      __IOM uint32_t ATTSETx    : 8;            /*!< (@ 0x00000000) Attribute memory x setup time                              */
      __IOM uint32_t ATTWAITx   : 8;            /*!< (@ 0x00000008) Attribute memory x wait time                               */
      __IOM uint32_t ATTHOLDx   : 8;            /*!< (@ 0x00000010) Attribute memory x hold time                               */
      __IOM uint32_t ATTHIZx    : 8;            /*!< (@ 0x00000018) Attribute memory x databus HiZ time                        */
    } bit;
  } PATT2;
  __IM  uint32_t  RESERVED1;

  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000074) ECC result register 2                                      */

    struct {
      __IM  uint32_t ECCx       : 32;           /*!< (@ 0x00000000) ECC result                                                 */
    } bit;
  } ECCR2;
  __IM  uint32_t  RESERVED2[2];

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000080) PC Card/NAND Flash control register 3                      */

    struct {
      __IM  uint32_t            : 1;
      __IOM uint32_t PWAITEN    : 1;            /*!< (@ 0x00000001) PWAITEN                                                    */
      __IOM uint32_t PBKEN      : 1;            /*!< (@ 0x00000002) PBKEN                                                      */
      __IOM uint32_t PTYP       : 1;            /*!< (@ 0x00000003) PTYP                                                       */
      __IOM uint32_t PWID       : 2;            /*!< (@ 0x00000004) PWID                                                       */
      __IOM uint32_t ECCEN      : 1;            /*!< (@ 0x00000006) ECCEN                                                      */
      __IM  uint32_t            : 2;
      __IOM uint32_t TCLR       : 4;            /*!< (@ 0x00000009) TCLR                                                       */
      __IOM uint32_t TAR        : 4;            /*!< (@ 0x0000000D) TAR                                                        */
      __IOM uint32_t ECCPS      : 3;            /*!< (@ 0x00000011) ECCPS                                                      */
    } bit;
  } PCR3;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000084) FIFO status and interrupt register 3                       */

    struct {
      __IOM uint32_t IRS        : 1;            /*!< (@ 0x00000000) IRS                                                        */
      __IOM uint32_t ILS        : 1;            /*!< (@ 0x00000001) ILS                                                        */
      __IOM uint32_t IFS        : 1;            /*!< (@ 0x00000002) IFS                                                        */
      __IOM uint32_t IREN       : 1;            /*!< (@ 0x00000003) IREN                                                       */
      __IOM uint32_t ILEN       : 1;            /*!< (@ 0x00000004) ILEN                                                       */
      __IOM uint32_t IFEN       : 1;            /*!< (@ 0x00000005) IFEN                                                       */
      __IM  uint32_t FEMPT      : 1;            /*!< (@ 0x00000006) FEMPT                                                      */
    } bit;
  } SR3;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000088) Common memory space timing register 3                      */

    struct {
      __IOM uint32_t MEMSETx    : 8;            /*!< (@ 0x00000000) MEMSETx                                                    */
      __IOM uint32_t MEMWAITx   : 8;            /*!< (@ 0x00000008) MEMWAITx                                                   */
      __IOM uint32_t MEMHOLDx   : 8;            /*!< (@ 0x00000010) MEMHOLDx                                                   */
      __IOM uint32_t MEMHIZx    : 8;            /*!< (@ 0x00000018) MEMHIZx                                                    */
    } bit;
  } PMEM3;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000008C) Attribute memory space timing register 3                   */

    struct {
      __IOM uint32_t ATTSETx    : 8;            /*!< (@ 0x00000000) ATTSETx                                                    */
      __IOM uint32_t ATTWAITx   : 8;            /*!< (@ 0x00000008) ATTWAITx                                                   */
      __IOM uint32_t ATTHOLDx   : 8;            /*!< (@ 0x00000010) ATTHOLDx                                                   */
      __IOM uint32_t ATTHIZx    : 8;            /*!< (@ 0x00000018) ATTHIZx                                                    */
    } bit;
  } PATT3;
  __IM  uint32_t  RESERVED3;

  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000094) ECC result register 3                                      */

    struct {
      __IM  uint32_t ECCx       : 32;           /*!< (@ 0x00000000) ECCx                                                       */
    } bit;
  } ECCR3;
  __IM  uint32_t  RESERVED4[2];

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000A0) PC Card/NAND Flash control register 4                      */

    struct {
      __IM  uint32_t            : 1;
      __IOM uint32_t PWAITEN    : 1;            /*!< (@ 0x00000001) PWAITEN                                                    */
      __IOM uint32_t PBKEN      : 1;            /*!< (@ 0x00000002) PBKEN                                                      */
      __IOM uint32_t PTYP       : 1;            /*!< (@ 0x00000003) PTYP                                                       */
      __IOM uint32_t PWID       : 2;            /*!< (@ 0x00000004) PWID                                                       */
      __IOM uint32_t ECCEN      : 1;            /*!< (@ 0x00000006) ECCEN                                                      */
      __IM  uint32_t            : 2;
      __IOM uint32_t TCLR       : 4;            /*!< (@ 0x00000009) TCLR                                                       */
      __IOM uint32_t TAR        : 4;            /*!< (@ 0x0000000D) TAR                                                        */
      __IOM uint32_t ECCPS      : 3;            /*!< (@ 0x00000011) ECCPS                                                      */
    } bit;
  } PCR4;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000A4) FIFO status and interrupt register 4                       */

    struct {
      __IOM uint32_t IRS        : 1;            /*!< (@ 0x00000000) IRS                                                        */
      __IOM uint32_t ILS        : 1;            /*!< (@ 0x00000001) ILS                                                        */
      __IOM uint32_t IFS        : 1;            /*!< (@ 0x00000002) IFS                                                        */
      __IOM uint32_t IREN       : 1;            /*!< (@ 0x00000003) IREN                                                       */
      __IOM uint32_t ILEN       : 1;            /*!< (@ 0x00000004) ILEN                                                       */
      __IOM uint32_t IFEN       : 1;            /*!< (@ 0x00000005) IFEN                                                       */
      __IM  uint32_t FEMPT      : 1;            /*!< (@ 0x00000006) FEMPT                                                      */
    } bit;
  } SR4;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000A8) Common memory space timing register 4                      */

    struct {
      __IOM uint32_t MEMSETx    : 8;            /*!< (@ 0x00000000) MEMSETx                                                    */
      __IOM uint32_t MEMWAITx   : 8;            /*!< (@ 0x00000008) MEMWAITx                                                   */
      __IOM uint32_t MEMHOLDx   : 8;            /*!< (@ 0x00000010) MEMHOLDx                                                   */
      __IOM uint32_t MEMHIZx    : 8;            /*!< (@ 0x00000018) MEMHIZx                                                    */
    } bit;
  } PMEM4;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000AC) Attribute memory space timing register 4                   */

    struct {
      __IOM uint32_t ATTSETx    : 8;            /*!< (@ 0x00000000) ATTSETx                                                    */
      __IOM uint32_t ATTWAITx   : 8;            /*!< (@ 0x00000008) ATTWAITx                                                   */
      __IOM uint32_t ATTHOLDx   : 8;            /*!< (@ 0x00000010) ATTHOLDx                                                   */
      __IOM uint32_t ATTHIZx    : 8;            /*!< (@ 0x00000018) ATTHIZx                                                    */
    } bit;
  } PATT4;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000B0) I/O space timing register 4                                */

    struct {
      __IOM uint32_t IOSETx     : 8;            /*!< (@ 0x00000000) IOSETx                                                     */
      __IOM uint32_t IOWAITx    : 8;            /*!< (@ 0x00000008) IOWAITx                                                    */
      __IOM uint32_t IOHOLDx    : 8;            /*!< (@ 0x00000010) IOHOLDx                                                    */
      __IOM uint32_t IOHIZx     : 8;            /*!< (@ 0x00000018) IOHIZx                                                     */
    } bit;
  } PIO4;
  __IM  uint32_t  RESERVED5[20];

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000104) SRAM/NOR-Flash write timing registers 1                    */

    struct {
      __IOM uint32_t ADDSET     : 4;            /*!< (@ 0x00000000) ADDSET                                                     */
      __IOM uint32_t ADDHLD     : 4;            /*!< (@ 0x00000004) ADDHLD                                                     */
      __IOM uint32_t DATAST     : 8;            /*!< (@ 0x00000008) DATAST                                                     */
      __IM  uint32_t            : 4;
      __IOM uint32_t CLKDIV     : 4;            /*!< (@ 0x00000014) CLKDIV                                                     */
      __IOM uint32_t DATLAT     : 4;            /*!< (@ 0x00000018) DATLAT                                                     */
      __IOM uint32_t ACCMOD     : 2;            /*!< (@ 0x0000001C) ACCMOD                                                     */
    } bit;
  } BWTR1;
  __IM  uint32_t  RESERVED6;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000010C) SRAM/NOR-Flash write timing registers 2                    */

    struct {
      __IOM uint32_t ADDSET     : 4;            /*!< (@ 0x00000000) ADDSET                                                     */
      __IOM uint32_t ADDHLD     : 4;            /*!< (@ 0x00000004) ADDHLD                                                     */
      __IOM uint32_t DATAST     : 8;            /*!< (@ 0x00000008) DATAST                                                     */
      __IM  uint32_t            : 4;
      __IOM uint32_t CLKDIV     : 4;            /*!< (@ 0x00000014) CLKDIV                                                     */
      __IOM uint32_t DATLAT     : 4;            /*!< (@ 0x00000018) DATLAT                                                     */
      __IOM uint32_t ACCMOD     : 2;            /*!< (@ 0x0000001C) ACCMOD                                                     */
    } bit;
  } BWTR2;
  __IM  uint32_t  RESERVED7;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000114) SRAM/NOR-Flash write timing registers 3                    */

    struct {
      __IOM uint32_t ADDSET     : 4;            /*!< (@ 0x00000000) ADDSET                                                     */
      __IOM uint32_t ADDHLD     : 4;            /*!< (@ 0x00000004) ADDHLD                                                     */
      __IOM uint32_t DATAST     : 8;            /*!< (@ 0x00000008) DATAST                                                     */
      __IM  uint32_t            : 4;
      __IOM uint32_t CLKDIV     : 4;            /*!< (@ 0x00000014) CLKDIV                                                     */
      __IOM uint32_t DATLAT     : 4;            /*!< (@ 0x00000018) DATLAT                                                     */
      __IOM uint32_t ACCMOD     : 2;            /*!< (@ 0x0000001C) ACCMOD                                                     */
    } bit;
  } BWTR3;
  __IM  uint32_t  RESERVED8;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000011C) SRAM/NOR-Flash write timing registers 4                    */

    struct {
      __IOM uint32_t ADDSET     : 4;            /*!< (@ 0x00000000) ADDSET                                                     */
      __IOM uint32_t ADDHLD     : 4;            /*!< (@ 0x00000004) ADDHLD                                                     */
      __IOM uint32_t DATAST     : 8;            /*!< (@ 0x00000008) DATAST                                                     */
      __IM  uint32_t            : 4;
      __IOM uint32_t CLKDIV     : 4;            /*!< (@ 0x00000014) CLKDIV                                                     */
      __IOM uint32_t DATLAT     : 4;            /*!< (@ 0x00000018) DATLAT                                                     */
      __IOM uint32_t ACCMOD     : 2;            /*!< (@ 0x0000001C) ACCMOD                                                     */
    } bit;
  } BWTR4;
} FSMC_Type;                                    /*!< Size = 288 (0x120)                                                        */



/* =========================================================================================================================== */
/* ================                                            PWR                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Power control (PWR)
  */

typedef struct {                                /*!< (@ 0x40007000) PWR Structure                                              */

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Power control register (PWR_CR)                            */

    struct {
      __IOM uint32_t LPDS       : 1;            /*!< (@ 0x00000000) Low Power Deep Sleep                                       */
      __IOM uint32_t PDDS       : 1;            /*!< (@ 0x00000001) Power Down Deep Sleep                                      */
      __IOM uint32_t CWUF       : 1;            /*!< (@ 0x00000002) Clear Wake-up Flag                                         */
      __IOM uint32_t CSBF       : 1;            /*!< (@ 0x00000003) Clear STANDBY Flag                                         */
      __IOM uint32_t PVDE       : 1;            /*!< (@ 0x00000004) Power Voltage Detector Enable                              */
      __IOM uint32_t PLS        : 3;            /*!< (@ 0x00000005) PVD Level Selection                                        */
      __IOM uint32_t DBP        : 1;            /*!< (@ 0x00000008) Disable Backup Domain write protection                     */
    } bit;
  } CR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000004) Power control register (PWR_CR)                            */

    struct {
      __IM  uint32_t WUF        : 1;            /*!< (@ 0x00000000) Wake-Up Flag                                               */
      __IM  uint32_t SBF        : 1;            /*!< (@ 0x00000001) STANDBY Flag                                               */
      __IM  uint32_t PVDO       : 1;            /*!< (@ 0x00000002) PVD Output                                                 */
      __IM  uint32_t            : 5;
      __IOM uint32_t EWUP       : 1;            /*!< (@ 0x00000008) Enable WKUP pin                                            */
    } bit;
  } CSR;
} PWR_Type;                                     /*!< Size = 8 (0x8)                                                            */



/* =========================================================================================================================== */
/* ================                                            RCC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Reset and clock control (RCC)
  */

typedef struct {                                /*!< (@ 0x40021000) RCC Structure                                              */

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Clock control register                                     */

    struct {
      __IOM uint32_t HSION      : 1;            /*!< (@ 0x00000000) Internal High Speed clock enable                           */
      __IM  uint32_t HSIRDY     : 1;            /*!< (@ 0x00000001) Internal High Speed clock ready flag                       */
      __IM  uint32_t            : 1;
      __IOM uint32_t HSITRIM    : 5;            /*!< (@ 0x00000003) Internal High Speed clock trimming                         */
      __IM  uint32_t HSICAL     : 8;            /*!< (@ 0x00000008) Internal High Speed clock Calibration                      */
      __IOM uint32_t HSEON      : 1;            /*!< (@ 0x00000010) External High Speed clock enable                           */
      __IM  uint32_t HSERDY     : 1;            /*!< (@ 0x00000011) External High Speed clock ready flag                       */
      __IOM uint32_t HSEBYP     : 1;            /*!< (@ 0x00000012) External High Speed clock Bypass                           */
      __IOM uint32_t CSSON      : 1;            /*!< (@ 0x00000013) Clock Security System enable                               */
      __IM  uint32_t            : 4;
      __IOM uint32_t PLLON      : 1;            /*!< (@ 0x00000018) PLL enable                                                 */
      __IM  uint32_t PLLRDY     : 1;            /*!< (@ 0x00000019) PLL clock ready flag                                       */
    } bit;
  } CR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000004) Clock configuration register (RCC_CFGR)                    */

    struct {
      __IOM uint32_t SW         : 2;            /*!< (@ 0x00000000) System clock Switch                                        */
      __IM  uint32_t SWS        : 2;            /*!< (@ 0x00000002) System Clock Switch Status                                 */
      __IOM uint32_t HPRE       : 4;            /*!< (@ 0x00000004) AHB prescaler                                              */
      __IOM uint32_t PPRE1      : 3;            /*!< (@ 0x00000008) APB Low speed prescaler (APB1)                             */
      __IOM uint32_t PPRE2      : 3;            /*!< (@ 0x0000000B) APB High speed prescaler (APB2)                            */
      __IOM uint32_t ADCPRE     : 2;            /*!< (@ 0x0000000E) ADC prescaler                                              */
      __IOM uint32_t PLLSRC     : 1;            /*!< (@ 0x00000010) PLL entry clock source                                     */
      __IOM uint32_t PLLXTPRE   : 1;            /*!< (@ 0x00000011) HSE divider for PLL entry                                  */
      __IOM uint32_t PLLMUL     : 4;            /*!< (@ 0x00000012) PLL Multiplication Factor                                  */
      __IOM uint32_t USBPRE     : 1;            /*!< (@ 0x00000016) USB OTG FS prescaler                                       */
      __IM  uint32_t            : 1;
      __IOM uint32_t MCO        : 3;            /*!< (@ 0x00000018) Microcontroller clock output                               */
    } bit;
  } CFGR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000008) Clock interrupt register (RCC_CIR)                         */

    struct {
      __IM  uint32_t LSIRDYF    : 1;            /*!< (@ 0x00000000) LSI Ready Interrupt flag                                   */
      __IM  uint32_t LSERDYF    : 1;            /*!< (@ 0x00000001) LSE Ready Interrupt flag                                   */
      __IM  uint32_t HSIRDYF    : 1;            /*!< (@ 0x00000002) HSI Ready Interrupt flag                                   */
      __IM  uint32_t HSERDYF    : 1;            /*!< (@ 0x00000003) HSE Ready Interrupt flag                                   */
      __IM  uint32_t PLLRDYF    : 1;            /*!< (@ 0x00000004) PLL Ready Interrupt flag                                   */
      __IM  uint32_t            : 2;
      __IM  uint32_t CSSF       : 1;            /*!< (@ 0x00000007) Clock Security System Interrupt flag                       */
      __IOM uint32_t LSIRDYIE   : 1;            /*!< (@ 0x00000008) LSI Ready Interrupt Enable                                 */
      __IOM uint32_t LSERDYIE   : 1;            /*!< (@ 0x00000009) LSE Ready Interrupt Enable                                 */
      __IOM uint32_t HSIRDYIE   : 1;            /*!< (@ 0x0000000A) HSI Ready Interrupt Enable                                 */
      __IOM uint32_t HSERDYIE   : 1;            /*!< (@ 0x0000000B) HSE Ready Interrupt Enable                                 */
      __IOM uint32_t PLLRDYIE   : 1;            /*!< (@ 0x0000000C) PLL Ready Interrupt Enable                                 */
      __IM  uint32_t            : 3;
      __OM  uint32_t LSIRDYC    : 1;            /*!< (@ 0x00000010) LSI Ready Interrupt Clear                                  */
      __OM  uint32_t LSERDYC    : 1;            /*!< (@ 0x00000011) LSE Ready Interrupt Clear                                  */
      __OM  uint32_t HSIRDYC    : 1;            /*!< (@ 0x00000012) HSI Ready Interrupt Clear                                  */
      __OM  uint32_t HSERDYC    : 1;            /*!< (@ 0x00000013) HSE Ready Interrupt Clear                                  */
      __OM  uint32_t PLLRDYC    : 1;            /*!< (@ 0x00000014) PLL Ready Interrupt Clear                                  */
      __IM  uint32_t            : 2;
      __OM  uint32_t CSSC       : 1;            /*!< (@ 0x00000017) Clock security system interrupt clear                      */
    } bit;
  } CIR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000000C) APB2 peripheral reset register (RCC_APB2RSTR)              */

    struct {
      __IOM uint32_t AFIORST    : 1;            /*!< (@ 0x00000000) Alternate function I/O reset                               */
      __IM  uint32_t            : 1;
      __IOM uint32_t IOPARST    : 1;            /*!< (@ 0x00000002) IO port A reset                                            */
      __IOM uint32_t IOPBRST    : 1;            /*!< (@ 0x00000003) IO port B reset                                            */
      __IOM uint32_t IOPCRST    : 1;            /*!< (@ 0x00000004) IO port C reset                                            */
      __IOM uint32_t IOPDRST    : 1;            /*!< (@ 0x00000005) IO port D reset                                            */
      __IOM uint32_t IOPERST    : 1;            /*!< (@ 0x00000006) IO port E reset                                            */
      __IOM uint32_t IOPFRST    : 1;            /*!< (@ 0x00000007) IO port F reset                                            */
      __IOM uint32_t IOPGRST    : 1;            /*!< (@ 0x00000008) IO port G reset                                            */
      __IOM uint32_t ADC1RST    : 1;            /*!< (@ 0x00000009) ADC 1 interface reset                                      */
      __IOM uint32_t ADC2RST    : 1;            /*!< (@ 0x0000000A) ADC 2 interface reset                                      */
      __IOM uint32_t TIM1RST    : 1;            /*!< (@ 0x0000000B) TIM1 timer reset                                           */
      __IOM uint32_t SPI1RST    : 1;            /*!< (@ 0x0000000C) SPI 1 reset                                                */
      __IOM uint32_t TIM8RST    : 1;            /*!< (@ 0x0000000D) TIM8 timer reset                                           */
      __IOM uint32_t USART1RST  : 1;            /*!< (@ 0x0000000E) USART1 reset                                               */
      __IOM uint32_t ADC3RST    : 1;            /*!< (@ 0x0000000F) ADC 3 interface reset                                      */
      __IM  uint32_t            : 3;
      __IOM uint32_t TIM9RST    : 1;            /*!< (@ 0x00000013) TIM9 timer reset                                           */
      __IOM uint32_t TIM10RST   : 1;            /*!< (@ 0x00000014) TIM10 timer reset                                          */
      __IOM uint32_t TIM11RST   : 1;            /*!< (@ 0x00000015) TIM11 timer reset                                          */
    } bit;
  } APB2RSTR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) APB1 peripheral reset register (RCC_APB1RSTR)              */

    struct {
      __IOM uint32_t TIM2RST    : 1;            /*!< (@ 0x00000000) Timer 2 reset                                              */
      __IOM uint32_t TIM3RST    : 1;            /*!< (@ 0x00000001) Timer 3 reset                                              */
      __IOM uint32_t TIM4RST    : 1;            /*!< (@ 0x00000002) Timer 4 reset                                              */
      __IOM uint32_t TIM5RST    : 1;            /*!< (@ 0x00000003) Timer 5 reset                                              */
      __IOM uint32_t TIM6RST    : 1;            /*!< (@ 0x00000004) Timer 6 reset                                              */
      __IOM uint32_t TIM7RST    : 1;            /*!< (@ 0x00000005) Timer 7 reset                                              */
      __IOM uint32_t TIM12RST   : 1;            /*!< (@ 0x00000006) Timer 12 reset                                             */
      __IOM uint32_t TIM13RST   : 1;            /*!< (@ 0x00000007) Timer 13 reset                                             */
      __IOM uint32_t TIM14RST   : 1;            /*!< (@ 0x00000008) Timer 14 reset                                             */
      __IM  uint32_t            : 2;
      __IOM uint32_t WWDGRST    : 1;            /*!< (@ 0x0000000B) Window watchdog reset                                      */
      __IM  uint32_t            : 2;
      __IOM uint32_t SPI2RST    : 1;            /*!< (@ 0x0000000E) SPI2 reset                                                 */
      __IOM uint32_t SPI3RST    : 1;            /*!< (@ 0x0000000F) SPI3 reset                                                 */
      __IM  uint32_t            : 1;
      __IOM uint32_t USART2RST  : 1;            /*!< (@ 0x00000011) USART 2 reset                                              */
      __IOM uint32_t USART3RST  : 1;            /*!< (@ 0x00000012) USART 3 reset                                              */
      __IOM uint32_t UART4RST   : 1;            /*!< (@ 0x00000013) UART 4 reset                                               */
      __IOM uint32_t UART5RST   : 1;            /*!< (@ 0x00000014) UART 5 reset                                               */
      __IOM uint32_t I2C1RST    : 1;            /*!< (@ 0x00000015) I2C1 reset                                                 */
      __IOM uint32_t I2C2RST    : 1;            /*!< (@ 0x00000016) I2C2 reset                                                 */
      __IOM uint32_t USBRST     : 1;            /*!< (@ 0x00000017) USB reset                                                  */
      __IM  uint32_t            : 1;
      __IOM uint32_t CANRST     : 1;            /*!< (@ 0x00000019) CAN reset                                                  */
      __IM  uint32_t            : 1;
      __IOM uint32_t BKPRST     : 1;            /*!< (@ 0x0000001B) Backup interface reset                                     */
      __IOM uint32_t PWRRST     : 1;            /*!< (@ 0x0000001C) Power interface reset                                      */
      __IOM uint32_t DACRST     : 1;            /*!< (@ 0x0000001D) DAC interface reset                                        */
    } bit;
  } APB1RSTR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000014) AHB Peripheral Clock enable register (RCC_AHBENR)          */

    struct {
      __IOM uint32_t DMA1EN     : 1;            /*!< (@ 0x00000000) DMA1 clock enable                                          */
      __IOM uint32_t DMA2EN     : 1;            /*!< (@ 0x00000001) DMA2 clock enable                                          */
      __IOM uint32_t SRAMEN     : 1;            /*!< (@ 0x00000002) SRAM interface clock enable                                */
      __IM  uint32_t            : 1;
      __IOM uint32_t FLITFEN    : 1;            /*!< (@ 0x00000004) FLITF clock enable                                         */
      __IM  uint32_t            : 1;
      __IOM uint32_t CRCEN      : 1;            /*!< (@ 0x00000006) CRC clock enable                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t FSMCEN     : 1;            /*!< (@ 0x00000008) FSMC clock enable                                          */
      __IM  uint32_t            : 1;
      __IOM uint32_t SDIOEN     : 1;            /*!< (@ 0x0000000A) SDIO clock enable                                          */
    } bit;
  } AHBENR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000018) APB2 peripheral clock enable register (RCC_APB2ENR)        */

    struct {
      __IOM uint32_t AFIOEN     : 1;            /*!< (@ 0x00000000) Alternate function I/O clock enable                        */
      __IM  uint32_t            : 1;
      __IOM uint32_t IOPAEN     : 1;            /*!< (@ 0x00000002) I/O port A clock enable                                    */
      __IOM uint32_t IOPBEN     : 1;            /*!< (@ 0x00000003) I/O port B clock enable                                    */
      __IOM uint32_t IOPCEN     : 1;            /*!< (@ 0x00000004) I/O port C clock enable                                    */
      __IOM uint32_t IOPDEN     : 1;            /*!< (@ 0x00000005) I/O port D clock enable                                    */
      __IOM uint32_t IOPEEN     : 1;            /*!< (@ 0x00000006) I/O port E clock enable                                    */
      __IOM uint32_t IOPFEN     : 1;            /*!< (@ 0x00000007) I/O port F clock enable                                    */
      __IOM uint32_t IOPGEN     : 1;            /*!< (@ 0x00000008) I/O port G clock enable                                    */
      __IOM uint32_t ADC1EN     : 1;            /*!< (@ 0x00000009) ADC 1 interface clock enable                               */
      __IOM uint32_t ADC2EN     : 1;            /*!< (@ 0x0000000A) ADC 2 interface clock enable                               */
      __IOM uint32_t TIM1EN     : 1;            /*!< (@ 0x0000000B) TIM1 Timer clock enable                                    */
      __IOM uint32_t SPI1EN     : 1;            /*!< (@ 0x0000000C) SPI 1 clock enable                                         */
      __IOM uint32_t TIM8EN     : 1;            /*!< (@ 0x0000000D) TIM8 Timer clock enable                                    */
      __IOM uint32_t USART1EN   : 1;            /*!< (@ 0x0000000E) USART1 clock enable                                        */
      __IOM uint32_t ADC3EN     : 1;            /*!< (@ 0x0000000F) ADC3 interface clock enable                                */
      __IM  uint32_t            : 3;
      __IOM uint32_t TIM9EN     : 1;            /*!< (@ 0x00000013) TIM9 Timer clock enable                                    */
      __IOM uint32_t TIM10EN    : 1;            /*!< (@ 0x00000014) TIM10 Timer clock enable                                   */
      __IOM uint32_t TIM11EN    : 1;            /*!< (@ 0x00000015) TIM11 Timer clock enable                                   */
    } bit;
  } APB2ENR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000001C) APB1 peripheral clock enable register (RCC_APB1ENR)        */

    struct {
      __IOM uint32_t TIM2EN     : 1;            /*!< (@ 0x00000000) Timer 2 clock enable                                       */
      __IOM uint32_t TIM3EN     : 1;            /*!< (@ 0x00000001) Timer 3 clock enable                                       */
      __IOM uint32_t TIM4EN     : 1;            /*!< (@ 0x00000002) Timer 4 clock enable                                       */
      __IOM uint32_t TIM5EN     : 1;            /*!< (@ 0x00000003) Timer 5 clock enable                                       */
      __IOM uint32_t TIM6EN     : 1;            /*!< (@ 0x00000004) Timer 6 clock enable                                       */
      __IOM uint32_t TIM7EN     : 1;            /*!< (@ 0x00000005) Timer 7 clock enable                                       */
      __IOM uint32_t TIM12EN    : 1;            /*!< (@ 0x00000006) Timer 12 clock enable                                      */
      __IOM uint32_t TIM13EN    : 1;            /*!< (@ 0x00000007) Timer 13 clock enable                                      */
      __IOM uint32_t TIM14EN    : 1;            /*!< (@ 0x00000008) Timer 14 clock enable                                      */
      __IM  uint32_t            : 2;
      __IOM uint32_t WWDGEN     : 1;            /*!< (@ 0x0000000B) Window watchdog clock enable                               */
      __IM  uint32_t            : 2;
      __IOM uint32_t SPI2EN     : 1;            /*!< (@ 0x0000000E) SPI 2 clock enable                                         */
      __IOM uint32_t SPI3EN     : 1;            /*!< (@ 0x0000000F) SPI 3 clock enable                                         */
      __IM  uint32_t            : 1;
      __IOM uint32_t USART2EN   : 1;            /*!< (@ 0x00000011) USART 2 clock enable                                       */
      __IOM uint32_t USART3EN   : 1;            /*!< (@ 0x00000012) USART 3 clock enable                                       */
      __IOM uint32_t UART4EN    : 1;            /*!< (@ 0x00000013) UART 4 clock enable                                        */
      __IOM uint32_t UART5EN    : 1;            /*!< (@ 0x00000014) UART 5 clock enable                                        */
      __IOM uint32_t I2C1EN     : 1;            /*!< (@ 0x00000015) I2C 1 clock enable                                         */
      __IOM uint32_t I2C2EN     : 1;            /*!< (@ 0x00000016) I2C 2 clock enable                                         */
      __IOM uint32_t USBEN      : 1;            /*!< (@ 0x00000017) USB clock enable                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t CANEN      : 1;            /*!< (@ 0x00000019) CAN clock enable                                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t BKPEN      : 1;            /*!< (@ 0x0000001B) Backup interface clock enable                              */
      __IOM uint32_t PWREN      : 1;            /*!< (@ 0x0000001C) Power interface clock enable                               */
      __IOM uint32_t DACEN      : 1;            /*!< (@ 0x0000001D) DAC interface clock enable                                 */
    } bit;
  } APB1ENR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) Backup domain control register (RCC_BDCR)                  */

    struct {
      __IOM uint32_t LSEON      : 1;            /*!< (@ 0x00000000) External Low Speed oscillator enable                       */
      __IM  uint32_t LSERDY     : 1;            /*!< (@ 0x00000001) External Low Speed oscillator ready                        */
      __IOM uint32_t LSEBYP     : 1;            /*!< (@ 0x00000002) External Low Speed oscillator bypass                       */
      __IM  uint32_t            : 5;
      __IOM uint32_t RTCSEL     : 2;            /*!< (@ 0x00000008) RTC clock source selection                                 */
      __IM  uint32_t            : 5;
      __IOM uint32_t RTCEN      : 1;            /*!< (@ 0x0000000F) RTC clock enable                                           */
      __IOM uint32_t BDRST      : 1;            /*!< (@ 0x00000010) Backup domain software reset                               */
    } bit;
  } BDCR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000024) Control/status register (RCC_CSR)                          */

    struct {
      __IOM uint32_t LSION      : 1;            /*!< (@ 0x00000000) Internal low speed oscillator enable                       */
      __IM  uint32_t LSIRDY     : 1;            /*!< (@ 0x00000001) Internal low speed oscillator ready                        */
      __IM  uint32_t            : 22;
      __IOM uint32_t RMVF       : 1;            /*!< (@ 0x00000018) Remove reset flag                                          */
      __IM  uint32_t            : 1;
      __IOM uint32_t PINRSTF    : 1;            /*!< (@ 0x0000001A) PIN reset flag                                             */
      __IOM uint32_t PORRSTF    : 1;            /*!< (@ 0x0000001B) POR/PDR reset flag                                         */
      __IOM uint32_t SFTRSTF    : 1;            /*!< (@ 0x0000001C) Software reset flag                                        */
      __IOM uint32_t IWDGRSTF   : 1;            /*!< (@ 0x0000001D) Independent watchdog reset flag                            */
      __IOM uint32_t WWDGRSTF   : 1;            /*!< (@ 0x0000001E) Window watchdog reset flag                                 */
      __IOM uint32_t LPWRRSTF   : 1;            /*!< (@ 0x0000001F) Low-power reset flag                                       */
    } bit;
  } CSR;
} RCC_Type;                                     /*!< Size = 40 (0x28) */



/* =========================================================================================================================== */
/* ================                                            GPIOA                                          ================ */
/* =========================================================================================================================== */


/**
  * @brief General purpose I/O (GPIOA)
  */

typedef struct {                                /*!< (@ 0x40010800) GPIOA Structure                                            */

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Port configuration register low (GPIOn_CRL)                */

    struct {
      __IOM uint32_t MODE0      : 4;            /*!< (@ 0x00000000) Port n.0 mode bits                                         */
      __IOM uint32_t MODE1      : 4;            /*!< (@ 0x00000004) Port n.1 mode bits                                         */
      __IOM uint32_t MODE2      : 4;            /*!< (@ 0x00000008) Port n.2 mode bits                                         */
      __IOM uint32_t MODE3      : 4;            /*!< (@ 0x0000000C) Port n.3 mode bits                                         */
      __IOM uint32_t MODE4      : 4;            /*!< (@ 0x00000010) Port n.4 mode bits                                         */
      __IOM uint32_t MODE5      : 4;            /*!< (@ 0x00000014) Port n.5 mode bits                                         */
      __IOM uint32_t MODE6      : 4;            /*!< (@ 0x00000018) Port n.6 mode bits                                         */
      __IOM uint32_t MODE7      : 4;            /*!< (@ 0x0000001C) Port n.7 mode bits                                         */

    } bit;
  } CRL;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000004) Port configuration register high (GPIOn_CRL)               */

    struct {
      __IOM uint32_t MODE8       : 4;            /*!< (@ 0x00000000) Port n.0 mode bits                                         */
      __IOM uint32_t MODE9       : 4;            /*!< (@ 0x00000004) Port n.1 mode bits                                         */
      __IOM uint32_t MODE10      : 4;            /*!< (@ 0x00000008) Port n.2 mode bits                                         */
      __IOM uint32_t MODE11      : 4;            /*!< (@ 0x0000000C) Port n.3 mode bits                                         */
      __IOM uint32_t MODE12      : 4;            /*!< (@ 0x00000010) Port n.4 mode bits                                         */
      __IOM uint32_t MODE13      : 4;            /*!< (@ 0x00000014) Port n.5 mode bits                                         */
      __IOM uint32_t MODE14      : 4;            /*!< (@ 0x00000018) Port n.6 mode bits                                         */
      __IOM uint32_t MODE15      : 4;            /*!< (@ 0x0000001C) Port n.7 mode bits                                         */
    } bit;
  } CRH;

  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000008) Port input data register (GPIOn_IDR)                       */

    struct {
      __IM  uint32_t IDR0       : 1;            /*!< (@ 0x00000000) Port input data                                            */
      __IM  uint32_t IDR1       : 1;            /*!< (@ 0x00000001) Port input data                                            */
      __IM  uint32_t IDR2       : 1;            /*!< (@ 0x00000002) Port input data                                            */
      __IM  uint32_t IDR3       : 1;            /*!< (@ 0x00000003) Port input data                                            */
      __IM  uint32_t IDR4       : 1;            /*!< (@ 0x00000004) Port input data                                            */
      __IM  uint32_t IDR5       : 1;            /*!< (@ 0x00000005) Port input data                                            */
      __IM  uint32_t IDR6       : 1;            /*!< (@ 0x00000006) Port input data                                            */
      __IM  uint32_t IDR7       : 1;            /*!< (@ 0x00000007) Port input data                                            */
      __IM  uint32_t IDR8       : 1;            /*!< (@ 0x00000008) Port input data                                            */
      __IM  uint32_t IDR9       : 1;            /*!< (@ 0x00000009) Port input data                                            */
      __IM  uint32_t IDR10      : 1;            /*!< (@ 0x0000000A) Port input data                                            */
      __IM  uint32_t IDR11      : 1;            /*!< (@ 0x0000000B) Port input data                                            */
      __IM  uint32_t IDR12      : 1;            /*!< (@ 0x0000000C) Port input data                                            */
      __IM  uint32_t IDR13      : 1;            /*!< (@ 0x0000000D) Port input data                                            */
      __IM  uint32_t IDR14      : 1;            /*!< (@ 0x0000000E) Port input data                                            */
      __IM  uint32_t IDR15      : 1;            /*!< (@ 0x0000000F) Port input data                                            */
    } bit;
  } IDR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000000C) Port output data register (GPIOn_ODR)                      */

    struct {
      __IOM uint32_t ODR0       : 1;            /*!< (@ 0x00000000) Port output data                                           */
      __IOM uint32_t ODR1       : 1;            /*!< (@ 0x00000001) Port output data                                           */
      __IOM uint32_t ODR2       : 1;            /*!< (@ 0x00000002) Port output data                                           */
      __IOM uint32_t ODR3       : 1;            /*!< (@ 0x00000003) Port output data                                           */
      __IOM uint32_t ODR4       : 1;            /*!< (@ 0x00000004) Port output data                                           */
      __IOM uint32_t ODR5       : 1;            /*!< (@ 0x00000005) Port output data                                           */
      __IOM uint32_t ODR6       : 1;            /*!< (@ 0x00000006) Port output data                                           */
      __IOM uint32_t ODR7       : 1;            /*!< (@ 0x00000007) Port output data                                           */
      __IOM uint32_t ODR8       : 1;            /*!< (@ 0x00000008) Port output data                                           */
      __IOM uint32_t ODR9       : 1;            /*!< (@ 0x00000009) Port output data                                           */
      __IOM uint32_t ODR10      : 1;            /*!< (@ 0x0000000A) Port output data                                           */
      __IOM uint32_t ODR11      : 1;            /*!< (@ 0x0000000B) Port output data                                           */
      __IOM uint32_t ODR12      : 1;            /*!< (@ 0x0000000C) Port output data                                           */
      __IOM uint32_t ODR13      : 1;            /*!< (@ 0x0000000D) Port output data                                           */
      __IOM uint32_t ODR14      : 1;            /*!< (@ 0x0000000E) Port output data                                           */
      __IOM uint32_t ODR15      : 1;            /*!< (@ 0x0000000F) Port output data                                           */
    } bit;
  } ODR;

  union {
    __OM  uint32_t reg;                         /*!< (@ 0x00000010) Port bit set/reset register (GPIOn_BSRR)                   */

    struct {
      __OM  uint32_t BS0        : 1;            /*!< (@ 0x00000000) Set bit 0                                                  */
      __OM  uint32_t BS1        : 1;            /*!< (@ 0x00000001) Set bit 1                                                  */
      __OM  uint32_t BS2        : 1;            /*!< (@ 0x00000002) Set bit 1                                                  */
      __OM  uint32_t BS3        : 1;            /*!< (@ 0x00000003) Set bit 3                                                  */
      __OM  uint32_t BS4        : 1;            /*!< (@ 0x00000004) Set bit 4                                                  */
      __OM  uint32_t BS5        : 1;            /*!< (@ 0x00000005) Set bit 5                                                  */
      __OM  uint32_t BS6        : 1;            /*!< (@ 0x00000006) Set bit 6                                                  */
      __OM  uint32_t BS7        : 1;            /*!< (@ 0x00000007) Set bit 7                                                  */
      __OM  uint32_t BS8        : 1;            /*!< (@ 0x00000008) Set bit 8                                                  */
      __OM  uint32_t BS9        : 1;            /*!< (@ 0x00000009) Set bit 9                                                  */
      __OM  uint32_t BS10       : 1;            /*!< (@ 0x0000000A) Set bit 10                                                 */
      __OM  uint32_t BS11       : 1;            /*!< (@ 0x0000000B) Set bit 11                                                 */
      __OM  uint32_t BS12       : 1;            /*!< (@ 0x0000000C) Set bit 12                                                 */
      __OM  uint32_t BS13       : 1;            /*!< (@ 0x0000000D) Set bit 13                                                 */
      __OM  uint32_t BS14       : 1;            /*!< (@ 0x0000000E) Set bit 14                                                 */
      __OM  uint32_t BS15       : 1;            /*!< (@ 0x0000000F) Set bit 15                                                 */
      __OM  uint32_t BR0        : 1;            /*!< (@ 0x00000010) Reset bit 0                                                */
      __OM  uint32_t BR1        : 1;            /*!< (@ 0x00000011) Reset bit 1                                                */
      __OM  uint32_t BR2        : 1;            /*!< (@ 0x00000012) Reset bit 2                                                */
      __OM  uint32_t BR3        : 1;            /*!< (@ 0x00000013) Reset bit 3                                                */
      __OM  uint32_t BR4        : 1;            /*!< (@ 0x00000014) Reset bit 4                                                */
      __OM  uint32_t BR5        : 1;            /*!< (@ 0x00000015) Reset bit 5                                                */
      __OM  uint32_t BR6        : 1;            /*!< (@ 0x00000016) Reset bit 6                                                */
      __OM  uint32_t BR7        : 1;            /*!< (@ 0x00000017) Reset bit 7                                                */
      __OM  uint32_t BR8        : 1;            /*!< (@ 0x00000018) Reset bit 8                                                */
      __OM  uint32_t BR9        : 1;            /*!< (@ 0x00000019) Reset bit 9                                                */
      __OM  uint32_t BR10       : 1;            /*!< (@ 0x0000001A) Reset bit 10                                               */
      __OM  uint32_t BR11       : 1;            /*!< (@ 0x0000001B) Reset bit 11                                               */
      __OM  uint32_t BR12       : 1;            /*!< (@ 0x0000001C) Reset bit 12                                               */
      __OM  uint32_t BR13       : 1;            /*!< (@ 0x0000001D) Reset bit 13                                               */
      __OM  uint32_t BR14       : 1;            /*!< (@ 0x0000001E) Reset bit 14                                               */
      __OM  uint32_t BR15       : 1;            /*!< (@ 0x0000001F) Reset bit 15                                               */
    } bit;
  } BSRR;

  union {
    __OM  uint32_t reg;                         /*!< (@ 0x00000014) Port bit reset register (GPIOn_BRR)                        */

    struct {
      __OM  uint32_t BR0        : 1;            /*!< (@ 0x00000000) Reset bit 0                                                */
      __OM  uint32_t BR1        : 1;            /*!< (@ 0x00000001) Reset bit 1                                                */
      __OM  uint32_t BR2        : 1;            /*!< (@ 0x00000002) Reset bit 1                                                */
      __OM  uint32_t BR3        : 1;            /*!< (@ 0x00000003) Reset bit 3                                                */
      __OM  uint32_t BR4        : 1;            /*!< (@ 0x00000004) Reset bit 4                                                */
      __OM  uint32_t BR5        : 1;            /*!< (@ 0x00000005) Reset bit 5                                                */
      __OM  uint32_t BR6        : 1;            /*!< (@ 0x00000006) Reset bit 6                                                */
      __OM  uint32_t BR7        : 1;            /*!< (@ 0x00000007) Reset bit 7                                                */
      __OM  uint32_t BR8        : 1;            /*!< (@ 0x00000008) Reset bit 8                                                */
      __OM  uint32_t BR9        : 1;            /*!< (@ 0x00000009) Reset bit 9                                                */
      __OM  uint32_t BR10       : 1;            /*!< (@ 0x0000000A) Reset bit 10                                               */
      __OM  uint32_t BR11       : 1;            /*!< (@ 0x0000000B) Reset bit 11                                               */
      __OM  uint32_t BR12       : 1;            /*!< (@ 0x0000000C) Reset bit 12                                               */
      __OM  uint32_t BR13       : 1;            /*!< (@ 0x0000000D) Reset bit 13                                               */
      __OM  uint32_t BR14       : 1;            /*!< (@ 0x0000000E) Reset bit 14                                               */
      __OM  uint32_t BR15       : 1;            /*!< (@ 0x0000000F) Reset bit 15                                               */
    } bit;
  } BRR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000018) Port configuration lock register                           */

    struct {
      __IOM uint32_t LCK0       : 1;            /*!< (@ 0x00000000) Port A Lock bit 0                                          */
      __IOM uint32_t LCK1       : 1;            /*!< (@ 0x00000001) Port A Lock bit 1                                          */
      __IOM uint32_t LCK2       : 1;            /*!< (@ 0x00000002) Port A Lock bit 2                                          */
      __IOM uint32_t LCK3       : 1;            /*!< (@ 0x00000003) Port A Lock bit 3                                          */
      __IOM uint32_t LCK4       : 1;            /*!< (@ 0x00000004) Port A Lock bit 4                                          */
      __IOM uint32_t LCK5       : 1;            /*!< (@ 0x00000005) Port A Lock bit 5                                          */
      __IOM uint32_t LCK6       : 1;            /*!< (@ 0x00000006) Port A Lock bit 6                                          */
      __IOM uint32_t LCK7       : 1;            /*!< (@ 0x00000007) Port A Lock bit 7                                          */
      __IOM uint32_t LCK8       : 1;            /*!< (@ 0x00000008) Port A Lock bit 8                                          */
      __IOM uint32_t LCK9       : 1;            /*!< (@ 0x00000009) Port A Lock bit 9                                          */
      __IOM uint32_t LCK10      : 1;            /*!< (@ 0x0000000A) Port A Lock bit 10                                         */
      __IOM uint32_t LCK11      : 1;            /*!< (@ 0x0000000B) Port A Lock bit 11                                         */
      __IOM uint32_t LCK12      : 1;            /*!< (@ 0x0000000C) Port A Lock bit 12                                         */
      __IOM uint32_t LCK13      : 1;            /*!< (@ 0x0000000D) Port A Lock bit 13                                         */
      __IOM uint32_t LCK14      : 1;            /*!< (@ 0x0000000E) Port A Lock bit 14                                         */
      __IOM uint32_t LCK15      : 1;            /*!< (@ 0x0000000F) Port A Lock bit 15                                         */
      __IOM uint32_t LCKK       : 1;            /*!< (@ 0x00000010) Lock key                                                   */
    } bit;
  } LCKR;
} GPIOA_Type;                                   /*!< Size = 28 (0x1c)                                                          */



/* =========================================================================================================================== */
/* ================                                           AFIO                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Alternate function I/O (AFIO)
  */

typedef struct {                                /*!< (@ 0x40010000) AFIO Structure                                             */

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Event Control Register (AFIO_EVCR)                         */

    struct {
      __IOM uint32_t PIN        : 4;            /*!< (@ 0x00000000) Pin selection                                              */
      __IOM uint32_t PORT       : 3;            /*!< (@ 0x00000004) Port selection                                             */
      __IOM uint32_t EVOE       : 1;            /*!< (@ 0x00000007) Event Output Enable                                        */
    } bit;
  } EVCR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000004) AF remap and debug I/O configuration register
                                                                    (AFIO_MAPR)                                                */

    struct {
      __IOM uint32_t SPI1_REMAP : 1;            /*!< (@ 0x00000000) SPI1 remapping                                             */
      __IOM uint32_t I2C1_REMAP : 1;            /*!< (@ 0x00000001) I2C1 remapping                                             */
      __IOM uint32_t USART1_REMAP : 1;          /*!< (@ 0x00000002) USART1 remapping                                           */
      __IOM uint32_t USART2_REMAP : 1;          /*!< (@ 0x00000003) USART2 remapping                                           */
      __IOM uint32_t USART3_REMAP : 2;          /*!< (@ 0x00000004) USART3 remapping                                           */
      __IOM uint32_t TIM1_REMAP : 2;            /*!< (@ 0x00000006) TIM1 remapping                                             */
      __IOM uint32_t TIM2_REMAP : 2;            /*!< (@ 0x00000008) TIM2 remapping                                             */
      __IOM uint32_t TIM3_REMAP : 2;            /*!< (@ 0x0000000A) TIM3 remapping                                             */
      __IOM uint32_t TIM4_REMAP : 1;            /*!< (@ 0x0000000C) TIM4 remapping                                             */
      __IOM uint32_t CAN_REMAP  : 2;            /*!< (@ 0x0000000D) CAN1 remapping                                             */
      __IOM uint32_t PD01_REMAP : 1;            /*!< (@ 0x0000000F) Port D0/Port D1 mapping on OSCIN/OSCOUT                    */
      __IOM uint32_t TIM5CH4_IREMAP : 1;        /*!< (@ 0x00000010) Set and cleared by software                                */
      __IOM uint32_t ADC1_ETRGINJ_REMAP : 1;    /*!< (@ 0x00000011) ADC 1 External trigger injected conversion remapping       */
      __IOM uint32_t ADC1_ETRGREG_REMAP : 1;    /*!< (@ 0x00000012) ADC 1 external trigger regular conversion remapping        */
      __IOM uint32_t ADC2_ETRGINJ_REMAP : 1;    /*!< (@ 0x00000013) ADC 2 external trigger injected conversion remapping       */
      __IOM uint32_t ADC2_ETRGREG_REMAP : 1;    /*!< (@ 0x00000014) ADC 2 external trigger regular conversion remapping        */
      __IM  uint32_t            : 3;
      __OM  uint32_t SWJ_CFG    : 3;            /*!< (@ 0x00000018) Serial wire JTAG configuration                             */
    } bit;
  } MAPR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000008) External interrupt configuration register 1 (AFIO_EXTICR1) */

    struct {
      __IOM uint32_t EXTI0      : 4;            /*!< (@ 0x00000000) EXTI0 configuration                                        */
      __IOM uint32_t EXTI1      : 4;            /*!< (@ 0x00000004) EXTI1 configuration                                        */
      __IOM uint32_t EXTI2      : 4;            /*!< (@ 0x00000008) EXTI2 configuration                                        */
      __IOM uint32_t EXTI3      : 4;            /*!< (@ 0x0000000C) EXTI3 configuration                                        */
    } bit;
  } EXTICR1;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000000C) External interrupt configuration register 2 (AFIO_EXTICR2) */

    struct {
      __IOM uint32_t EXTI4      : 4;            /*!< (@ 0x00000000) EXTI4 configuration                                        */
      __IOM uint32_t EXTI5      : 4;            /*!< (@ 0x00000004) EXTI5 configuration                                        */
      __IOM uint32_t EXTI6      : 4;            /*!< (@ 0x00000008) EXTI6 configuration                                        */
      __IOM uint32_t EXTI7      : 4;            /*!< (@ 0x0000000C) EXTI7 configuration                                        */
    } bit;
  } EXTICR2;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) External interrupt configuration register 3 (AFIO_EXTICR3) */

    struct {
      __IOM uint32_t EXTI8      : 4;            /*!< (@ 0x00000000) EXTI8 configuration                                        */
      __IOM uint32_t EXTI9      : 4;            /*!< (@ 0x00000004) EXTI9 configuration                                        */
      __IOM uint32_t EXTI10     : 4;            /*!< (@ 0x00000008) EXTI10 configuration                                       */
      __IOM uint32_t EXTI11     : 4;            /*!< (@ 0x0000000C) EXTI11 configuration                                       */
    } bit;
  } EXTICR3;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000014) External interrupt configuration register 4 (AFIO_EXTICR4) */

    struct {
      __IOM uint32_t EXTI12     : 4;            /*!< (@ 0x00000000) EXTI12 configuration                                       */
      __IOM uint32_t EXTI13     : 4;            /*!< (@ 0x00000004) EXTI13 configuration                                       */
      __IOM uint32_t EXTI14     : 4;            /*!< (@ 0x00000008) EXTI14 configuration                                       */
      __IOM uint32_t EXTI15     : 4;            /*!< (@ 0x0000000C) EXTI15 configuration                                       */
    } bit;
  } EXTICR4;
  __IM  uint32_t  RESERVED;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000001C) AF remap and debug I/O configuration register              */

    struct {
      __IM  uint32_t            : 5;
      __IOM uint32_t TIM9_REMAP : 1;            /*!< (@ 0x00000005) TIM9 remapping                                             */
      __IOM uint32_t TIM10_REMAP : 1;           /*!< (@ 0x00000006) TIM10 remapping                                            */
      __IOM uint32_t TIM11_REMAP : 1;           /*!< (@ 0x00000007) TIM11 remapping                                            */
      __IOM uint32_t TIM13_REMAP : 1;           /*!< (@ 0x00000008) TIM13 remapping                                            */
      __IOM uint32_t TIM14_REMAP : 1;           /*!< (@ 0x00000009) TIM14 remapping                                            */
      __IOM uint32_t FSMC_NADV  : 1;            /*!< (@ 0x0000000A) NADV connect/disconnect                                    */
    } bit;
  } MAPR2;
} AFIO_Type;                                    /*!< Size = 32 (0x20)                                                          */



/* =========================================================================================================================== */
/* ================                                           EXTI                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief EXTI (EXTI)
  */

typedef struct {                                /*!< (@ 0x40010400) EXTI Structure                                             */

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Interrupt mask register (EXTI_IMR)                         */

    struct {
      __IOM uint32_t MR0        : 1;            /*!< (@ 0x00000000) Interrupt Mask on line 0                                   */
      __IOM uint32_t MR1        : 1;            /*!< (@ 0x00000001) Interrupt Mask on line 1                                   */
      __IOM uint32_t MR2        : 1;            /*!< (@ 0x00000002) Interrupt Mask on line 2                                   */
      __IOM uint32_t MR3        : 1;            /*!< (@ 0x00000003) Interrupt Mask on line 3                                   */
      __IOM uint32_t MR4        : 1;            /*!< (@ 0x00000004) Interrupt Mask on line 4                                   */
      __IOM uint32_t MR5        : 1;            /*!< (@ 0x00000005) Interrupt Mask on line 5                                   */
      __IOM uint32_t MR6        : 1;            /*!< (@ 0x00000006) Interrupt Mask on line 6                                   */
      __IOM uint32_t MR7        : 1;            /*!< (@ 0x00000007) Interrupt Mask on line 7                                   */
      __IOM uint32_t MR8        : 1;            /*!< (@ 0x00000008) Interrupt Mask on line 8                                   */
      __IOM uint32_t MR9        : 1;            /*!< (@ 0x00000009) Interrupt Mask on line 9                                   */
      __IOM uint32_t MR10       : 1;            /*!< (@ 0x0000000A) Interrupt Mask on line 10                                  */
      __IOM uint32_t MR11       : 1;            /*!< (@ 0x0000000B) Interrupt Mask on line 11                                  */
      __IOM uint32_t MR12       : 1;            /*!< (@ 0x0000000C) Interrupt Mask on line 12                                  */
      __IOM uint32_t MR13       : 1;            /*!< (@ 0x0000000D) Interrupt Mask on line 13                                  */
      __IOM uint32_t MR14       : 1;            /*!< (@ 0x0000000E) Interrupt Mask on line 14                                  */
      __IOM uint32_t MR15       : 1;            /*!< (@ 0x0000000F) Interrupt Mask on line 15                                  */
      __IOM uint32_t MR16       : 1;            /*!< (@ 0x00000010) Interrupt Mask on line 16                                  */
      __IOM uint32_t MR17       : 1;            /*!< (@ 0x00000011) Interrupt Mask on line 17                                  */
      __IOM uint32_t MR18       : 1;            /*!< (@ 0x00000012) Interrupt Mask on line 18                                  */
    } bit;
  } IMR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000004) Event mask register (EXTI_EMR)                             */

    struct {
      __IOM uint32_t MR0        : 1;            /*!< (@ 0x00000000) Event Mask on line 0                                       */
      __IOM uint32_t MR1        : 1;            /*!< (@ 0x00000001) Event Mask on line 1                                       */
      __IOM uint32_t MR2        : 1;            /*!< (@ 0x00000002) Event Mask on line 2                                       */
      __IOM uint32_t MR3        : 1;            /*!< (@ 0x00000003) Event Mask on line 3                                       */
      __IOM uint32_t MR4        : 1;            /*!< (@ 0x00000004) Event Mask on line 4                                       */
      __IOM uint32_t MR5        : 1;            /*!< (@ 0x00000005) Event Mask on line 5                                       */
      __IOM uint32_t MR6        : 1;            /*!< (@ 0x00000006) Event Mask on line 6                                       */
      __IOM uint32_t MR7        : 1;            /*!< (@ 0x00000007) Event Mask on line 7                                       */
      __IOM uint32_t MR8        : 1;            /*!< (@ 0x00000008) Event Mask on line 8                                       */
      __IOM uint32_t MR9        : 1;            /*!< (@ 0x00000009) Event Mask on line 9                                       */
      __IOM uint32_t MR10       : 1;            /*!< (@ 0x0000000A) Event Mask on line 10                                      */
      __IOM uint32_t MR11       : 1;            /*!< (@ 0x0000000B) Event Mask on line 11                                      */
      __IOM uint32_t MR12       : 1;            /*!< (@ 0x0000000C) Event Mask on line 12                                      */
      __IOM uint32_t MR13       : 1;            /*!< (@ 0x0000000D) Event Mask on line 13                                      */
      __IOM uint32_t MR14       : 1;            /*!< (@ 0x0000000E) Event Mask on line 14                                      */
      __IOM uint32_t MR15       : 1;            /*!< (@ 0x0000000F) Event Mask on line 15                                      */
      __IOM uint32_t MR16       : 1;            /*!< (@ 0x00000010) Event Mask on line 16                                      */
      __IOM uint32_t MR17       : 1;            /*!< (@ 0x00000011) Event Mask on line 17                                      */
      __IOM uint32_t MR18       : 1;            /*!< (@ 0x00000012) Event Mask on line 18                                      */
    } bit;
  } EMR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000008) Rising Trigger selection register (EXTI_RTSR)              */

    struct {
      __IOM uint32_t TR0        : 1;            /*!< (@ 0x00000000) Rising trigger event configuration of line 0               */
      __IOM uint32_t TR1        : 1;            /*!< (@ 0x00000001) Rising trigger event configuration of line 1               */
      __IOM uint32_t TR2        : 1;            /*!< (@ 0x00000002) Rising trigger event configuration of line 2               */
      __IOM uint32_t TR3        : 1;            /*!< (@ 0x00000003) Rising trigger event configuration of line 3               */
      __IOM uint32_t TR4        : 1;            /*!< (@ 0x00000004) Rising trigger event configuration of line 4               */
      __IOM uint32_t TR5        : 1;            /*!< (@ 0x00000005) Rising trigger event configuration of line 5               */
      __IOM uint32_t TR6        : 1;            /*!< (@ 0x00000006) Rising trigger event configuration of line 6               */
      __IOM uint32_t TR7        : 1;            /*!< (@ 0x00000007) Rising trigger event configuration of line 7               */
      __IOM uint32_t TR8        : 1;            /*!< (@ 0x00000008) Rising trigger event configuration of line 8               */
      __IOM uint32_t TR9        : 1;            /*!< (@ 0x00000009) Rising trigger event configuration of line 9               */
      __IOM uint32_t TR10       : 1;            /*!< (@ 0x0000000A) Rising trigger event configuration of line 10              */
      __IOM uint32_t TR11       : 1;            /*!< (@ 0x0000000B) Rising trigger event configuration of line 11              */
      __IOM uint32_t TR12       : 1;            /*!< (@ 0x0000000C) Rising trigger event configuration of line 12              */
      __IOM uint32_t TR13       : 1;            /*!< (@ 0x0000000D) Rising trigger event configuration of line 13              */
      __IOM uint32_t TR14       : 1;            /*!< (@ 0x0000000E) Rising trigger event configuration of line 14              */
      __IOM uint32_t TR15       : 1;            /*!< (@ 0x0000000F) Rising trigger event configuration of line 15              */
      __IOM uint32_t TR16       : 1;            /*!< (@ 0x00000010) Rising trigger event configuration of line 16              */
      __IOM uint32_t TR17       : 1;            /*!< (@ 0x00000011) Rising trigger event configuration of line 17              */
      __IOM uint32_t TR18       : 1;            /*!< (@ 0x00000012) Rising trigger event configuration of line 18              */
    } bit;
  } RTSR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000000C) Falling Trigger selection register (EXTI_FTSR)             */

    struct {
      __IOM uint32_t TR0        : 1;            /*!< (@ 0x00000000) Falling trigger event configuration of line 0              */
      __IOM uint32_t TR1        : 1;            /*!< (@ 0x00000001) Falling trigger event configuration of line 1              */
      __IOM uint32_t TR2        : 1;            /*!< (@ 0x00000002) Falling trigger event configuration of line 2              */
      __IOM uint32_t TR3        : 1;            /*!< (@ 0x00000003) Falling trigger event configuration of line 3              */
      __IOM uint32_t TR4        : 1;            /*!< (@ 0x00000004) Falling trigger event configuration of line 4              */
      __IOM uint32_t TR5        : 1;            /*!< (@ 0x00000005) Falling trigger event configuration of line 5              */
      __IOM uint32_t TR6        : 1;            /*!< (@ 0x00000006) Falling trigger event configuration of line 6              */
      __IOM uint32_t TR7        : 1;            /*!< (@ 0x00000007) Falling trigger event configuration of line 7              */
      __IOM uint32_t TR8        : 1;            /*!< (@ 0x00000008) Falling trigger event configuration of line 8              */
      __IOM uint32_t TR9        : 1;            /*!< (@ 0x00000009) Falling trigger event configuration of line 9              */
      __IOM uint32_t TR10       : 1;            /*!< (@ 0x0000000A) Falling trigger event configuration of line 10             */
      __IOM uint32_t TR11       : 1;            /*!< (@ 0x0000000B) Falling trigger event configuration of line 11             */
      __IOM uint32_t TR12       : 1;            /*!< (@ 0x0000000C) Falling trigger event configuration of line 12             */
      __IOM uint32_t TR13       : 1;            /*!< (@ 0x0000000D) Falling trigger event configuration of line 13             */
      __IOM uint32_t TR14       : 1;            /*!< (@ 0x0000000E) Falling trigger event configuration of line 14             */
      __IOM uint32_t TR15       : 1;            /*!< (@ 0x0000000F) Falling trigger event configuration of line 15             */
      __IOM uint32_t TR16       : 1;            /*!< (@ 0x00000010) Falling trigger event configuration of line 16             */
      __IOM uint32_t TR17       : 1;            /*!< (@ 0x00000011) Falling trigger event configuration of line 17             */
      __IOM uint32_t TR18       : 1;            /*!< (@ 0x00000012) Falling trigger event configuration of line 18             */
    } bit;
  } FTSR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) Software interrupt event register (EXTI_SWIER)             */

    struct {
      __IOM uint32_t SWIER0     : 1;            /*!< (@ 0x00000000) Software Interrupt on line 0                               */
      __IOM uint32_t SWIER1     : 1;            /*!< (@ 0x00000001) Software Interrupt on line 1                               */
      __IOM uint32_t SWIER2     : 1;            /*!< (@ 0x00000002) Software Interrupt on line 2                               */
      __IOM uint32_t SWIER3     : 1;            /*!< (@ 0x00000003) Software Interrupt on line 3                               */
      __IOM uint32_t SWIER4     : 1;            /*!< (@ 0x00000004) Software Interrupt on line 4                               */
      __IOM uint32_t SWIER5     : 1;            /*!< (@ 0x00000005) Software Interrupt on line 5                               */
      __IOM uint32_t SWIER6     : 1;            /*!< (@ 0x00000006) Software Interrupt on line 6                               */
      __IOM uint32_t SWIER7     : 1;            /*!< (@ 0x00000007) Software Interrupt on line 7                               */
      __IOM uint32_t SWIER8     : 1;            /*!< (@ 0x00000008) Software Interrupt on line 8                               */
      __IOM uint32_t SWIER9     : 1;            /*!< (@ 0x00000009) Software Interrupt on line 9                               */
      __IOM uint32_t SWIER10    : 1;            /*!< (@ 0x0000000A) Software Interrupt on line 10                              */
      __IOM uint32_t SWIER11    : 1;            /*!< (@ 0x0000000B) Software Interrupt on line 11                              */
      __IOM uint32_t SWIER12    : 1;            /*!< (@ 0x0000000C) Software Interrupt on line 12                              */
      __IOM uint32_t SWIER13    : 1;            /*!< (@ 0x0000000D) Software Interrupt on line 13                              */
      __IOM uint32_t SWIER14    : 1;            /*!< (@ 0x0000000E) Software Interrupt on line 14                              */
      __IOM uint32_t SWIER15    : 1;            /*!< (@ 0x0000000F) Software Interrupt on line 15                              */
      __IOM uint32_t SWIER16    : 1;            /*!< (@ 0x00000010) Software Interrupt on line 16                              */
      __IOM uint32_t SWIER17    : 1;            /*!< (@ 0x00000011) Software Interrupt on line 17                              */
      __IOM uint32_t SWIER18    : 1;            /*!< (@ 0x00000012) Software Interrupt on line 18                              */
    } bit;
  } SWIER;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000014) Pending register (EXTI_PR)                                 */

    struct {
      __IOM uint32_t PR0        : 1;            /*!< (@ 0x00000000) Pending bit 0                                              */
      __IOM uint32_t PR1        : 1;            /*!< (@ 0x00000001) Pending bit 1                                              */
      __IOM uint32_t PR2        : 1;            /*!< (@ 0x00000002) Pending bit 2                                              */
      __IOM uint32_t PR3        : 1;            /*!< (@ 0x00000003) Pending bit 3                                              */
      __IOM uint32_t PR4        : 1;            /*!< (@ 0x00000004) Pending bit 4                                              */
      __IOM uint32_t PR5        : 1;            /*!< (@ 0x00000005) Pending bit 5                                              */
      __IOM uint32_t PR6        : 1;            /*!< (@ 0x00000006) Pending bit 6                                              */
      __IOM uint32_t PR7        : 1;            /*!< (@ 0x00000007) Pending bit 7                                              */
      __IOM uint32_t PR8        : 1;            /*!< (@ 0x00000008) Pending bit 8                                              */
      __IOM uint32_t PR9        : 1;            /*!< (@ 0x00000009) Pending bit 9                                              */
      __IOM uint32_t PR10       : 1;            /*!< (@ 0x0000000A) Pending bit 10                                             */
      __IOM uint32_t PR11       : 1;            /*!< (@ 0x0000000B) Pending bit 11                                             */
      __IOM uint32_t PR12       : 1;            /*!< (@ 0x0000000C) Pending bit 12                                             */
      __IOM uint32_t PR13       : 1;            /*!< (@ 0x0000000D) Pending bit 13                                             */
      __IOM uint32_t PR14       : 1;            /*!< (@ 0x0000000E) Pending bit 14                                             */
      __IOM uint32_t PR15       : 1;            /*!< (@ 0x0000000F) Pending bit 15                                             */
      __IOM uint32_t PR16       : 1;            /*!< (@ 0x00000010) Pending bit 16                                             */
      __IOM uint32_t PR17       : 1;            /*!< (@ 0x00000011) Pending bit 17                                             */
      __IOM uint32_t PR18       : 1;            /*!< (@ 0x00000012) Pending bit 18                                             */
    } bit;
  } PR;
} EXTI_Type;                                    /*!< Size = 24 (0x18)                                                          */




/* =========================================================================================================================== */
/* ================                                           DMA1                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief DMA controller (DMA1)
  */

typedef struct {                                /*!< (@ 0x40020000) DMA1 Structure                                             */

  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000000) DMA interrupt status register (DMA_ISR)                    */

    struct {
      __IM  uint32_t GIF1       : 1;            /*!< (@ 0x00000000) Channel 1 Global interrupt flag                            */
      __IM  uint32_t TCIF1      : 1;            /*!< (@ 0x00000001) Channel 1 Transfer Complete flag                           */
      __IM  uint32_t HTIF1      : 1;            /*!< (@ 0x00000002) Channel 1 Half Transfer Complete flag                      */
      __IM  uint32_t TEIF1      : 1;            /*!< (@ 0x00000003) Channel 1 Transfer Error flag                              */
      __IM  uint32_t GIF2       : 1;            /*!< (@ 0x00000004) Channel 2 Global interrupt flag                            */
      __IM  uint32_t TCIF2      : 1;            /*!< (@ 0x00000005) Channel 2 Transfer Complete flag                           */
      __IM  uint32_t HTIF2      : 1;            /*!< (@ 0x00000006) Channel 2 Half Transfer Complete flag                      */
      __IM  uint32_t TEIF2      : 1;            /*!< (@ 0x00000007) Channel 2 Transfer Error flag                              */
      __IM  uint32_t GIF3       : 1;            /*!< (@ 0x00000008) Channel 3 Global interrupt flag                            */
      __IM  uint32_t TCIF3      : 1;            /*!< (@ 0x00000009) Channel 3 Transfer Complete flag                           */
      __IM  uint32_t HTIF3      : 1;            /*!< (@ 0x0000000A) Channel 3 Half Transfer Complete flag                      */
      __IM  uint32_t TEIF3      : 1;            /*!< (@ 0x0000000B) Channel 3 Transfer Error flag                              */
      __IM  uint32_t GIF4       : 1;            /*!< (@ 0x0000000C) Channel 4 Global interrupt flag                            */
      __IM  uint32_t TCIF4      : 1;            /*!< (@ 0x0000000D) Channel 4 Transfer Complete flag                           */
      __IM  uint32_t HTIF4      : 1;            /*!< (@ 0x0000000E) Channel 4 Half Transfer Complete flag                      */
      __IM  uint32_t TEIF4      : 1;            /*!< (@ 0x0000000F) Channel 4 Transfer Error flag                              */
      __IM  uint32_t GIF5       : 1;            /*!< (@ 0x00000010) Channel 5 Global interrupt flag                            */
      __IM  uint32_t TCIF5      : 1;            /*!< (@ 0x00000011) Channel 5 Transfer Complete flag                           */
      __IM  uint32_t HTIF5      : 1;            /*!< (@ 0x00000012) Channel 5 Half Transfer Complete flag                      */
      __IM  uint32_t TEIF5      : 1;            /*!< (@ 0x00000013) Channel 5 Transfer Error flag                              */
      __IM  uint32_t GIF6       : 1;            /*!< (@ 0x00000014) Channel 6 Global interrupt flag                            */
      __IM  uint32_t TCIF6      : 1;            /*!< (@ 0x00000015) Channel 6 Transfer Complete flag                           */
      __IM  uint32_t HTIF6      : 1;            /*!< (@ 0x00000016) Channel 6 Half Transfer Complete flag                      */
      __IM  uint32_t TEIF6      : 1;            /*!< (@ 0x00000017) Channel 6 Transfer Error flag                              */
      __IM  uint32_t GIF7       : 1;            /*!< (@ 0x00000018) Channel 7 Global interrupt flag                            */
      __IM  uint32_t TCIF7      : 1;            /*!< (@ 0x00000019) Channel 7 Transfer Complete flag                           */
      __IM  uint32_t HTIF7      : 1;            /*!< (@ 0x0000001A) Channel 7 Half Transfer Complete flag                      */
      __IM  uint32_t TEIF7      : 1;            /*!< (@ 0x0000001B) Channel 7 Transfer Error flag                              */
    } bit;
  } ISR;

  union {
    __OM  uint32_t reg;                         /*!< (@ 0x00000004) DMA interrupt flag clear register (DMA_IFCR)               */

    struct {
      __OM  uint32_t CGIF1      : 1;            /*!< (@ 0x00000000) Channel 1 Global interrupt clear                           */
      __OM  uint32_t CTCIF1     : 1;            /*!< (@ 0x00000001) Channel 1 Transfer Complete clear                          */
      __OM  uint32_t CHTIF1     : 1;            /*!< (@ 0x00000002) Channel 1 Half Transfer clear                              */
      __OM  uint32_t CTEIF1     : 1;            /*!< (@ 0x00000003) Channel 1 Transfer Error clear                             */
      __OM  uint32_t CGIF2      : 1;            /*!< (@ 0x00000004) Channel 2 Global interrupt clear                           */
      __OM  uint32_t CTCIF2     : 1;            /*!< (@ 0x00000005) Channel 2 Transfer Complete clear                          */
      __OM  uint32_t CHTIF2     : 1;            /*!< (@ 0x00000006) Channel 2 Half Transfer clear                              */
      __OM  uint32_t CTEIF2     : 1;            /*!< (@ 0x00000007) Channel 2 Transfer Error clear                             */
      __OM  uint32_t CGIF3      : 1;            /*!< (@ 0x00000008) Channel 3 Global interrupt clear                           */
      __OM  uint32_t CTCIF3     : 1;            /*!< (@ 0x00000009) Channel 3 Transfer Complete clear                          */
      __OM  uint32_t CHTIF3     : 1;            /*!< (@ 0x0000000A) Channel 3 Half Transfer clear                              */
      __OM  uint32_t CTEIF3     : 1;            /*!< (@ 0x0000000B) Channel 3 Transfer Error clear                             */
      __OM  uint32_t CGIF4      : 1;            /*!< (@ 0x0000000C) Channel 4 Global interrupt clear                           */
      __OM  uint32_t CTCIF4     : 1;            /*!< (@ 0x0000000D) Channel 4 Transfer Complete clear                          */
      __OM  uint32_t CHTIF4     : 1;            /*!< (@ 0x0000000E) Channel 4 Half Transfer clear                              */
      __OM  uint32_t CTEIF4     : 1;            /*!< (@ 0x0000000F) Channel 4 Transfer Error clear                             */
      __OM  uint32_t CGIF5      : 1;            /*!< (@ 0x00000010) Channel 5 Global interrupt clear                           */
      __OM  uint32_t CTCIF5     : 1;            /*!< (@ 0x00000011) Channel 5 Transfer Complete clear                          */
      __OM  uint32_t CHTIF5     : 1;            /*!< (@ 0x00000012) Channel 5 Half Transfer clear                              */
      __OM  uint32_t CTEIF5     : 1;            /*!< (@ 0x00000013) Channel 5 Transfer Error clear                             */
      __OM  uint32_t CGIF6      : 1;            /*!< (@ 0x00000014) Channel 6 Global interrupt clear                           */
      __OM  uint32_t CTCIF6     : 1;            /*!< (@ 0x00000015) Channel 6 Transfer Complete clear                          */
      __OM  uint32_t CHTIF6     : 1;            /*!< (@ 0x00000016) Channel 6 Half Transfer clear                              */
      __OM  uint32_t CTEIF6     : 1;            /*!< (@ 0x00000017) Channel 6 Transfer Error clear                             */
      __OM  uint32_t CGIF7      : 1;            /*!< (@ 0x00000018) Channel 7 Global interrupt clear                           */
      __OM  uint32_t CTCIF7     : 1;            /*!< (@ 0x00000019) Channel 7 Transfer Complete clear                          */
      __OM  uint32_t CHTIF7     : 1;            /*!< (@ 0x0000001A) Channel 7 Half Transfer clear                              */
      __OM  uint32_t CTEIF7     : 1;            /*!< (@ 0x0000001B) Channel 7 Transfer Error clear                             */
    } bit;
  } IFCR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000008) DMA channel configuration register (DMA_CCR)               */

    struct {
      __IOM uint32_t EN         : 1;            /*!< (@ 0x00000000) Channel enable                                             */
      __IOM uint32_t TCIE       : 1;            /*!< (@ 0x00000001) Transfer complete interrupt enable                         */
      __IOM uint32_t HTIE       : 1;            /*!< (@ 0x00000002) Half Transfer interrupt enable                             */
      __IOM uint32_t TEIE       : 1;            /*!< (@ 0x00000003) Transfer error interrupt enable                            */
      __IOM uint32_t DIR        : 1;            /*!< (@ 0x00000004) Data transfer direction                                    */
      __IOM uint32_t CIRC       : 1;            /*!< (@ 0x00000005) Circular mode                                              */
      __IOM uint32_t PINC       : 1;            /*!< (@ 0x00000006) Peripheral increment mode                                  */
      __IOM uint32_t MINC       : 1;            /*!< (@ 0x00000007) Memory increment mode                                      */
      __IOM uint32_t PSIZE      : 2;            /*!< (@ 0x00000008) Peripheral size                                            */
      __IOM uint32_t MSIZE      : 2;            /*!< (@ 0x0000000A) Memory size                                                */
      __IOM uint32_t PL         : 2;            /*!< (@ 0x0000000C) Channel Priority level                                     */
      __IOM uint32_t MEM2MEM    : 1;            /*!< (@ 0x0000000E) Memory to memory mode                                      */
      uint32_t                  : 17;
    } bit;
  } CCR1;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000000C) DMA channel 1 number of data register                      */

    struct {
      __IOM uint32_t NDT        : 16;           /*!< (@ 0x00000000) Number of data to transfer                                 */
    } bit;
  } CNDTR1;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) DMA channel 1 peripheral address register                  */

    struct {
      __IOM uint32_t PA         : 32;           /*!< (@ 0x00000000) Peripheral address                                         */
    } bit;
  } CPAR1;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000014) DMA channel 1 memory address register                      */

    struct {
      __IOM uint32_t MA         : 32;           /*!< (@ 0x00000000) Memory address                                             */
    } bit;
  } CMAR1;
  __IM  uint32_t  RESERVED;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000001C) DMA channel configuration register (DMA_CCR)               */

    struct {
      __IOM uint32_t EN         : 1;            /*!< (@ 0x00000000) Channel enable                                             */
      __IOM uint32_t TCIE       : 1;            /*!< (@ 0x00000001) Transfer complete interrupt enable                         */
      __IOM uint32_t HTIE       : 1;            /*!< (@ 0x00000002) Half Transfer interrupt enable                             */
      __IOM uint32_t TEIE       : 1;            /*!< (@ 0x00000003) Transfer error interrupt enable                            */
      __IOM uint32_t DIR        : 1;            /*!< (@ 0x00000004) Data transfer direction                                    */
      __IOM uint32_t CIRC       : 1;            /*!< (@ 0x00000005) Circular mode                                              */
      __IOM uint32_t PINC       : 1;            /*!< (@ 0x00000006) Peripheral increment mode                                  */
      __IOM uint32_t MINC       : 1;            /*!< (@ 0x00000007) Memory increment mode                                      */
      __IOM uint32_t PSIZE      : 2;            /*!< (@ 0x00000008) Peripheral size                                            */
      __IOM uint32_t MSIZE      : 2;            /*!< (@ 0x0000000A) Memory size                                                */
      __IOM uint32_t PL         : 2;            /*!< (@ 0x0000000C) Channel Priority level                                     */
      __IOM uint32_t MEM2MEM    : 1;            /*!< (@ 0x0000000E) Memory to memory mode                                      */
      uint32_t                  : 17;
    } bit;
  } CCR2;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) DMA channel 2 number of data register                      */

    struct {
      __IOM uint32_t NDT        : 16;           /*!< (@ 0x00000000) Number of data to transfer                                 */
    } bit;
  } CNDTR2;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000024) DMA channel 2 peripheral address register                  */

    struct {
      __IOM uint32_t PA         : 32;           /*!< (@ 0x00000000) Peripheral address                                         */
    } bit;
  } CPAR2;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000028) DMA channel 2 memory address register                      */

    struct {
      __IOM uint32_t MA         : 32;           /*!< (@ 0x00000000) Memory address                                             */
    } bit;
  } CMAR2;
  __IM  uint32_t  RESERVED1;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000030) DMA channel configuration register (DMA_CCR)               */

    struct {
      __IOM uint32_t EN         : 1;            /*!< (@ 0x00000000) Channel enable                                             */
      __IOM uint32_t TCIE       : 1;            /*!< (@ 0x00000001) Transfer complete interrupt enable                         */
      __IOM uint32_t HTIE       : 1;            /*!< (@ 0x00000002) Half Transfer interrupt enable                             */
      __IOM uint32_t TEIE       : 1;            /*!< (@ 0x00000003) Transfer error interrupt enable                            */
      __IOM uint32_t DIR        : 1;            /*!< (@ 0x00000004) Data transfer direction                                    */
      __IOM uint32_t CIRC       : 1;            /*!< (@ 0x00000005) Circular mode                                              */
      __IOM uint32_t PINC       : 1;            /*!< (@ 0x00000006) Peripheral increment mode                                  */
      __IOM uint32_t MINC       : 1;            /*!< (@ 0x00000007) Memory increment mode                                      */
      __IOM uint32_t PSIZE      : 2;            /*!< (@ 0x00000008) Peripheral size                                            */
      __IOM uint32_t MSIZE      : 2;            /*!< (@ 0x0000000A) Memory size                                                */
      __IOM uint32_t PL         : 2;            /*!< (@ 0x0000000C) Channel Priority level                                     */
      __IOM uint32_t MEM2MEM    : 1;            /*!< (@ 0x0000000E) Memory to memory mode                                      */
      uint32_t                  : 17;
    } bit;
  } CCR3;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000034) DMA channel 3 number of data register                      */

    struct {
      __IOM uint32_t NDT        : 16;           /*!< (@ 0x00000000) Number of data to transfer                                 */
    } bit;
  } CNDTR3;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000038) DMA channel 3 peripheral address register                  */

    struct {
      __IOM uint32_t PA         : 32;           /*!< (@ 0x00000000) Peripheral address                                         */
    } bit;
  } CPAR3;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000003C) DMA channel 3 memory address register                      */

    struct {
      __IOM uint32_t MA         : 32;           /*!< (@ 0x00000000) Memory address                                             */
    } bit;
  } CMAR3;
  __IM  uint32_t  RESERVED2;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000044) DMA channel configuration register (DMA_CCR)               */

    struct {
      __IOM uint32_t EN         : 1;            /*!< (@ 0x00000000) Channel enable                                             */
      __IOM uint32_t TCIE       : 1;            /*!< (@ 0x00000001) Transfer complete interrupt enable                         */
      __IOM uint32_t HTIE       : 1;            /*!< (@ 0x00000002) Half Transfer interrupt enable                             */
      __IOM uint32_t TEIE       : 1;            /*!< (@ 0x00000003) Transfer error interrupt enable                            */
      __IOM uint32_t DIR        : 1;            /*!< (@ 0x00000004) Data transfer direction                                    */
      __IOM uint32_t CIRC       : 1;            /*!< (@ 0x00000005) Circular mode                                              */
      __IOM uint32_t PINC       : 1;            /*!< (@ 0x00000006) Peripheral increment mode                                  */
      __IOM uint32_t MINC       : 1;            /*!< (@ 0x00000007) Memory increment mode                                      */
      __IOM uint32_t PSIZE      : 2;            /*!< (@ 0x00000008) Peripheral size                                            */
      __IOM uint32_t MSIZE      : 2;            /*!< (@ 0x0000000A) Memory size                                                */
      __IOM uint32_t PL         : 2;            /*!< (@ 0x0000000C) Channel Priority level                                     */
      __IOM uint32_t MEM2MEM    : 1;            /*!< (@ 0x0000000E) Memory to memory mode                                      */
      uint32_t                  : 17;
    } bit;
  } CCR4;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000048) DMA channel 4 number of data register                      */

    struct {
      __IOM uint32_t NDT        : 16;           /*!< (@ 0x00000000) Number of data to transfer                                 */
    } bit;
  } CNDTR4;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000004C) DMA channel 4 peripheral address register                  */

    struct {
      __IOM uint32_t PA         : 32;           /*!< (@ 0x00000000) Peripheral address                                         */
    } bit;
  } CPAR4;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000050) DMA channel 4 memory address register                      */

    struct {
      __IOM uint32_t MA         : 32;           /*!< (@ 0x00000000) Memory address                                             */
    } bit;
  } CMAR4;
  __IM  uint32_t  RESERVED3;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000058) DMA channel configuration register (DMA_CCR)               */

    struct {
      __IOM uint32_t EN         : 1;            /*!< (@ 0x00000000) Channel enable                                             */
      __IOM uint32_t TCIE       : 1;            /*!< (@ 0x00000001) Transfer complete interrupt enable                         */
      __IOM uint32_t HTIE       : 1;            /*!< (@ 0x00000002) Half Transfer interrupt enable                             */
      __IOM uint32_t TEIE       : 1;            /*!< (@ 0x00000003) Transfer error interrupt enable                            */
      __IOM uint32_t DIR        : 1;            /*!< (@ 0x00000004) Data transfer direction                                    */
      __IOM uint32_t CIRC       : 1;            /*!< (@ 0x00000005) Circular mode                                              */
      __IOM uint32_t PINC       : 1;            /*!< (@ 0x00000006) Peripheral increment mode                                  */
      __IOM uint32_t MINC       : 1;            /*!< (@ 0x00000007) Memory increment mode                                      */
      __IOM uint32_t PSIZE      : 2;            /*!< (@ 0x00000008) Peripheral size                                            */
      __IOM uint32_t MSIZE      : 2;            /*!< (@ 0x0000000A) Memory size                                                */
      __IOM uint32_t PL         : 2;            /*!< (@ 0x0000000C) Channel Priority level                                     */
      __IOM uint32_t MEM2MEM    : 1;            /*!< (@ 0x0000000E) Memory to memory mode                                      */
      uint32_t                  : 17;
    } bit;
  } CCR5;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000005C) DMA channel 5 number of data register                      */

    struct {
      __IOM uint32_t NDT        : 16;           /*!< (@ 0x00000000) Number of data to transfer                                 */
    } bit;
  } CNDTR5;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000060) DMA channel 5 peripheral address register                  */

    struct {
      __IOM uint32_t PA         : 32;           /*!< (@ 0x00000000) Peripheral address                                         */
    } bit;
  } CPAR5;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000064) DMA channel 5 memory address register                      */

    struct {
      __IOM uint32_t MA         : 32;           /*!< (@ 0x00000000) Memory address                                             */
    } bit;
  } CMAR5;
  __IM  uint32_t  RESERVED4;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000006C) DMA channel configuration register (DMA_CCR)               */

    struct {
      __IOM uint32_t EN         : 1;            /*!< (@ 0x00000000) Channel enable                                             */
      __IOM uint32_t TCIE       : 1;            /*!< (@ 0x00000001) Transfer complete interrupt enable                         */
      __IOM uint32_t HTIE       : 1;            /*!< (@ 0x00000002) Half Transfer interrupt enable                             */
      __IOM uint32_t TEIE       : 1;            /*!< (@ 0x00000003) Transfer error interrupt enable                            */
      __IOM uint32_t DIR        : 1;            /*!< (@ 0x00000004) Data transfer direction                                    */
      __IOM uint32_t CIRC       : 1;            /*!< (@ 0x00000005) Circular mode                                              */
      __IOM uint32_t PINC       : 1;            /*!< (@ 0x00000006) Peripheral increment mode                                  */
      __IOM uint32_t MINC       : 1;            /*!< (@ 0x00000007) Memory increment mode                                      */
      __IOM uint32_t PSIZE      : 2;            /*!< (@ 0x00000008) Peripheral size                                            */
      __IOM uint32_t MSIZE      : 2;            /*!< (@ 0x0000000A) Memory size                                                */
      __IOM uint32_t PL         : 2;            /*!< (@ 0x0000000C) Channel Priority level                                     */
      __IOM uint32_t MEM2MEM    : 1;            /*!< (@ 0x0000000E) Memory to memory mode                                      */
      uint32_t                  : 17;
    } bit;
  } CCR6;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000070) DMA channel 6 number of data register                      */

    struct {
      __IOM uint32_t NDT        : 16;           /*!< (@ 0x00000000) Number of data to transfer                                 */
    } bit;
  } CNDTR6;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000074) DMA channel 6 peripheral address register                  */

    struct {
      __IOM uint32_t PA         : 32;           /*!< (@ 0x00000000) Peripheral address                                         */
    } bit;
  } CPAR6;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000078) DMA channel 6 memory address register                      */

    struct {
      __IOM uint32_t MA         : 32;           /*!< (@ 0x00000000) Memory address                                             */
    } bit;
  } CMAR6;
  __IM  uint32_t  RESERVED5;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000080) DMA channel configuration register (DMA_CCR)               */

    struct {
      __IOM uint32_t EN         : 1;            /*!< (@ 0x00000000) Channel enable                                             */
      __IOM uint32_t TCIE       : 1;            /*!< (@ 0x00000001) Transfer complete interrupt enable                         */
      __IOM uint32_t HTIE       : 1;            /*!< (@ 0x00000002) Half Transfer interrupt enable                             */
      __IOM uint32_t TEIE       : 1;            /*!< (@ 0x00000003) Transfer error interrupt enable                            */
      __IOM uint32_t DIR        : 1;            /*!< (@ 0x00000004) Data transfer direction                                    */
      __IOM uint32_t CIRC       : 1;            /*!< (@ 0x00000005) Circular mode                                              */
      __IOM uint32_t PINC       : 1;            /*!< (@ 0x00000006) Peripheral increment mode                                  */
      __IOM uint32_t MINC       : 1;            /*!< (@ 0x00000007) Memory increment mode                                      */
      __IOM uint32_t PSIZE      : 2;            /*!< (@ 0x00000008) Peripheral size                                            */
      __IOM uint32_t MSIZE      : 2;            /*!< (@ 0x0000000A) Memory size                                                */
      __IOM uint32_t PL         : 2;            /*!< (@ 0x0000000C) Channel Priority level                                     */
      __IOM uint32_t MEM2MEM    : 1;            /*!< (@ 0x0000000E) Memory to memory mode                                      */
      uint32_t                  : 17;
    } bit;
  } CCR7;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000084) DMA channel 7 number of data register                      */

    struct {
      __IOM uint32_t NDT        : 16;           /*!< (@ 0x00000000) Number of data to transfer                                 */
    } bit;
  } CNDTR7;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000088) DMA channel 7 peripheral address register                  */

    struct {
      __IOM uint32_t PA         : 32;           /*!< (@ 0x00000000) Peripheral address                                         */
    } bit;
  } CPAR7;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000008C) DMA channel 7 memory address register                      */

    struct {
      __IOM uint32_t MA         : 32;           /*!< (@ 0x00000000) Memory address                                             */
    } bit;
  } CMAR7;
} DMA1_Type;                                    /*!< Size = 144 (0x90)                                                         */



/* =========================================================================================================================== */
/* ================                                           SDIO                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Secure digital input/output  interface (SDIO)
  */

typedef struct {                                /*!< (@ 0x40018000) SDIO Structure                                             */

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Bits 1:0 = PWRCTRL: Power supply control bits              */

    struct {
      __IOM uint32_t PWRCTRL    : 2;            /*!< (@ 0x00000000) PWRCTRL                                                    */
    } bit;
  } POWER;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000004) SDI clock control register (SDIO_CLKCR)                    */

    struct {
      __IOM uint32_t CLKDIV     : 8;            /*!< (@ 0x00000000) Clock divide factor                                        */
      __IOM uint32_t CLKEN      : 1;            /*!< (@ 0x00000008) Clock enable bit                                           */
      __IOM uint32_t PWRSAV     : 1;            /*!< (@ 0x00000009) Power saving configuration bit                             */
      __IOM uint32_t BYPASS     : 1;            /*!< (@ 0x0000000A) Clock divider bypass enable bit                            */
      __IOM uint32_t WIDBUS     : 2;            /*!< (@ 0x0000000B) Wide bus mode enable bit                                   */
      __IOM uint32_t NEGEDGE    : 1;            /*!< (@ 0x0000000D) SDIO_CK dephasing selection bit                            */
      __IOM uint32_t HWFC_EN    : 1;            /*!< (@ 0x0000000E) HW Flow Control enable                                     */
    } bit;
  } CLKCR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000008) Bits 31:0 = : Command argument                             */

    struct {
      __IOM uint32_t CMDARG     : 32;           /*!< (@ 0x00000000) Command argument                                           */
    } bit;
  } ARG;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000000C) SDIO command register (SDIO_CMD)                           */

    struct {
      __IOM uint32_t CMDINDEX   : 6;            /*!< (@ 0x00000000) CMDINDEX                                                   */
      __IOM uint32_t WAITRESP   : 2;            /*!< (@ 0x00000006) WAITRESP                                                   */
      __IOM uint32_t WAITINT    : 1;            /*!< (@ 0x00000008) WAITINT                                                    */
      __IOM uint32_t WAITPEND   : 1;            /*!< (@ 0x00000009) WAITPEND                                                   */
      __IOM uint32_t CPSMEN     : 1;            /*!< (@ 0x0000000A) CPSMEN                                                     */
      __IOM uint32_t SDIOSuspend : 1;           /*!< (@ 0x0000000B) SDIOSuspend                                                */
      __IOM uint32_t ENCMDcompl : 1;            /*!< (@ 0x0000000C) ENCMDcompl                                                 */
      __IOM uint32_t nIEN       : 1;            /*!< (@ 0x0000000D) nIEN                                                       */
      __IOM uint32_t CE_ATACMD  : 1;            /*!< (@ 0x0000000E) CE_ATACMD                                                  */
    } bit;
  } CMD;

  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000010) SDIO command register                                      */

    struct {
      __IM  uint32_t RESPCMD    : 6;            /*!< (@ 0x00000000) RESPCMD                                                    */
    } bit;
  } RESPCMD;

  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000014) Bits 31:0 = CARDSTATUS1                                    */

    struct {
      __IM  uint32_t CARDSTATUS1 : 32;          /*!< (@ 0x00000000) CARDSTATUS1                                                */
    } bit;
  } RESPI1;

  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000018) Bits 31:0 = CARDSTATUS2                                    */

    struct {
      __IM  uint32_t CARDSTATUS2 : 32;          /*!< (@ 0x00000000) CARDSTATUS2                                                */
    } bit;
  } RESP2;

  union {
    __IM  uint32_t reg;                         /*!< (@ 0x0000001C) Bits 31:0 = CARDSTATUS3                                    */

    struct {
      __IM  uint32_t CARDSTATUS3 : 32;          /*!< (@ 0x00000000) CARDSTATUS3                                                */
    } bit;
  } RESP3;

  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000020) Bits 31:0 = CARDSTATUS4                                    */

    struct {
      __IM  uint32_t CARDSTATUS4 : 32;          /*!< (@ 0x00000000) CARDSTATUS4                                                */
    } bit;
  } RESP4;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000024) Bits 31:0 = DATATIME: Data timeout period                  */

    struct {
      __IOM uint32_t DATATIME   : 32;           /*!< (@ 0x00000000) Data timeout period                                        */
    } bit;
  } DTIMER;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000028) Bits 24:0 = DATALENGTH: Data length value                  */

    struct {
      __IOM uint32_t DATALENGTH : 25;           /*!< (@ 0x00000000) Data length value                                          */
    } bit;
  } DLEN;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000002C) SDIO data control register (SDIO_DCTRL)                    */

    struct {
      __IOM uint32_t DTEN       : 1;            /*!< (@ 0x00000000) DTEN                                                       */
      __IOM uint32_t DTDIR      : 1;            /*!< (@ 0x00000001) DTDIR                                                      */
      __IOM uint32_t DTMODE     : 1;            /*!< (@ 0x00000002) DTMODE                                                     */
      __IOM uint32_t DMAEN      : 1;            /*!< (@ 0x00000003) DMAEN                                                      */
      __IOM uint32_t DBLOCKSIZE : 4;            /*!< (@ 0x00000004) DBLOCKSIZE                                                 */
      __IOM uint32_t PWSTART    : 1;            /*!< (@ 0x00000008) PWSTART                                                    */
      __IOM uint32_t PWSTOP     : 1;            /*!< (@ 0x00000009) PWSTOP                                                     */
      __IOM uint32_t RWMOD      : 1;            /*!< (@ 0x0000000A) RWMOD                                                      */
      __IOM uint32_t SDIOEN     : 1;            /*!< (@ 0x0000000B) SDIOEN                                                     */
    } bit;
  } DCTRL;

  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000030) Bits 24:0 = DATACOUNT: Data count value                    */

    struct {
      __IM  uint32_t DATACOUNT  : 25;           /*!< (@ 0x00000000) Data count value                                           */
    } bit;
  } DCOUNT;

  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000034) SDIO status register (SDIO_STA)                            */

    struct {
      __IM  uint32_t CCRCFAIL   : 1;            /*!< (@ 0x00000000) CCRCFAIL                                                   */
      __IM  uint32_t DCRCFAIL   : 1;            /*!< (@ 0x00000001) DCRCFAIL                                                   */
      __IM  uint32_t CTIMEOUT   : 1;            /*!< (@ 0x00000002) CTIMEOUT                                                   */
      __IM  uint32_t DTIMEOUT   : 1;            /*!< (@ 0x00000003) DTIMEOUT                                                   */
      __IM  uint32_t TXUNDERR   : 1;            /*!< (@ 0x00000004) TXUNDERR                                                   */
      __IM  uint32_t RXOVERR    : 1;            /*!< (@ 0x00000005) RXOVERR                                                    */
      __IM  uint32_t CMDREND    : 1;            /*!< (@ 0x00000006) CMDREND                                                    */
      __IM  uint32_t CMDSENT    : 1;            /*!< (@ 0x00000007) CMDSENT                                                    */
      __IM  uint32_t DATAEND    : 1;            /*!< (@ 0x00000008) DATAEND                                                    */
      __IM  uint32_t STBITERR   : 1;            /*!< (@ 0x00000009) STBITERR                                                   */
      __IM  uint32_t DBCKEND    : 1;            /*!< (@ 0x0000000A) DBCKEND                                                    */
      __IM  uint32_t CMDACT     : 1;            /*!< (@ 0x0000000B) CMDACT                                                     */
      __IM  uint32_t TXACT      : 1;            /*!< (@ 0x0000000C) TXACT                                                      */
      __IM  uint32_t RXACT      : 1;            /*!< (@ 0x0000000D) RXACT                                                      */
      __IM  uint32_t TXFIFOHE   : 1;            /*!< (@ 0x0000000E) TXFIFOHE                                                   */
      __IM  uint32_t RXFIFOHF   : 1;            /*!< (@ 0x0000000F) RXFIFOHF                                                   */
      __IM  uint32_t TXFIFOF    : 1;            /*!< (@ 0x00000010) TXFIFOF                                                    */
      __IM  uint32_t RXFIFOF    : 1;            /*!< (@ 0x00000011) RXFIFOF                                                    */
      __IM  uint32_t TXFIFOE    : 1;            /*!< (@ 0x00000012) TXFIFOE                                                    */
      __IM  uint32_t RXFIFOE    : 1;            /*!< (@ 0x00000013) RXFIFOE                                                    */
      __IM  uint32_t TXDAVL     : 1;            /*!< (@ 0x00000014) TXDAVL                                                     */
      __IM  uint32_t RXDAVL     : 1;            /*!< (@ 0x00000015) RXDAVL                                                     */
      __IM  uint32_t SDIOIT     : 1;            /*!< (@ 0x00000016) SDIOIT                                                     */
      __IM  uint32_t CEATAEND   : 1;            /*!< (@ 0x00000017) CEATAEND                                                   */
    } bit;
  } STA;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000038) SDIO interrupt clear register (SDIO_ICR)                   */

    struct {
      __IOM uint32_t CCRCFAILC  : 1;            /*!< (@ 0x00000000) CCRCFAILC                                                  */
      __IOM uint32_t DCRCFAILC  : 1;            /*!< (@ 0x00000001) DCRCFAILC                                                  */
      __IOM uint32_t CTIMEOUTC  : 1;            /*!< (@ 0x00000002) CTIMEOUTC                                                  */
      __IOM uint32_t DTIMEOUTC  : 1;            /*!< (@ 0x00000003) DTIMEOUTC                                                  */
      __IOM uint32_t TXUNDERRC  : 1;            /*!< (@ 0x00000004) TXUNDERRC                                                  */
      __IOM uint32_t RXOVERRC   : 1;            /*!< (@ 0x00000005) RXOVERRC                                                   */
      __IOM uint32_t CMDRENDC   : 1;            /*!< (@ 0x00000006) CMDRENDC                                                   */
      __IOM uint32_t CMDSENTC   : 1;            /*!< (@ 0x00000007) CMDSENTC                                                   */
      __IOM uint32_t DATAENDC   : 1;            /*!< (@ 0x00000008) DATAENDC                                                   */
      __IOM uint32_t STBITERRC  : 1;            /*!< (@ 0x00000009) STBITERRC                                                  */
      __IOM uint32_t DBCKENDC   : 1;            /*!< (@ 0x0000000A) DBCKENDC                                                   */
      __IM  uint32_t            : 11;
      __IOM uint32_t SDIOITC    : 1;            /*!< (@ 0x00000016) SDIOITC                                                    */
      __IOM uint32_t CEATAENDC  : 1;            /*!< (@ 0x00000017) CEATAENDC                                                  */
    } bit;
  } ICR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000003C) SDIO mask register (SDIO_MASK)                             */

    struct {
      __IOM uint32_t CCRCFAILIE : 1;            /*!< (@ 0x00000000) CCRCFAILIE                                                 */
      __IOM uint32_t DCRCFAILIE : 1;            /*!< (@ 0x00000001) DCRCFAILIE                                                 */
      __IOM uint32_t CTIMEOUTIE : 1;            /*!< (@ 0x00000002) CTIMEOUTIE                                                 */
      __IOM uint32_t DTIMEOUTIE : 1;            /*!< (@ 0x00000003) DTIMEOUTIE                                                 */
      __IOM uint32_t TXUNDERRIE : 1;            /*!< (@ 0x00000004) TXUNDERRIE                                                 */
      __IOM uint32_t RXOVERRIE  : 1;            /*!< (@ 0x00000005) RXOVERRIE                                                  */
      __IOM uint32_t CMDRENDIE  : 1;            /*!< (@ 0x00000006) CMDRENDIE                                                  */
      __IOM uint32_t CMDSENTIE  : 1;            /*!< (@ 0x00000007) CMDSENTIE                                                  */
      __IOM uint32_t DATAENDIE  : 1;            /*!< (@ 0x00000008) DATAENDIE                                                  */
      __IOM uint32_t STBITERRIE : 1;            /*!< (@ 0x00000009) STBITERRIE                                                 */
      __IOM uint32_t DBACKENDIE : 1;            /*!< (@ 0x0000000A) DBACKENDIE                                                 */
      __IOM uint32_t CMDACTIE   : 1;            /*!< (@ 0x0000000B) CMDACTIE                                                   */
      __IOM uint32_t TXACTIE    : 1;            /*!< (@ 0x0000000C) TXACTIE                                                    */
      __IOM uint32_t RXACTIE    : 1;            /*!< (@ 0x0000000D) RXACTIE                                                    */
      __IOM uint32_t TXFIFOHEIE : 1;            /*!< (@ 0x0000000E) TXFIFOHEIE                                                 */
      __IOM uint32_t RXFIFOHFIE : 1;            /*!< (@ 0x0000000F) RXFIFOHFIE                                                 */
      __IOM uint32_t TXFIFOFIE  : 1;            /*!< (@ 0x00000010) TXFIFOFIE                                                  */
      __IOM uint32_t RXFIFOFIE  : 1;            /*!< (@ 0x00000011) RXFIFOFIE                                                  */
      __IOM uint32_t TXFIFOEIE  : 1;            /*!< (@ 0x00000012) TXFIFOEIE                                                  */
      __IOM uint32_t RXFIFOEIE  : 1;            /*!< (@ 0x00000013) RXFIFOEIE                                                  */
      __IOM uint32_t TXDAVLIE   : 1;            /*!< (@ 0x00000014) TXDAVLIE                                                   */
      __IOM uint32_t RXDAVLIE   : 1;            /*!< (@ 0x00000015) RXDAVLIE                                                   */
      __IOM uint32_t SDIOITIE   : 1;            /*!< (@ 0x00000016) SDIOITIE                                                   */
      __IOM uint32_t CEATENDIE  : 1;            /*!< (@ 0x00000017) CEATENDIE                                                  */
    } bit;
  } MASK;
  __IM  uint32_t  RESERVED[2];

  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000048) Bits 23:0 = FIFOCOUNT: Remaining number of words
                                                                    to be written to or read from the FIFO                     */

    struct {
      __IM  uint32_t FIF0COUNT  : 24;           /*!< (@ 0x00000000) FIF0COUNT                                                  */
    } bit;
  } FIFOCNT;
  __IM  uint32_t  RESERVED1[13];

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000080) bits 31:0 = FIFOData: Receive and transmit FIFO
                                                                    data                                                       */

    struct {
      __IOM uint32_t FIFOData   : 32;           /*!< (@ 0x00000000) FIFOData                                                   */
    } bit;
  } FIFO;
} SDIO_Type;                                    /*!< Size = 132 (0x84)                                                         */



/* =========================================================================================================================== */
/* ================                                            RTC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Real time clock (RTC)
  */

typedef struct {                                /*!< (@ 0x40002800) RTC Structure                                              */

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) RTC Control Register High                                  */

    struct {
      __IOM uint32_t SECIE      : 1;            /*!< (@ 0x00000000) Second interrupt Enable                                    */
      __IOM uint32_t ALRIE      : 1;            /*!< (@ 0x00000001) Alarm interrupt Enable                                     */
      __IOM uint32_t OWIE       : 1;            /*!< (@ 0x00000002) Overflow interrupt Enable                                  */
    } bit;
  } CRH;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000004) RTC Control Register Low                                   */

    struct {
      __IOM uint32_t SECF       : 1;            /*!< (@ 0x00000000) Second Flag                                                */
      __IOM uint32_t ALRF       : 1;            /*!< (@ 0x00000001) Alarm Flag                                                 */
      __IOM uint32_t OWF        : 1;            /*!< (@ 0x00000002) Overflow Flag                                              */
      __IOM uint32_t RSF        : 1;            /*!< (@ 0x00000003) Registers Synchronized Flag                                */
      __IOM uint32_t CNF        : 1;            /*!< (@ 0x00000004) Configuration Flag                                         */
      __IM  uint32_t RTOFF      : 1;            /*!< (@ 0x00000005) RTC operation OFF                                          */
    } bit;
  } CRL;

  union {
    __OM  uint32_t reg;                         /*!< (@ 0x00000008) RTC Prescaler Load Register High                           */

    struct {
      __OM  uint32_t PRLH       : 4;            /*!< (@ 0x00000000) RTC Prescaler Load Register High                           */
    } bit;
  } PRLH;

  union {
    __OM  uint32_t reg;                         /*!< (@ 0x0000000C) RTC Prescaler Load Register Low                            */

    struct {
      __OM  uint32_t PRLL       : 16;           /*!< (@ 0x00000000) RTC Prescaler Divider Register Low                         */
    } bit;
  } PRLL;

  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000010) RTC Prescaler Divider Register High                        */

    struct {
      __IM  uint32_t DIVH       : 4;            /*!< (@ 0x00000000) RTC prescaler divider register high                        */
    } bit;
  } DIVH;

  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000014) RTC Prescaler Divider Register Low                         */

    struct {
      __IM  uint32_t DIVL       : 16;           /*!< (@ 0x00000000) RTC prescaler divider register Low                         */
    } bit;
  } DIVL;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000018) RTC Counter Register High                                  */

    struct {
      __IOM uint32_t CNTH       : 16;           /*!< (@ 0x00000000) RTC counter register high                                  */
    } bit;
  } CNTH;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000001C) RTC Counter Register Low                                   */

    struct {
      __IOM uint32_t CNTL       : 16;           /*!< (@ 0x00000000) RTC counter register Low                                   */
    } bit;
  } CNTL;

  union {
    __OM  uint32_t reg;                         /*!< (@ 0x00000020) RTC Alarm Register High                                    */

    struct {
      __OM  uint32_t ALRH       : 16;           /*!< (@ 0x00000000) RTC alarm register high                                    */
    } bit;
  } ALRH;

  union {
    __OM  uint32_t reg;                         /*!< (@ 0x00000024) RTC Alarm Register Low                                     */

    struct {
      __OM  uint32_t ALRL       : 16;           /*!< (@ 0x00000000) RTC alarm register low                                     */
    } bit;
  } ALRL;
} RTC_Type;                                     /*!< Size = 40 (0x28)                                                          */



/* =========================================================================================================================== */
/* ================                                            BKP                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Backup registers (BKP)
  */

typedef struct {                                /*!< (@ 0x40006C04) BKP Structure                                              */

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Backup data register (BKP_DR)                              */

    struct {
      __IOM uint32_t D1         : 16;           /*!< (@ 0x00000000) Backup data                                                */
    } bit;
  } DR1;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000004) Backup data register (BKP_DR)                              */

    struct {
      __IOM uint32_t D2         : 16;           /*!< (@ 0x00000000) Backup data                                                */
    } bit;
  } DR2;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000008) Backup data register (BKP_DR)                              */

    struct {
      __IOM uint32_t D3         : 16;           /*!< (@ 0x00000000) Backup data                                                */
    } bit;
  } DR3;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000000C) Backup data register (BKP_DR)                              */

    struct {
      __IOM uint32_t D4         : 16;           /*!< (@ 0x00000000) Backup data                                                */
    } bit;
  } DR4;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) Backup data register (BKP_DR)                              */

    struct {
      __IOM uint32_t D5         : 16;           /*!< (@ 0x00000000) Backup data                                                */
    } bit;
  } DR5;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000014) Backup data register (BKP_DR)                              */

    struct {
      __IOM uint32_t D6         : 16;           /*!< (@ 0x00000000) Backup data                                                */
    } bit;
  } DR6;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000018) Backup data register (BKP_DR)                              */

    struct {
      __IOM uint32_t D7         : 16;           /*!< (@ 0x00000000) Backup data                                                */
    } bit;
  } DR7;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000001C) Backup data register (BKP_DR)                              */

    struct {
      __IOM uint32_t D8         : 16;           /*!< (@ 0x00000000) Backup data                                                */
    } bit;
  } DR8;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) Backup data register (BKP_DR)                              */

    struct {
      __IOM uint32_t D9         : 16;           /*!< (@ 0x00000000) Backup data                                                */
    } bit;
  } DR9;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000024) Backup data register (BKP_DR)                              */

    struct {
      __IOM uint32_t D10        : 16;           /*!< (@ 0x00000000) Backup data                                                */
    } bit;
  } DR10;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000028) RTC clock calibration register (BKP_RTCCR)                 */

    struct {
      __IOM uint32_t CAL        : 7;            /*!< (@ 0x00000000) Calibration value                                          */
      __IOM uint32_t CCO        : 1;            /*!< (@ 0x00000007) Calibration Clock Output                                   */
      __IOM uint32_t ASOE       : 1;            /*!< (@ 0x00000008) Alarm or second output enable                              */
      __IOM uint32_t ASOS       : 1;            /*!< (@ 0x00000009) Alarm or second output selection                           */
    } bit;
  } RTCCR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000002C) Backup control register (BKP_CR)                           */

    struct {
      __IOM uint32_t TPE        : 1;            /*!< (@ 0x00000000) Tamper pin enable                                          */
      __IOM uint32_t TPAL       : 1;            /*!< (@ 0x00000001) Tamper pin active level                                    */
    } bit;
  } CR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000030) BKP_CSR control/status register (BKP_CSR)                  */

    struct {
      __OM  uint32_t CTE        : 1;            /*!< (@ 0x00000000) Clear Tamper event                                         */
      __OM  uint32_t CTI        : 1;            /*!< (@ 0x00000001) Clear Tamper Interrupt                                     */
      __IOM uint32_t TPIE       : 1;            /*!< (@ 0x00000002) Tamper Pin interrupt enable                                */
      __IM  uint32_t            : 5;
      __IM  uint32_t TEF        : 1;            /*!< (@ 0x00000008) Tamper Event Flag                                          */
      __IM  uint32_t TIF        : 1;            /*!< (@ 0x00000009) Tamper Interrupt Flag                                      */
    } bit;
  } CSR;
  __IM  uint32_t  RESERVED[2];

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000003C) Backup data register (BKP_DR)                              */

    struct {
      __IOM uint32_t DR11       : 16;           /*!< (@ 0x00000000) Backup data                                                */
    } bit;
  } DR11;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000040) Backup data register (BKP_DR)                              */

    struct {
      __IOM uint32_t DR12       : 16;           /*!< (@ 0x00000000) Backup data                                                */
    } bit;
  } DR12;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000044) Backup data register (BKP_DR)                              */

    struct {
      __IOM uint32_t DR13       : 16;           /*!< (@ 0x00000000) Backup data                                                */
    } bit;
  } DR13;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000048) Backup data register (BKP_DR)                              */

    struct {
      __IOM uint32_t D14        : 16;           /*!< (@ 0x00000000) Backup data                                                */
    } bit;
  } DR14;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000004C) Backup data register (BKP_DR)                              */

    struct {
      __IOM uint32_t D15        : 16;           /*!< (@ 0x00000000) Backup data                                                */
    } bit;
  } DR15;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000050) Backup data register (BKP_DR)                              */

    struct {
      __IOM uint32_t D16        : 16;           /*!< (@ 0x00000000) Backup data                                                */
    } bit;
  } DR16;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000054) Backup data register (BKP_DR)                              */

    struct {
      __IOM uint32_t D17        : 16;           /*!< (@ 0x00000000) Backup data                                                */
    } bit;
  } DR17;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000058) Backup data register (BKP_DR)                              */

    struct {
      __IOM uint32_t D18        : 16;           /*!< (@ 0x00000000) Backup data                                                */
    } bit;
  } DR18;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000005C) Backup data register (BKP_DR)                              */

    struct {
      __IOM uint32_t D19        : 16;           /*!< (@ 0x00000000) Backup data                                                */
    } bit;
  } DR19;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000060) Backup data register (BKP_DR)                              */

    struct {
      __IOM uint32_t D20        : 16;           /*!< (@ 0x00000000) Backup data                                                */
    } bit;
  } DR20;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000064) Backup data register (BKP_DR)                              */

    struct {
      __IOM uint32_t D21        : 16;           /*!< (@ 0x00000000) Backup data                                                */
    } bit;
  } DR21;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000068) Backup data register (BKP_DR)                              */

    struct {
      __IOM uint32_t D22        : 16;           /*!< (@ 0x00000000) Backup data                                                */
    } bit;
  } DR22;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000006C) Backup data register (BKP_DR)                              */

    struct {
      __IOM uint32_t D23        : 16;           /*!< (@ 0x00000000) Backup data                                                */
    } bit;
  } DR23;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000070) Backup data register (BKP_DR)                              */

    struct {
      __IOM uint32_t D24        : 16;           /*!< (@ 0x00000000) Backup data                                                */
    } bit;
  } DR24;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000074) Backup data register (BKP_DR)                              */

    struct {
      __IOM uint32_t D25        : 16;           /*!< (@ 0x00000000) Backup data                                                */
    } bit;
  } DR25;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000078) Backup data register (BKP_DR)                              */

    struct {
      __IOM uint32_t D26        : 16;           /*!< (@ 0x00000000) Backup data                                                */
    } bit;
  } DR26;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000007C) Backup data register (BKP_DR)                              */

    struct {
      __IOM uint32_t D27        : 16;           /*!< (@ 0x00000000) Backup data                                                */
    } bit;
  } DR27;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000080) Backup data register (BKP_DR)                              */

    struct {
      __IOM uint32_t D28        : 16;           /*!< (@ 0x00000000) Backup data                                                */
    } bit;
  } DR28;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000084) Backup data register (BKP_DR)                              */

    struct {
      __IOM uint32_t D29        : 16;           /*!< (@ 0x00000000) Backup data                                                */
    } bit;
  } DR29;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000088) Backup data register (BKP_DR)                              */

    struct {
      __IOM uint32_t D30        : 16;           /*!< (@ 0x00000000) Backup data                                                */
    } bit;
  } DR30;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000008C) Backup data register (BKP_DR)                              */

    struct {
      __IOM uint32_t D31        : 16;           /*!< (@ 0x00000000) Backup data                                                */
    } bit;
  } DR31;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000090) Backup data register (BKP_DR)                              */

    struct {
      __IOM uint32_t D32        : 16;           /*!< (@ 0x00000000) Backup data                                                */
    } bit;
  } DR32;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000094) Backup data register (BKP_DR)                              */

    struct {
      __IOM uint32_t D33        : 16;           /*!< (@ 0x00000000) Backup data                                                */
    } bit;
  } DR33;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000098) Backup data register (BKP_DR)                              */

    struct {
      __IOM uint32_t D34        : 16;           /*!< (@ 0x00000000) Backup data                                                */
    } bit;
  } DR34;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000009C) Backup data register (BKP_DR)                              */

    struct {
      __IOM uint32_t D35        : 16;           /*!< (@ 0x00000000) Backup data                                                */
    } bit;
  } DR35;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000A0) Backup data register (BKP_DR)                              */

    struct {
      __IOM uint32_t D36        : 16;           /*!< (@ 0x00000000) Backup data                                                */
    } bit;
  } DR36;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000A4) Backup data register (BKP_DR)                              */

    struct {
      __IOM uint32_t D37        : 16;           /*!< (@ 0x00000000) Backup data                                                */
    } bit;
  } DR37;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000A8) Backup data register (BKP_DR)                              */

    struct {
      __IOM uint32_t D38        : 16;           /*!< (@ 0x00000000) Backup data                                                */
    } bit;
  } DR38;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000AC) Backup data register (BKP_DR)                              */

    struct {
      __IOM uint32_t D39        : 16;           /*!< (@ 0x00000000) Backup data                                                */
    } bit;
  } DR39;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000B0) Backup data register (BKP_DR)                              */

    struct {
      __IOM uint32_t D40        : 16;           /*!< (@ 0x00000000) Backup data                                                */
    } bit;
  } DR40;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000B4) Backup data register (BKP_DR)                              */

    struct {
      __IOM uint32_t D41        : 16;           /*!< (@ 0x00000000) Backup data                                                */
    } bit;
  } DR41;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000000B8) Backup data register (BKP_DR)                              */

    struct {
      __IOM uint32_t D42        : 16;           /*!< (@ 0x00000000) Backup data                                                */
    } bit;
  } DR42;
} BKP_Type;                                     /*!< Size = 188 (0xbc)                                                         */



/* =========================================================================================================================== */
/* ================                                           IWDG                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Independent watchdog (IWDG)
  */

typedef struct {                                /*!< (@ 0x40003000) IWDG Structure                                             */

  union {
    __OM  uint32_t reg;                         /*!< (@ 0x00000000) Key register (IWDG_KR)                                     */

    struct {
      __OM  uint32_t KEY        : 16;           /*!< (@ 0x00000000) Key value                                                  */
    } bit;
  } KR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000004) Prescaler register (IWDG_PR)                               */

    struct {
      __IOM uint32_t PR         : 3;            /*!< (@ 0x00000000) Prescaler divider                                          */
    } bit;
  } PR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000008) Reload register (IWDG_RLR)                                 */

    struct {
      __IOM uint32_t RL         : 12;           /*!< (@ 0x00000000) Watchdog counter reload value                              */
    } bit;
  } RLR;

  union {
    __IM  uint32_t reg;                         /*!< (@ 0x0000000C) Status register (IWDG_SR)                                  */

    struct {
      __IM  uint32_t PVU        : 1;            /*!< (@ 0x00000000) Watchdog prescaler value update                            */
      __IM  uint32_t RVU        : 1;            /*!< (@ 0x00000001) Watchdog counter reload value update                       */
    } bit;
  } SR;
} IWDG_Type;                                    /*!< Size = 16 (0x10)                                                          */



/* =========================================================================================================================== */
/* ================                                           WWDG                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Window watchdog (WWDG)
  */

typedef struct {                                /*!< (@ 0x40002C00) WWDG Structure                                             */

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Control register (WWDG_CR)                                 */

    struct {
      __IOM uint32_t T          : 7;            /*!< (@ 0x00000000) 7-bit counter (MSB to LSB)                                 */
      __IOM uint32_t WDGA       : 1;            /*!< (@ 0x00000007) Activation bit                                             */
    } bit;
  } CR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000004) Configuration register (WWDG_CFR)                          */

    struct {
      __IOM uint32_t W          : 7;            /*!< (@ 0x00000000) 7-bit window value                                         */
      __IOM uint32_t WDGTB      : 2;            /*!< (@ 0x00000007) Timer Base                                                 */
      __IOM uint32_t EWI        : 1;            /*!< (@ 0x00000009) Early Wakeup Interrupt                                     */
    } bit;
  } CFR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000008) Status register (WWDG_SR)                                  */

    struct {
      __IOM uint32_t EWI        : 1;            /*!< (@ 0x00000000) Early Wakeup Interrupt                                     */
    } bit;
  } SR;
} WWDG_Type;                                    /*!< Size = 12 (0xc)                                                           */



/* =========================================================================================================================== */
/* ================                                           TIM1                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Advanced timer (TIM1)
  */

typedef struct {                                /*!< (@ 0x40012C00) TIM1 Structure                                             */

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) control register 1                                         */

    struct {
      __IOM uint32_t CEN        : 1;            /*!< (@ 0x00000000) Counter enable                                             */
      __IOM uint32_t UDIS       : 1;            /*!< (@ 0x00000001) Update disable                                             */
      __IOM uint32_t URS        : 1;            /*!< (@ 0x00000002) Update request source                                      */
      __IOM uint32_t OPM        : 1;            /*!< (@ 0x00000003) One-pulse mode                                             */
      __IOM uint32_t DIR        : 1;            /*!< (@ 0x00000004) Direction                                                  */
      __IOM uint32_t CMS        : 2;            /*!< (@ 0x00000005) Center-aligned mode selection                              */
      __IOM uint32_t ARPE       : 1;            /*!< (@ 0x00000007) Auto-reload preload enable                                 */
      __IOM uint32_t CKD        : 2;            /*!< (@ 0x00000008) Clock division                                             */
    } bit;
  } CR1;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000004) control register 2                                         */

    struct {
      __IOM uint32_t CCPC       : 1;            /*!< (@ 0x00000000) Capture/compare preloaded control                          */
      __IM  uint32_t            : 1;
      __IOM uint32_t CCUS       : 1;            /*!< (@ 0x00000002) Capture/compare control update selection                   */
      __IOM uint32_t CCDS       : 1;            /*!< (@ 0x00000003) Capture/compare DMA selection                              */
      __IOM uint32_t MMS        : 3;            /*!< (@ 0x00000004) Master mode selection                                      */
      __IOM uint32_t TI1S       : 1;            /*!< (@ 0x00000007) TI1 selection                                              */
      __IOM uint32_t OIS1       : 1;            /*!< (@ 0x00000008) Output Idle state 1                                        */
      __IOM uint32_t OIS1N      : 1;            /*!< (@ 0x00000009) Output Idle state 1                                        */
      __IOM uint32_t OIS2       : 1;            /*!< (@ 0x0000000A) Output Idle state 2                                        */
      __IOM uint32_t OIS2N      : 1;            /*!< (@ 0x0000000B) Output Idle state 2                                        */
      __IOM uint32_t OIS3       : 1;            /*!< (@ 0x0000000C) Output Idle state 3                                        */
      __IOM uint32_t OIS3N      : 1;            /*!< (@ 0x0000000D) Output Idle state 3                                        */
      __IOM uint32_t OIS4       : 1;            /*!< (@ 0x0000000E) Output Idle state 4                                        */
    } bit;
  } CR2;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000008) slave mode control register                                */

    struct {
      __IOM uint32_t SMS        : 3;            /*!< (@ 0x00000000) Slave mode selection                                       */
      __IM  uint32_t            : 1;
      __IOM uint32_t TS         : 3;            /*!< (@ 0x00000004) Trigger selection                                          */
      __IOM uint32_t MSM        : 1;            /*!< (@ 0x00000007) Master/Slave mode                                          */
      __IOM uint32_t ETF        : 4;            /*!< (@ 0x00000008) External trigger filter                                    */
      __IOM uint32_t ETPS       : 2;            /*!< (@ 0x0000000C) External trigger prescaler                                 */
      __IOM uint32_t ECE        : 1;            /*!< (@ 0x0000000E) External clock enable                                      */
      __IOM uint32_t ETP        : 1;            /*!< (@ 0x0000000F) External trigger polarity                                  */
    } bit;
  } SMCR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000000C) DMA/Interrupt enable register                              */

    struct {
      __IOM uint32_t UIE        : 1;            /*!< (@ 0x00000000) Update interrupt enable                                    */
      __IOM uint32_t CC1IE      : 1;            /*!< (@ 0x00000001) Capture/Compare 1 interrupt enable                         */
      __IOM uint32_t CC2IE      : 1;            /*!< (@ 0x00000002) Capture/Compare 2 interrupt enable                         */
      __IOM uint32_t CC3IE      : 1;            /*!< (@ 0x00000003) Capture/Compare 3 interrupt enable                         */
      __IOM uint32_t CC4IE      : 1;            /*!< (@ 0x00000004) Capture/Compare 4 interrupt enable                         */
      __IOM uint32_t COMIE      : 1;            /*!< (@ 0x00000005) COM interrupt enable                                       */
      __IOM uint32_t TIE        : 1;            /*!< (@ 0x00000006) Trigger interrupt enable                                   */
      __IOM uint32_t BIE        : 1;            /*!< (@ 0x00000007) Break interrupt enable                                     */
      __IOM uint32_t UDE        : 1;            /*!< (@ 0x00000008) Update DMA request enable                                  */
      __IOM uint32_t CC1DE      : 1;            /*!< (@ 0x00000009) Capture/Compare 1 DMA request enable                       */
      __IOM uint32_t CC2DE      : 1;            /*!< (@ 0x0000000A) Capture/Compare 2 DMA request enable                       */
      __IOM uint32_t CC3DE      : 1;            /*!< (@ 0x0000000B) Capture/Compare 3 DMA request enable                       */
      __IOM uint32_t CC4DE      : 1;            /*!< (@ 0x0000000C) Capture/Compare 4 DMA request enable                       */
      __IOM uint32_t COMDE      : 1;            /*!< (@ 0x0000000D) COM DMA request enable                                     */
      __IOM uint32_t TDE        : 1;            /*!< (@ 0x0000000E) Trigger DMA request enable                                 */
    } bit;
  } DIER;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) status register                                            */

    struct {
      __IOM uint32_t UIF        : 1;            /*!< (@ 0x00000000) Update interrupt flag                                      */
      __IOM uint32_t CC1IF      : 1;            /*!< (@ 0x00000001) Capture/compare 1 interrupt flag                           */
      __IOM uint32_t CC2IF      : 1;            /*!< (@ 0x00000002) Capture/Compare 2 interrupt flag                           */
      __IOM uint32_t CC3IF      : 1;            /*!< (@ 0x00000003) Capture/Compare 3 interrupt flag                           */
      __IOM uint32_t CC4IF      : 1;            /*!< (@ 0x00000004) Capture/Compare 4 interrupt flag                           */
      __IOM uint32_t COMIF      : 1;            /*!< (@ 0x00000005) COM interrupt flag                                         */
      __IOM uint32_t TIF        : 1;            /*!< (@ 0x00000006) Trigger interrupt flag                                     */
      __IOM uint32_t BIF        : 1;            /*!< (@ 0x00000007) Break interrupt flag                                       */
      __IM  uint32_t            : 1;
      __IOM uint32_t CC1OF      : 1;            /*!< (@ 0x00000009) Capture/Compare 1 overcapture flag                         */
      __IOM uint32_t CC2OF      : 1;            /*!< (@ 0x0000000A) Capture/compare 2 overcapture flag                         */
      __IOM uint32_t CC3OF      : 1;            /*!< (@ 0x0000000B) Capture/Compare 3 overcapture flag                         */
      __IOM uint32_t CC4OF      : 1;            /*!< (@ 0x0000000C) Capture/Compare 4 overcapture flag                         */
      uint32_t       : 10;
    } bit;
  } SR;

  union {
    __OM  uint32_t reg;                         /*!< (@ 0x00000014) event generation register                                  */

    struct {
      __OM  uint32_t UG         : 1;            /*!< (@ 0x00000000) Update generation                                          */
      __OM  uint32_t CC1G       : 1;            /*!< (@ 0x00000001) Capture/compare 1 generation                               */
      __OM  uint32_t CC2G       : 1;            /*!< (@ 0x00000002) Capture/compare 2 generation                               */
      __OM  uint32_t CC3G       : 1;            /*!< (@ 0x00000003) Capture/compare 3 generation                               */
      __OM  uint32_t CC4G       : 1;            /*!< (@ 0x00000004) Capture/compare 4 generation                               */
      __OM  uint32_t COMG       : 1;            /*!< (@ 0x00000005) Capture/Compare control update generation                  */
      __OM  uint32_t TG         : 1;            /*!< (@ 0x00000006) Trigger generation                                         */
      __OM  uint32_t BG         : 1;            /*!< (@ 0x00000007) Break generation                                           */
    } bit;
  } EGR;

  union {
    union {
      __IOM uint32_t reg;                       /*!< (@ 0x00000018) capture/compare mode register (output mode)                */

      struct {
        __IOM uint32_t CC1S     : 2;            /*!< (@ 0x00000000) Capture/Compare 1 selection                                */
        __IOM uint32_t OC1FE    : 1;            /*!< (@ 0x00000002) Output Compare 1 fast enable                               */
        __IOM uint32_t OC1PE    : 1;            /*!< (@ 0x00000003) Output Compare 1 preload enable                            */
        __IOM uint32_t OC1M     : 3;            /*!< (@ 0x00000004) Output Compare 1 mode                                      */
        __IOM uint32_t OC1CE    : 1;            /*!< (@ 0x00000007) Output Compare 1 clear enable                              */
        __IOM uint32_t CC2S     : 2;            /*!< (@ 0x00000008) Capture/Compare 2 selection                                */
        __IOM uint32_t OC2FE    : 1;            /*!< (@ 0x0000000A) Output Compare 2 fast enable                               */
        __IOM uint32_t OC2PE    : 1;            /*!< (@ 0x0000000B) Output Compare 2 preload enable                            */
        __IOM uint32_t OC2M     : 3;            /*!< (@ 0x0000000C) Output Compare 2 mode                                      */
        __IOM uint32_t OC2CE    : 1;            /*!< (@ 0x0000000F) Output Compare 2 clear enable                              */
      } bit;
    } CCMR1_Output;

    union {
      __IOM uint32_t reg;                       /*!< (@ 0x00000018) capture/compare mode register 1 (input mode)               */

      struct {
        __IOM uint32_t CC1S     : 2;            /*!< (@ 0x00000000) Capture/Compare 1 selection                                */
        __IOM uint32_t ICPCS    : 2;            /*!< (@ 0x00000002) Input capture 1 prescaler                                  */
        __IOM uint32_t IC1F     : 4;            /*!< (@ 0x00000004) Input capture 1 filter                                     */
        __IOM uint32_t CC2S     : 2;            /*!< (@ 0x00000008) Capture/Compare 2 selection                                */
        __IOM uint32_t IC2PCS   : 2;            /*!< (@ 0x0000000A) Input capture 2 prescaler                                  */
        __IOM uint32_t IC2F     : 4;            /*!< (@ 0x0000000C) Input capture 2 filter                                     */
      } bit;
    } CCMR1_Input;
  };

  union {
    union {
      __IOM uint32_t reg;                       /*!< (@ 0x0000001C) capture/compare mode register (output mode)                */

      struct {
        __IOM uint32_t CC3S     : 2;            /*!< (@ 0x00000000) Capture/Compare 3 selection                                */
        __IOM uint32_t OC3FE    : 1;            /*!< (@ 0x00000002) Output compare 3 fast enable                               */
        __IOM uint32_t OC3PE    : 1;            /*!< (@ 0x00000003) Output compare 3 preload enable                            */
        __IOM uint32_t OC3M     : 3;            /*!< (@ 0x00000004) Output compare 3 mode                                      */
        __IOM uint32_t OC3CE    : 1;            /*!< (@ 0x00000007) Output compare 3 clear enable                              */
        __IOM uint32_t CC4S     : 2;            /*!< (@ 0x00000008) Capture/Compare 4 selection                                */
        __IOM uint32_t OC4FE    : 1;            /*!< (@ 0x0000000A) Output compare 4 fast enable                               */
        __IOM uint32_t OC4PE    : 1;            /*!< (@ 0x0000000B) Output compare 4 preload enable                            */
        __IOM uint32_t OC4M     : 3;            /*!< (@ 0x0000000C) Output compare 4 mode                                      */
        __IOM uint32_t OC4CE    : 1;            /*!< (@ 0x0000000F) Output compare 4 clear enable                              */
      } bit;
    } CCMR2_Output;

    union {
      __IOM uint32_t reg;                       /*!< (@ 0x0000001C) capture/compare mode register 2 (input mode)               */

      struct {
        __IOM uint32_t CC3S     : 2;            /*!< (@ 0x00000000) Capture/compare 3 selection                                */
        __IOM uint32_t IC3PSC   : 2;            /*!< (@ 0x00000002) Input capture 3 prescaler                                  */
        __IOM uint32_t IC3F     : 4;            /*!< (@ 0x00000004) Input capture 3 filter                                     */
        __IOM uint32_t CC4S     : 2;            /*!< (@ 0x00000008) Capture/Compare 4 selection                                */
        __IOM uint32_t IC4PSC   : 2;            /*!< (@ 0x0000000A) Input capture 4 prescaler                                  */
        __IOM uint32_t IC4F     : 4;            /*!< (@ 0x0000000C) Input capture 4 filter                                     */
      } bit;
    } CCMR2_Input;
  };

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) capture/compare enable register                            */

    struct {
      __IOM uint32_t CC1E       : 1;            /*!< (@ 0x00000000) Capture/Compare 1 output enable                            */
      __IOM uint32_t CC1P       : 1;            /*!< (@ 0x00000001) Capture/Compare 1 output Polarity                          */
      __IOM uint32_t CC1NE      : 1;            /*!< (@ 0x00000002) Capture/Compare 1 complementary output enable              */
      __IOM uint32_t CC1NP      : 1;            /*!< (@ 0x00000003) Capture/Compare 1 output Polarity                          */
      __IOM uint32_t CC2E       : 1;            /*!< (@ 0x00000004) Capture/Compare 2 output enable                            */
      __IOM uint32_t CC2P       : 1;            /*!< (@ 0x00000005) Capture/Compare 2 output Polarity                          */
      __IOM uint32_t CC2NE      : 1;            /*!< (@ 0x00000006) Capture/Compare 2 complementary output enable              */
      __IOM uint32_t CC2NP      : 1;            /*!< (@ 0x00000007) Capture/Compare 2 output Polarity                          */
      __IOM uint32_t CC3E       : 1;            /*!< (@ 0x00000008) Capture/Compare 3 output enable                            */
      __IOM uint32_t CC3P       : 1;            /*!< (@ 0x00000009) Capture/Compare 3 output Polarity                          */
      __IOM uint32_t CC3NE      : 1;            /*!< (@ 0x0000000A) Capture/Compare 3 complementary output enable              */
      __IOM uint32_t CC3NP      : 1;            /*!< (@ 0x0000000B) Capture/Compare 3 output Polarity                          */
      __IOM uint32_t CC4E       : 1;            /*!< (@ 0x0000000C) Capture/Compare 4 output enable                            */
      __IOM uint32_t CC4P       : 1;            /*!< (@ 0x0000000D) Capture/Compare 3 output Polarity                          */
    } bit;
  } CCER;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000024) counter                                                    */

    struct {
      __IOM uint32_t CNT        : 16;           /*!< (@ 0x00000000) counter value                                              */
    } bit;
  } CNT;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000028) prescaler                                                  */

    struct {
      __IOM uint32_t PSC        : 16;           /*!< (@ 0x00000000) Prescaler value                                            */
    } bit;
  } PSC;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000002C) auto-reload register                                       */

    struct {
      __IOM uint32_t ARR        : 16;           /*!< (@ 0x00000000) Auto-reload value                                          */
    } bit;
  } ARR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000030) repetition counter register                                */

    struct {
      __IOM uint32_t REP        : 8;            /*!< (@ 0x00000000) Repetition counter value                                   */
    } bit;
  } RCR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000034) capture/compare register 1                                 */

    struct {
      __IOM uint32_t CCR1       : 16;           /*!< (@ 0x00000000) Capture/Compare 1 value                                    */
    } bit;
  } CCR1;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000038) capture/compare register 2                                 */

    struct {
      __IOM uint32_t CCR2       : 16;           /*!< (@ 0x00000000) Capture/Compare 2 value                                    */
    } bit;
  } CCR2;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000003C) capture/compare register 3                                 */

    struct {
      __IOM uint32_t CCR3       : 16;           /*!< (@ 0x00000000) Capture/Compare value                                      */
    } bit;
  } CCR3;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000040) capture/compare register 4                                 */

    struct {
      __IOM uint32_t CCR4       : 16;           /*!< (@ 0x00000000) Capture/Compare value                                      */
    } bit;
  } CCR4;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000044) break and dead-time register                               */

    struct {
      __IOM uint32_t DTG        : 8;            /*!< (@ 0x00000000) Dead-time generator setup                                  */
      __IOM uint32_t LOCK       : 2;            /*!< (@ 0x00000008) Lock configuration                                         */
      __IOM uint32_t OSSI       : 1;            /*!< (@ 0x0000000A) Off-state selection for Idle mode                          */
      __IOM uint32_t OSSR       : 1;            /*!< (@ 0x0000000B) Off-state selection for Run mode                           */
      __IOM uint32_t BKE        : 1;            /*!< (@ 0x0000000C) Break enable                                               */
      __IOM uint32_t BKP        : 1;            /*!< (@ 0x0000000D) Break polarity                                             */
      __IOM uint32_t AOE        : 1;            /*!< (@ 0x0000000E) Automatic output enable                                    */
      __IOM uint32_t MOE        : 1;            /*!< (@ 0x0000000F) Main output enable                                         */
    } bit;
  } BDTR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000048) DMA control register                                       */

    struct {
      __IOM uint32_t DBA        : 5;            /*!< (@ 0x00000000) DMA base address                                           */
      __IM  uint32_t            : 3;
      __IOM uint32_t DBL        : 5;            /*!< (@ 0x00000008) DMA burst length                                           */
    } bit;
  } DCR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000004C) DMA address for full transfer                              */

    struct {
      __IOM uint32_t DMAB       : 16;           /*!< (@ 0x00000000) DMA register for burst accesses                            */
    } bit;
  } DMAR;
} TIM1_Type;                                    /*!< Size = 80 (0x50)                                                          */



/* =========================================================================================================================== */
/* ================                                           TIM2                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief General purpose timer (TIM2)
  */

typedef struct {                                /*!< (@ 0x40000000) TIM2 Structure                                             */

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) control register 1                                         */

    struct {
      __IOM uint32_t CEN        : 1;            /*!< (@ 0x00000000) Counter enable                                             */
      __IOM uint32_t UDIS       : 1;            /*!< (@ 0x00000001) Update disable                                             */
      __IOM uint32_t URS        : 1;            /*!< (@ 0x00000002) Update request source                                      */
      __IOM uint32_t OPM        : 1;            /*!< (@ 0x00000003) One-pulse mode                                             */
      __IOM uint32_t DIR        : 1;            /*!< (@ 0x00000004) Direction                                                  */
      __IOM uint32_t CMS        : 2;            /*!< (@ 0x00000005) Center-aligned mode selection                              */
      __IOM uint32_t ARPE       : 1;            /*!< (@ 0x00000007) Auto-reload preload enable                                 */
      __IOM uint32_t CKD        : 2;            /*!< (@ 0x00000008) Clock division                                             */
    } bit;
  } CR1;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000004) control register 2                                         */

    struct {
      __IM  uint32_t            : 3;
      __IOM uint32_t CCDS       : 1;            /*!< (@ 0x00000003) Capture/compare DMA selection                              */
      __IOM uint32_t MMS        : 3;            /*!< (@ 0x00000004) Master mode selection                                      */
      __IOM uint32_t TI1S       : 1;            /*!< (@ 0x00000007) TI1 selection                                              */
    } bit;
  } CR2;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000008) slave mode control register                                */

    struct {
      __IOM uint32_t SMS        : 3;            /*!< (@ 0x00000000) Slave mode selection                                       */
      __IM  uint32_t            : 1;
      __IOM uint32_t TS         : 3;            /*!< (@ 0x00000004) Trigger selection                                          */
      __IOM uint32_t MSM        : 1;            /*!< (@ 0x00000007) Master/Slave mode                                          */
      __IOM uint32_t ETF        : 4;            /*!< (@ 0x00000008) External trigger filter                                    */
      __IOM uint32_t ETPS       : 2;            /*!< (@ 0x0000000C) External trigger prescaler                                 */
      __IOM uint32_t ECE        : 1;            /*!< (@ 0x0000000E) External clock enable                                      */
      __IOM uint32_t ETP        : 1;            /*!< (@ 0x0000000F) External trigger polarity                                  */
    } bit;
  } SMCR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000000C) DMA/Interrupt enable register                              */

    struct {
      __IOM uint32_t UIE        : 1;            /*!< (@ 0x00000000) Update interrupt enable                                    */
      __IOM uint32_t CC1IE      : 1;            /*!< (@ 0x00000001) Capture/Compare 1 interrupt enable                         */
      __IOM uint32_t CC2IE      : 1;            /*!< (@ 0x00000002) Capture/Compare 2 interrupt enable                         */
      __IOM uint32_t CC3IE      : 1;            /*!< (@ 0x00000003) Capture/Compare 3 interrupt enable                         */
      __IOM uint32_t CC4IE      : 1;            /*!< (@ 0x00000004) Capture/Compare 4 interrupt enable                         */
      __IM  uint32_t            : 1;
      __IOM uint32_t TIE        : 1;            /*!< (@ 0x00000006) Trigger interrupt enable                                   */
      __IM  uint32_t            : 1;
      __IOM uint32_t UDE        : 1;            /*!< (@ 0x00000008) Update DMA request enable                                  */
      __IOM uint32_t CC1DE      : 1;            /*!< (@ 0x00000009) Capture/Compare 1 DMA request enable                       */
      __IOM uint32_t CC2DE      : 1;            /*!< (@ 0x0000000A) Capture/Compare 2 DMA request enable                       */
      __IOM uint32_t CC3DE      : 1;            /*!< (@ 0x0000000B) Capture/Compare 3 DMA request enable                       */
      __IOM uint32_t CC4DE      : 1;            /*!< (@ 0x0000000C) Capture/Compare 4 DMA request enable                       */
      __IM  uint32_t            : 1;
      __IOM uint32_t TDE        : 1;            /*!< (@ 0x0000000E) Trigger DMA request enable                                 */
    } bit;
  } DIER;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) status register                                            */

    struct {
      __IOM uint32_t UIF        : 1;            /*!< (@ 0x00000000) Update interrupt flag                                      */
      __IOM uint32_t CC1IF      : 1;            /*!< (@ 0x00000001) Capture/compare 1 interrupt flag                           */
      __IOM uint32_t CC2IF      : 1;            /*!< (@ 0x00000002) Capture/Compare 2 interrupt flag                           */
      __IOM uint32_t CC3IF      : 1;            /*!< (@ 0x00000003) Capture/Compare 3 interrupt flag                           */
      __IOM uint32_t CC4IF      : 1;            /*!< (@ 0x00000004) Capture/Compare 4 interrupt flag                           */
      __IM  uint32_t            : 1;
      __IOM uint32_t TIF        : 1;            /*!< (@ 0x00000006) Trigger interrupt flag                                     */
      __IM  uint32_t            : 2;
      __IOM uint32_t CC1OF      : 1;            /*!< (@ 0x00000009) Capture/Compare 1 overcapture flag                         */
      __IOM uint32_t CC2OF      : 1;            /*!< (@ 0x0000000A) Capture/compare 2 overcapture flag                         */
      __IOM uint32_t CC3OF      : 1;            /*!< (@ 0x0000000B) Capture/Compare 3 overcapture flag                         */
      __IOM uint32_t CC4OF      : 1;            /*!< (@ 0x0000000C) Capture/Compare 4 overcapture flag                         */
    } bit;
  } SR;

  union {
    __OM  uint32_t reg;                         /*!< (@ 0x00000014) event generation register                                  */

    struct {
      __OM  uint32_t UG         : 1;            /*!< (@ 0x00000000) Update generation                                          */
      __OM  uint32_t CC1G       : 1;            /*!< (@ 0x00000001) Capture/compare 1 generation                               */
      __OM  uint32_t CC2G       : 1;            /*!< (@ 0x00000002) Capture/compare 2 generation                               */
      __OM  uint32_t CC3G       : 1;            /*!< (@ 0x00000003) Capture/compare 3 generation                               */
      __OM  uint32_t CC4G       : 1;            /*!< (@ 0x00000004) Capture/compare 4 generation                               */
      __IM  uint32_t            : 1;
      __OM  uint32_t TG         : 1;            /*!< (@ 0x00000006) Trigger generation                                         */
    } bit;
  } EGR;

  union {
    union {
      __IOM uint32_t reg;                       /*!< (@ 0x00000018) capture/compare mode register 1 (output mode)              */

      struct {
        __IOM uint32_t CC1S     : 2;            /*!< (@ 0x00000000) Capture/Compare 1 selection                                */
        __IOM uint32_t OC1FE    : 1;            /*!< (@ 0x00000002) Output compare 1 fast enable                               */
        __IOM uint32_t OC1PE    : 1;            /*!< (@ 0x00000003) Output compare 1 preload enable                            */
        __IOM uint32_t OC1M     : 3;            /*!< (@ 0x00000004) Output compare 1 mode                                      */
        __IOM uint32_t OC1CE    : 1;            /*!< (@ 0x00000007) Output compare 1 clear enable                              */
        __IOM uint32_t CC2S     : 2;            /*!< (@ 0x00000008) Capture/Compare 2 selection                                */
        __IOM uint32_t OC2FE    : 1;            /*!< (@ 0x0000000A) Output compare 2 fast enable                               */
        __IOM uint32_t OC2PE    : 1;            /*!< (@ 0x0000000B) Output compare 2 preload enable                            */
        __IOM uint32_t OC2M     : 3;            /*!< (@ 0x0000000C) Output compare 2 mode                                      */
        __IOM uint32_t OC2CE    : 1;            /*!< (@ 0x0000000F) Output compare 2 clear enable                              */
      } bit;
    } CCMR1_Output;

    union {
      __IOM uint32_t reg;                       /*!< (@ 0x00000018) capture/compare mode register 1 (input mode)               */

      struct {
        __IOM uint32_t CC1S     : 2;            /*!< (@ 0x00000000) Capture/Compare 1 selection                                */
        __IOM uint32_t IC1PSC   : 2;            /*!< (@ 0x00000002) Input capture 1 prescaler                                  */
        __IOM uint32_t IC1F     : 4;            /*!< (@ 0x00000004) Input capture 1 filter                                     */
        __IOM uint32_t CC2S     : 2;            /*!< (@ 0x00000008) Capture/compare 2 selection                                */
        __IOM uint32_t IC2PSC   : 2;            /*!< (@ 0x0000000A) Input capture 2 prescaler                                  */
        __IOM uint32_t IC2F     : 4;            /*!< (@ 0x0000000C) Input capture 2 filter                                     */
      } bit;
    } CCMR1_Input;
  };

  union {
    union {
      __IOM uint32_t reg;                       /*!< (@ 0x0000001C) capture/compare mode register 2 (output mode)              */

      struct {
        __IOM uint32_t CC3S     : 2;            /*!< (@ 0x00000000) Capture/Compare 3 selection                                */
        __IOM uint32_t OC3FE    : 1;            /*!< (@ 0x00000002) Output compare 3 fast enable                               */
        __IOM uint32_t OC3PE    : 1;            /*!< (@ 0x00000003) Output compare 3 preload enable                            */
        __IOM uint32_t OC3M     : 3;            /*!< (@ 0x00000004) Output compare 3 mode                                      */
        __IOM uint32_t OC3CE    : 1;            /*!< (@ 0x00000007) Output compare 3 clear enable                              */
        __IOM uint32_t CC4S     : 2;            /*!< (@ 0x00000008) Capture/Compare 4 selection                                */
        __IOM uint32_t OC4FE    : 1;            /*!< (@ 0x0000000A) Output compare 4 fast enable                               */
        __IOM uint32_t OC4PE    : 1;            /*!< (@ 0x0000000B) Output compare 4 preload enable                            */
        __IOM uint32_t OC4M     : 3;            /*!< (@ 0x0000000C) Output compare 4 mode                                      */
        __IOM uint32_t O24CE    : 1;            /*!< (@ 0x0000000F) Output compare 4 clear enable                              */
      } bit;
    } CCMR2_Output;

    union {
      __IOM uint32_t reg;                       /*!< (@ 0x0000001C) capture/compare mode register 2 (input mode)               */

      struct {
        __IOM uint32_t CC3S     : 2;            /*!< (@ 0x00000000) Capture/Compare 3 selection                                */
        __IOM uint32_t IC3PSC   : 2;            /*!< (@ 0x00000002) Input capture 3 prescaler                                  */
        __IOM uint32_t IC3F     : 4;            /*!< (@ 0x00000004) Input capture 3 filter                                     */
        __IOM uint32_t CC4S     : 2;            /*!< (@ 0x00000008) Capture/Compare 4 selection                                */
        __IOM uint32_t IC4PSC   : 2;            /*!< (@ 0x0000000A) Input capture 4 prescaler                                  */
        __IOM uint32_t IC4F     : 4;            /*!< (@ 0x0000000C) Input capture 4 filter                                     */
      } bit;
    } CCMR2_Input;
  };

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) capture/compare enable register                            */

    struct {
      __IOM uint32_t CC1E       : 1;            /*!< (@ 0x00000000) Capture/Compare 1 output enable                            */
      __IOM uint32_t CC1P       : 1;            /*!< (@ 0x00000001) Capture/Compare 1 output Polarity                          */
      __IM  uint32_t            : 2;
      __IOM uint32_t CC2E       : 1;            /*!< (@ 0x00000004) Capture/Compare 2 output enable                            */
      __IOM uint32_t CC2P       : 1;            /*!< (@ 0x00000005) Capture/Compare 2 output Polarity                          */
      __IM  uint32_t            : 2;
      __IOM uint32_t CC3E       : 1;            /*!< (@ 0x00000008) Capture/Compare 3 output enable                            */
      __IOM uint32_t CC3P       : 1;            /*!< (@ 0x00000009) Capture/Compare 3 output Polarity                          */
      __IM  uint32_t            : 2;
      __IOM uint32_t CC4E       : 1;            /*!< (@ 0x0000000C) Capture/Compare 4 output enable                            */
      __IOM uint32_t CC4P       : 1;            /*!< (@ 0x0000000D) Capture/Compare 3 output Polarity                          */
    } bit;
  } CCER;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000024) counter                                                    */

    struct {
      __IOM uint32_t CNT        : 16;           /*!< (@ 0x00000000) counter value                                              */
    } bit;
  } CNT;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000028) prescaler                                                  */

    struct {
      __IOM uint32_t PSC        : 16;           /*!< (@ 0x00000000) Prescaler value                                            */
    } bit;
  } PSC;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000002C) auto-reload register                                       */

    struct {
      __IOM uint32_t ARR        : 16;           /*!< (@ 0x00000000) Auto-reload value                                          */
    } bit;
  } ARR;
  __IM  uint32_t  RESERVED;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000034) capture/compare register 1                                 */

    struct {
      __IOM uint32_t CCR1       : 16;           /*!< (@ 0x00000000) Capture/Compare 1 value                                    */
    } bit;
  } CCR1;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000038) capture/compare register 2                                 */

    struct {
      __IOM uint32_t CCR2       : 16;           /*!< (@ 0x00000000) Capture/Compare 2 value                                    */
    } bit;
  } CCR2;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000003C) capture/compare register 3                                 */

    struct {
      __IOM uint32_t CCR3       : 16;           /*!< (@ 0x00000000) Capture/Compare value                                      */
    } bit;
  } CCR3;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000040) capture/compare register 4                                 */

    struct {
      __IOM uint32_t CCR4       : 16;           /*!< (@ 0x00000000) Capture/Compare value                                      */
    } bit;
  } CCR4;

  __IM  uint32_t  RESERVED1;

   union {
     __IOM uint32_t reg;                         /*!< (@ 0x00000048) DMA control register                                       */

     struct {
       __IOM uint32_t DBA        : 5;            /*!< (@ 0x00000000) DMA base address                                           */
       __IM  uint32_t            : 3;
       __IOM uint32_t DBL        : 5;            /*!< (@ 0x00000008) DMA burst length                                           */
     } bit;
   } DCR;

   union {
     __IOM uint32_t reg;                         /*!< (@ 0x0000004C) DMA address for full transfer                              */

     struct {
       __IOM uint32_t DMAB       : 16;           /*!< (@ 0x00000000) DMA register for burst accesses                            */
     } bit;
   } DMAR;

} TIM2_Type;                                    /*!< Size = 80 (0x50)                                                          */



/* =========================================================================================================================== */
/* ================                                           TIM9                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief General purpose timer (TIM9)
  */

typedef struct {                                /*!< (@ 0x40014C00) TIM9 Structure                                             */

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) control register 1                                         */

    struct {
      __IOM uint32_t CEN        : 1;            /*!< (@ 0x00000000) Counter enable                                             */
      __IOM uint32_t UDIS       : 1;            /*!< (@ 0x00000001) Update disable                                             */
      __IOM uint32_t URS        : 1;            /*!< (@ 0x00000002) Update request source                                      */
      __IOM uint32_t OPM        : 1;            /*!< (@ 0x00000003) One-pulse mode                                             */
      __IM  uint32_t            : 3;
      __IOM uint32_t ARPE       : 1;            /*!< (@ 0x00000007) Auto-reload preload enable                                 */
      __IOM uint32_t CKD        : 2;            /*!< (@ 0x00000008) Clock division                                             */
    } bit;
  } CR1;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000004) control register 2                                         */

    struct {
      __IM  uint32_t            : 4;
      __IOM uint32_t MMS        : 3;            /*!< (@ 0x00000004) Master mode selection                                      */
    } bit;
  } CR2;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000008) slave mode control register                                */

    struct {
      __IOM uint32_t SMS        : 3;            /*!< (@ 0x00000000) Slave mode selection                                       */
      __IM  uint32_t            : 1;
      __IOM uint32_t TS         : 3;            /*!< (@ 0x00000004) Trigger selection                                          */
      __IOM uint32_t MSM        : 1;            /*!< (@ 0x00000007) Master/Slave mode                                          */
    } bit;
  } SMCR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000000C) DMA/Interrupt enable register                              */

    struct {
      __IOM uint32_t UIE        : 1;            /*!< (@ 0x00000000) Update interrupt enable                                    */
      __IOM uint32_t CC1IE      : 1;            /*!< (@ 0x00000001) Capture/Compare 1 interrupt enable                         */
      __IOM uint32_t CC2IE      : 1;            /*!< (@ 0x00000002) Capture/Compare 2 interrupt enable                         */
      __IM  uint32_t            : 3;
      __IOM uint32_t TIE        : 1;            /*!< (@ 0x00000006) Trigger interrupt enable                                   */
    } bit;
  } DIER;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) status register                                            */

    struct {
      __IOM uint32_t UIF        : 1;            /*!< (@ 0x00000000) Update interrupt flag                                      */
      __IOM uint32_t CC1IF      : 1;            /*!< (@ 0x00000001) Capture/compare 1 interrupt flag                           */
      __IOM uint32_t CC2IF      : 1;            /*!< (@ 0x00000002) Capture/Compare 2 interrupt flag                           */
      __IM  uint32_t            : 3;
      __IOM uint32_t TIF        : 1;            /*!< (@ 0x00000006) Trigger interrupt flag                                     */
      __IM  uint32_t            : 2;
      __IOM uint32_t CC1OF      : 1;            /*!< (@ 0x00000009) Capture/Compare 1 overcapture flag                         */
      __IOM uint32_t CC2OF      : 1;            /*!< (@ 0x0000000A) Capture/compare 2 overcapture flag                         */
    } bit;
  } SR;

  union {
    __OM  uint32_t reg;                         /*!< (@ 0x00000014) event generation register                                  */

    struct {
      __OM  uint32_t UG         : 1;            /*!< (@ 0x00000000) Update generation                                          */
      __OM  uint32_t CC1G       : 1;            /*!< (@ 0x00000001) Capture/compare 1 generation                               */
      __OM  uint32_t CC2G       : 1;            /*!< (@ 0x00000002) Capture/compare 2 generation                               */
      __IM  uint32_t            : 3;
      __OM  uint32_t TG         : 1;            /*!< (@ 0x00000006) Trigger generation                                         */
    } bit;
  } EGR;

  union {
    union {
      __IOM uint32_t reg;                       /*!< (@ 0x00000018) capture/compare mode register 1 (output mode)              */

      struct {
        __IOM uint32_t CC1S     : 2;            /*!< (@ 0x00000000) Capture/Compare 1 selection                                */
        __IOM uint32_t OC1FE    : 1;            /*!< (@ 0x00000002) Output Compare 1 fast enable                               */
        __IOM uint32_t OC1PE    : 1;            /*!< (@ 0x00000003) Output Compare 1 preload enable                            */
        __IOM uint32_t OC1M     : 3;            /*!< (@ 0x00000004) Output Compare 1 mode                                      */
        __IM  uint32_t          : 1;
        __IOM uint32_t CC2S     : 2;            /*!< (@ 0x00000008) Capture/Compare 2 selection                                */
        __IOM uint32_t OC2FE    : 1;            /*!< (@ 0x0000000A) Output Compare 2 fast enable                               */
        __IOM uint32_t OC2PE    : 1;            /*!< (@ 0x0000000B) Output Compare 2 preload enable                            */
        __IOM uint32_t OC2M     : 3;            /*!< (@ 0x0000000C) Output Compare 2 mode                                      */
      } bit;
    } CCMR1_Output;

    union {
      __IOM uint32_t reg;                       /*!< (@ 0x00000018) capture/compare mode register 1 (input mode)               */

      struct {
        __IOM uint32_t CC1S     : 2;            /*!< (@ 0x00000000) Capture/Compare 1 selection                                */
        __IOM uint32_t IC1PSC   : 2;            /*!< (@ 0x00000002) Input capture 1 prescaler                                  */
        __IOM uint32_t IC1F     : 4;            /*!< (@ 0x00000004) Input capture 1 filter                                     */
        __IOM uint32_t CC2S     : 2;            /*!< (@ 0x00000008) Capture/Compare 2 selection                                */
        __IOM uint32_t IC2PSC   : 2;            /*!< (@ 0x0000000A) Input capture 2 prescaler                                  */
        __IOM uint32_t IC2F     : 4;            /*!< (@ 0x0000000C) Input capture 2 filter                                     */
      } bit;
    } CCMR1_Input;
  };
  __IM  uint32_t  RESERVED;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) capture/compare enable register                            */

    struct {
      __IOM uint32_t CC1E       : 1;            /*!< (@ 0x00000000) Capture/Compare 1 output enable                            */
      __IOM uint32_t CC1P       : 1;            /*!< (@ 0x00000001) Capture/Compare 1 output Polarity                          */
      __IM  uint32_t            : 1;
      __IOM uint32_t CC1NP      : 1;            /*!< (@ 0x00000003) Capture/Compare 1 output Polarity                          */
      __IOM uint32_t CC2E       : 1;            /*!< (@ 0x00000004) Capture/Compare 2 output enable                            */
      __IOM uint32_t CC2P       : 1;            /*!< (@ 0x00000005) Capture/Compare 2 output Polarity                          */
      __IM  uint32_t            : 1;
      __IOM uint32_t CC2NP      : 1;            /*!< (@ 0x00000007) Capture/Compare 2 output Polarity                          */
    } bit;
  } CCER;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000024) counter                                                    */

    struct {
      __IOM uint32_t CNT        : 16;           /*!< (@ 0x00000000) counter value                                              */
    } bit;
  } CNT;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000028) prescaler                                                  */

    struct {
      __IOM uint32_t PSC        : 16;           /*!< (@ 0x00000000) Prescaler value                                            */
    } bit;
  } PSC;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000002C) auto-reload register                                       */

    struct {
      __IOM uint32_t ARR        : 16;           /*!< (@ 0x00000000) Auto-reload value                                          */
    } bit;
  } ARR;
  __IM  uint32_t  RESERVED1;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000034) capture/compare register 1                                 */

    struct {
      __IOM uint32_t CCR1       : 16;           /*!< (@ 0x00000000) Capture/Compare 1 value                                    */
    } bit;
  } CCR1;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000038) capture/compare register 2                                 */

    struct {
      __IOM uint32_t CCR2       : 16;           /*!< (@ 0x00000000) Capture/Compare 2 value                                    */
    } bit;
  } CCR2;
} TIM9_Type;                                    /*!< Size = 60 (0x3c)                                                          */



/* =========================================================================================================================== */
/* ================                                           TIM10                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief General purpose timer (TIM10)
  */

typedef struct {                                /*!< (@ 0x40015000) TIM10 Structure                                            */

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) control register 1                                         */

    struct {
      __IOM uint32_t CEN        : 1;            /*!< (@ 0x00000000) Counter enable                                             */
      __IOM uint32_t UDIS       : 1;            /*!< (@ 0x00000001) Update disable                                             */
      __IOM uint32_t URS        : 1;            /*!< (@ 0x00000002) Update request source                                      */
      __IM  uint32_t            : 4;
      __IOM uint32_t ARPE       : 1;            /*!< (@ 0x00000007) Auto-reload preload enable                                 */
      __IOM uint32_t CKD        : 2;            /*!< (@ 0x00000008) Clock division                                             */
    } bit;
  } CR1;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000004) control register 2                                         */

    struct {
      __IM  uint32_t            : 4;
      __IOM uint32_t MMS        : 3;            /*!< (@ 0x00000004) Master mode selection                                      */
    } bit;
  } CR2;
  __IM  uint32_t  RESERVED;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000000C) DMA/Interrupt enable register                              */

    struct {
      __IOM uint32_t UIE        : 1;            /*!< (@ 0x00000000) Update interrupt enable                                    */
      __IOM uint32_t CC1IE      : 1;            /*!< (@ 0x00000001) Capture/Compare 1 interrupt enable                         */
    } bit;
  } DIER;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) status register                                            */

    struct {
      __IOM uint32_t UIF        : 1;            /*!< (@ 0x00000000) Update interrupt flag                                      */
      __IOM uint32_t CC1IF      : 1;            /*!< (@ 0x00000001) Capture/compare 1 interrupt flag                           */
      __IM  uint32_t            : 7;
      __IOM uint32_t CC1OF      : 1;            /*!< (@ 0x00000009) Capture/Compare 1 overcapture flag                         */
    } bit;
  } SR;

  union {
    __OM  uint32_t reg;                         /*!< (@ 0x00000014) event generation register                                  */

    struct {
      __OM  uint32_t UG         : 1;            /*!< (@ 0x00000000) Update generation                                          */
      __OM  uint32_t CC1G       : 1;            /*!< (@ 0x00000001) Capture/compare 1 generation                               */
    } bit;
  } EGR;

  union {
    union {
      __IOM uint32_t reg;                       /*!< (@ 0x00000018) capture/compare mode register (output mode)                */

      struct {
        __IOM uint32_t CC1S     : 2;            /*!< (@ 0x00000000) Capture/Compare 1 selection                                */
        __IM  uint32_t          : 1;
        __IOM uint32_t OC1PE    : 1;            /*!< (@ 0x00000003) Output Compare 1 preload enable                            */
        __IOM uint32_t OC1M     : 3;            /*!< (@ 0x00000004) Output Compare 1 mode                                      */
      } bit;
    } CCMR1_Output;

    union {
      __IOM uint32_t reg;                       /*!< (@ 0x00000018) capture/compare mode register (input mode)                 */

      struct {
        __IOM uint32_t CC1S     : 2;            /*!< (@ 0x00000000) Capture/Compare 1 selection                                */
        __IOM uint32_t IC1PSC   : 2;            /*!< (@ 0x00000002) Input capture 1 prescaler                                  */
        __IOM uint32_t IC1F     : 4;            /*!< (@ 0x00000004) Input capture 1 filter                                     */
      } bit;
    } CCMR1_Input;
  };
  __IM  uint32_t  RESERVED1;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) capture/compare enable register                            */

    struct {
      __IOM uint32_t CC1E       : 1;            /*!< (@ 0x00000000) Capture/Compare 1 output enable                            */
      __IOM uint32_t CC1P       : 1;            /*!< (@ 0x00000001) Capture/Compare 1 output Polarity                          */
      __IM  uint32_t            : 1;
      __IOM uint32_t CC1NP      : 1;            /*!< (@ 0x00000003) Capture/Compare 1 output Polarity                          */
    } bit;
  } CCER;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000024) counter                                                    */

    struct {
      __IOM uint32_t CNT        : 16;           /*!< (@ 0x00000000) counter value                                              */
    } bit;
  } CNT;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000028) prescaler                                                  */

    struct {
      __IOM uint32_t PSC        : 16;           /*!< (@ 0x00000000) Prescaler value                                            */
    } bit;
  } PSC;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000002C) auto-reload register                                       */

    struct {
      __IOM uint32_t ARR        : 16;           /*!< (@ 0x00000000) Auto-reload value                                          */
    } bit;
  } ARR;
  __IM  uint32_t  RESERVED2;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000034) capture/compare register 1                                 */

    struct {
      __IOM uint32_t CCR1       : 16;           /*!< (@ 0x00000000) Capture/Compare 1 value                                    */
    } bit;
  } CCR1;
} TIM10_Type;                                   /*!< Size = 56 (0x38)                                                          */



/* =========================================================================================================================== */
/* ================                                           TIM6                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Basic timer (TIM6)
  */

typedef struct {                                /*!< (@ 0x40001000) TIM6 Structure                                             */

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) control register 1                                         */

    struct {
      __IOM uint32_t CEN        : 1;            /*!< (@ 0x00000000) Counter enable                                             */
      __IOM uint32_t UDIS       : 1;            /*!< (@ 0x00000001) Update disable                                             */
      __IOM uint32_t URS        : 1;            /*!< (@ 0x00000002) Update request source                                      */
      __IOM uint32_t OPM        : 1;            /*!< (@ 0x00000003) One-pulse mode                                             */
      __IM  uint32_t            : 3;
      __IOM uint32_t ARPE       : 1;            /*!< (@ 0x00000007) Auto-reload preload enable                                 */
    } bit;
  } CR1;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000004) control register 2                                         */

    struct {
      __IM  uint32_t            : 4;
      __IOM uint32_t MMS        : 3;            /*!< (@ 0x00000004) Master mode selection                                      */
    } bit;
  } CR2;
  __IM  uint32_t  RESERVED;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000000C) DMA/Interrupt enable register                              */

    struct {
      __IOM uint32_t UIE        : 1;            /*!< (@ 0x00000000) Update interrupt enable                                    */
      __IM  uint32_t            : 7;
      __IOM uint32_t UDE        : 1;            /*!< (@ 0x00000008) Update DMA request enable                                  */
    } bit;
  } DIER;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) status register                                            */

    struct {
      __IOM uint32_t UIF        : 1;            /*!< (@ 0x00000000) Update interrupt flag                                      */
    } bit;
  } SR;

  union {
    __OM  uint32_t reg;                         /*!< (@ 0x00000014) event generation register                                  */

    struct {
      __OM  uint32_t UG         : 1;            /*!< (@ 0x00000000) Update generation                                          */
    } bit;
  } EGR;
  __IM  uint32_t  RESERVED1[3];

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000024) counter                                                    */

    struct {
      __IOM uint32_t CNT        : 16;           /*!< (@ 0x00000000) Low counter value                                          */
    } bit;
  } CNT;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000028) prescaler                                                  */

    struct {
      __IOM uint32_t PSC        : 16;           /*!< (@ 0x00000000) Prescaler value                                            */
    } bit;
  } PSC;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000002C) auto-reload register                                       */

    struct {
      __IOM uint32_t ARR        : 16;           /*!< (@ 0x00000000) Low Auto-reload value                                      */
    } bit;
  } ARR;
} TIM6_Type;                                    /*!< Size = 48 (0x30)                                                          */



/* =========================================================================================================================== */
/* ================                                           I2C1                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Inter integrated circuit (I2C1)
  */

typedef struct {                                /*!< (@ 0x40005400) I2C1 Structure                                             */

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Control register 1                                         */

    struct {
      __IOM uint32_t PE         : 1;            /*!< (@ 0x00000000) Peripheral enable                                          */
      __IOM uint32_t SMBUS      : 1;            /*!< (@ 0x00000001) SMBus mode                                                 */
      __IM  uint32_t            : 1;
      __IOM uint32_t SMBTYPE    : 1;            /*!< (@ 0x00000003) SMBus type                                                 */
      __IOM uint32_t ENARP      : 1;            /*!< (@ 0x00000004) ARP enable                                                 */
      __IOM uint32_t ENPEC      : 1;            /*!< (@ 0x00000005) PEC enable                                                 */
      __IOM uint32_t ENGC       : 1;            /*!< (@ 0x00000006) General call enable                                        */
      __IOM uint32_t NOSTRETCH  : 1;            /*!< (@ 0x00000007) Clock stretching disable (Slave mode)                      */
      __IOM uint32_t START      : 1;            /*!< (@ 0x00000008) Start generation                                           */
      __IOM uint32_t STOP       : 1;            /*!< (@ 0x00000009) Stop generation                                            */
      __IOM uint32_t ACK        : 1;            /*!< (@ 0x0000000A) Acknowledge enable                                         */
      __IOM uint32_t POS        : 1;            /*!< (@ 0x0000000B) Acknowledge/PEC Position (for data reception)              */
      __IOM uint32_t PEC        : 1;            /*!< (@ 0x0000000C) Packet error checking                                      */
      __IOM uint32_t ALERT      : 1;            /*!< (@ 0x0000000D) SMBus alert                                                */
      __IM  uint32_t            : 1;
      __IOM uint32_t SWRST      : 1;            /*!< (@ 0x0000000F) Software reset                                             */
    } bit;
  } CR1;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000004) Control register 2                                         */

    struct {
      __IOM uint32_t FREQ       : 6;            /*!< (@ 0x00000000) Peripheral clock frequency                                 */
      __IM  uint32_t            : 2;
      __IOM uint32_t ITERREN    : 1;            /*!< (@ 0x00000008) Error interrupt enable                                     */
      __IOM uint32_t ITEVTEN    : 1;            /*!< (@ 0x00000009) Event interrupt enable                                     */
      __IOM uint32_t ITBUFEN    : 1;            /*!< (@ 0x0000000A) Buffer interrupt enable                                    */
      __IOM uint32_t DMAEN      : 1;            /*!< (@ 0x0000000B) DMA requests enable                                        */
      __IOM uint32_t LAST       : 1;            /*!< (@ 0x0000000C) DMA last transfer                                          */
    } bit;
  } CR2;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000008) Own address register 1                                     */

    struct {
      __IOM uint32_t ADD0       : 1;            /*!< (@ 0x00000000) Interface address                                          */
      __IOM uint32_t ADD7       : 7;            /*!< (@ 0x00000001) Interface address                                          */
      __IOM uint32_t ADD10      : 2;            /*!< (@ 0x00000008) Interface address                                          */
      __IM  uint32_t            : 5;
      __IOM uint32_t ADDMODE    : 1;            /*!< (@ 0x0000000F) Addressing mode (slave mode)                               */
    } bit;
  } OAR1;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000000C) Own address register 2                                     */

    struct {
      __IOM uint32_t ENDUAL     : 1;            /*!< (@ 0x00000000) Dual addressing mode enable                                */
      __IOM uint32_t ADD2       : 7;            /*!< (@ 0x00000001) Interface address                                          */
    } bit;
  } OAR2;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) Data register                                              */

    struct {
      __IOM uint32_t DR         : 8;            /*!< (@ 0x00000000) 8-bit data register                                        */
    } bit;
  } DR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000014) Status register 1                                          */

    struct {
      __IM  uint32_t SB         : 1;            /*!< (@ 0x00000000) Start bit (Master mode)                                    */
      __IM  uint32_t ADDR       : 1;            /*!< (@ 0x00000001) Address sent (master mode)/matched (slave mode)            */
      __IM  uint32_t BTF        : 1;            /*!< (@ 0x00000002) Byte transfer finished                                     */
      __IM  uint32_t ADD10      : 1;            /*!< (@ 0x00000003) 10-bit header sent (Master mode)                           */
      __IM  uint32_t STOPF      : 1;            /*!< (@ 0x00000004) Stop detection (slave mode)                                */
      __IM  uint32_t            : 1;
      __IM  uint32_t RxNE       : 1;            /*!< (@ 0x00000006) Data register not empty (receivers)                        */
      __IM  uint32_t TxE        : 1;            /*!< (@ 0x00000007) Data register empty (transmitters)                         */
      __IOM uint32_t BERR       : 1;            /*!< (@ 0x00000008) Bus error                                                  */
      __IOM uint32_t ARLO       : 1;            /*!< (@ 0x00000009) Arbitration lost (master mode)                             */
      __IOM uint32_t AF         : 1;            /*!< (@ 0x0000000A) Acknowledge failure                                        */
      __IOM uint32_t OVR        : 1;            /*!< (@ 0x0000000B) Overrun/Underrun                                           */
      __IOM uint32_t PECERR     : 1;            /*!< (@ 0x0000000C) PEC Error in reception                                     */
      __IM  uint32_t            : 1;
      __IOM uint32_t TIMEOUT    : 1;            /*!< (@ 0x0000000E) Timeout or Tlow error                                      */
      __IOM uint32_t SMBALERT   : 1;            /*!< (@ 0x0000000F) SMBus alert                                                */
    } bit;
  } SR1;

  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000018) Status register 2                                          */

    struct {
      __IM  uint32_t MSL        : 1;            /*!< (@ 0x00000000) Master/slave                                               */
      __IM  uint32_t BUSY       : 1;            /*!< (@ 0x00000001) Bus busy                                                   */
      __IM  uint32_t TRA        : 1;            /*!< (@ 0x00000002) Transmitter/receiver                                       */
      __IM  uint32_t            : 1;
      __IM  uint32_t GENCALL    : 1;            /*!< (@ 0x00000004) General call address (Slave mode)                          */
      __IM  uint32_t SMBDEFAULT : 1;            /*!< (@ 0x00000005) SMBus device default address (Slave mode)                  */
      __IM  uint32_t SMBHOST    : 1;            /*!< (@ 0x00000006) SMBus host header (Slave mode)                             */
      __IM  uint32_t DUALF      : 1;            /*!< (@ 0x00000007) Dual flag (Slave mode)                                     */
      __IM  uint32_t PEC        : 8;            /*!< (@ 0x00000008) acket error checking register                              */
    } bit;
  } SR2;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000001C) Clock control register                                     */

    struct {
      __IOM uint32_t CCR        : 12;           /*!< (@ 0x00000000) Clock control register in Fast/Standard mode
                                                                    (Master mode)                                              */
      __IM  uint32_t            : 2;
      __IOM uint32_t DUTY       : 1;            /*!< (@ 0x0000000E) Fast mode duty cycle                                       */
      __IOM uint32_t F_S        : 1;            /*!< (@ 0x0000000F) I2C master mode selection                                  */
    } bit;
  } CCR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) TRISE register                                             */

    struct {
      __IOM uint32_t TRISE      : 6;            /*!< (@ 0x00000000) Maximum rise time in Fast/Standard mode (Master
                                                                    mode)                                                      */
    } bit;
  } TRISE;
} I2C1_Type;                                    /*!< Size = 36 (0x24)                                                          */



/* =========================================================================================================================== */
/* ================                                           SPI1                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Serial peripheral interface (SPI1)
  */

typedef struct {                                /*!< (@ 0x40013000) SPI1 Structure                                             */

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) control register 1                                         */

    struct {
      __IOM uint32_t CPHA       : 1;            /*!< (@ 0x00000000) Clock phase                                                */
      __IOM uint32_t CPOL       : 1;            /*!< (@ 0x00000001) Clock polarity                                             */
      __IOM uint32_t MSTR       : 1;            /*!< (@ 0x00000002) Master selection                                           */
      __IOM uint32_t BR         : 3;            /*!< (@ 0x00000003) Baud rate control                                          */
      __IOM uint32_t SPE        : 1;            /*!< (@ 0x00000006) SPI enable                                                 */
      __IOM uint32_t LSBFIRST   : 1;            /*!< (@ 0x00000007) Frame format                                               */
      __IOM uint32_t SSI        : 1;            /*!< (@ 0x00000008) Internal slave select                                      */
      __IOM uint32_t SSM        : 1;            /*!< (@ 0x00000009) Software slave management                                  */
      __IOM uint32_t RXONLY     : 1;            /*!< (@ 0x0000000A) Receive only                                               */
      __IOM uint32_t DFF        : 1;            /*!< (@ 0x0000000B) Data frame format                                          */
      __IOM uint32_t CRCNEXT    : 1;            /*!< (@ 0x0000000C) CRC transfer next                                          */
      __IOM uint32_t CRCEN      : 1;            /*!< (@ 0x0000000D) Hardware CRC calculation enable                            */
      __IOM uint32_t BIDIOE     : 1;            /*!< (@ 0x0000000E) Output enable in bidirectional mode                        */
      __IOM uint32_t BIDIMODE   : 1;            /*!< (@ 0x0000000F) Bidirectional data mode enable                             */
    } bit;
  } CR1;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000004) control register 2                                         */

    struct {
      __IOM uint32_t RXDMAEN    : 1;            /*!< (@ 0x00000000) Rx buffer DMA enable                                       */
      __IOM uint32_t TXDMAEN    : 1;            /*!< (@ 0x00000001) Tx buffer DMA enable                                       */
      __IOM uint32_t SSOE       : 1;            /*!< (@ 0x00000002) SS output enable                                           */
      __IM  uint32_t            : 2;
      __IOM uint32_t ERRIE      : 1;            /*!< (@ 0x00000005) Error interrupt enable                                     */
      __IOM uint32_t RXNEIE     : 1;            /*!< (@ 0x00000006) RX buffer not empty interrupt enable                       */
      __IOM uint32_t TXEIE      : 1;            /*!< (@ 0x00000007) Tx buffer empty interrupt enable                           */
    } bit;
  } CR2;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000008) status register                                            */

    struct {
      __IM  uint32_t RXNE       : 1;            /*!< (@ 0x00000000) Receive buffer not empty                                   */
      __IM  uint32_t TXE        : 1;            /*!< (@ 0x00000001) Transmit buffer empty                                      */
      __IM  uint32_t CHSIDE     : 1;            /*!< (@ 0x00000002) Channel side                                               */
      __IM  uint32_t UDR        : 1;            /*!< (@ 0x00000003) Underrun flag                                              */
      __IOM uint32_t CRCERR     : 1;            /*!< (@ 0x00000004) CRC error flag                                             */
      __IM  uint32_t MODF       : 1;            /*!< (@ 0x00000005) Mode fault                                                 */
      __IM  uint32_t OVR        : 1;            /*!< (@ 0x00000006) Overrun flag                                               */
      __IM  uint32_t BSY        : 1;            /*!< (@ 0x00000007) Busy flag                                                  */
    } bit;
  } SR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000000C) data register                                              */

    struct {
      __IOM uint32_t DR         : 16;           /*!< (@ 0x00000000) Data register                                              */
    } bit;
  } DR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) CRC polynomial register                                    */

    struct {
      __IOM uint32_t CRCPOLY    : 16;           /*!< (@ 0x00000000) CRC polynomial register                                    */
    } bit;
  } CRCPR;

  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000014) RX CRC register                                            */

    struct {
      __IM  uint32_t RxCRC      : 16;           /*!< (@ 0x00000000) Rx CRC register                                            */
    } bit;
  } RXCRCR;

  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000018) TX CRC register                                            */

    struct {
      __IM  uint32_t TxCRC      : 16;           /*!< (@ 0x00000000) Tx CRC register                                            */
    } bit;
  } TXCRCR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000001C) I2S configuration register                                 */

    struct {
      __IOM uint32_t CHLEN      : 1;            /*!< (@ 0x00000000) Channel length (number of bits per audio channel)          */
      __IOM uint32_t DATLEN     : 2;            /*!< (@ 0x00000001) Data length to be transferred                              */
      __IOM uint32_t CKPOL      : 1;            /*!< (@ 0x00000003) Steady state clock polarity                                */
      __IOM uint32_t I2SSTD     : 2;            /*!< (@ 0x00000004) I2S standard selection                                     */
      __IM  uint32_t            : 1;
      __IOM uint32_t PCMSYNC    : 1;            /*!< (@ 0x00000007) PCM frame synchronization                                  */
      __IOM uint32_t I2SCFG     : 2;            /*!< (@ 0x00000008) I2S configuration mode                                     */
      __IOM uint32_t I2SE       : 1;            /*!< (@ 0x0000000A) I2S Enable                                                 */
      __IOM uint32_t I2SMOD     : 1;            /*!< (@ 0x0000000B) I2S mode selection                                         */
    } bit;
  } I2SCFGR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) I2S prescaler register                                     */

    struct {
      __IOM uint32_t I2SDIV     : 8;            /*!< (@ 0x00000000) I2S Linear prescaler                                       */
      __IOM uint32_t ODD        : 1;            /*!< (@ 0x00000008) Odd factor for the prescaler                               */
      __IOM uint32_t MCKOE      : 1;            /*!< (@ 0x00000009) Master clock output enable                                 */
    } bit;
  } I2SPR;
} SPI1_Type;                                    /*!< Size = 36 (0x24)                                                          */



/* =========================================================================================================================== */
/* ================                                          USART1                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Universal synchronous asynchronous receiver  transmitter (USART1)
  */

typedef struct {                                /*!< (@ 0x40013800) USART1 Structure                                           */

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Status register                                            */

    struct {
      __IM  uint32_t PE         : 1;            /*!< (@ 0x00000000) Parity error                                               */
      __IM  uint32_t FE         : 1;            /*!< (@ 0x00000001) Framing error                                              */
      __IM  uint32_t NE         : 1;            /*!< (@ 0x00000002) Noise error flag                                           */
      __IM  uint32_t ORE        : 1;            /*!< (@ 0x00000003) Overrun error                                              */
      __IM  uint32_t IDLE       : 1;            /*!< (@ 0x00000004) IDLE line detected                                         */
      __IOM uint32_t RXNE       : 1;            /*!< (@ 0x00000005) Read data register not empty                               */
      __IOM uint32_t TC         : 1;            /*!< (@ 0x00000006) Transmission complete                                      */
      __IM  uint32_t TXE        : 1;            /*!< (@ 0x00000007) Transmit data register empty                               */
      __IOM uint32_t LBD        : 1;            /*!< (@ 0x00000008) LIN break detection flag                                   */
      __IOM uint32_t CTS        : 1;            /*!< (@ 0x00000009) CTS flag                                                   */
    } bit;
  } SR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000004) Data register                                              */

    struct {
      __IOM uint32_t DR         : 9;            /*!< (@ 0x00000000) Data value                                                 */
    } bit;
  } DR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000008) Baud rate register                                         */

    struct {
      __IOM uint32_t DIV_Fraction : 4;          /*!< (@ 0x00000000) fraction of USARTDIV                                       */
      __IOM uint32_t DIV_Mantissa : 12;         /*!< (@ 0x00000004) mantissa of USARTDIV                                       */
    } bit;
  } BRR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000000C) Control register 1                                         */

    struct {
      __IOM uint32_t SBK        : 1;            /*!< (@ 0x00000000) Send break                                                 */
      __IOM uint32_t RWU        : 1;            /*!< (@ 0x00000001) Receiver wakeup                                            */
      __IOM uint32_t RE         : 1;            /*!< (@ 0x00000002) Receiver enable                                            */
      __IOM uint32_t TE         : 1;            /*!< (@ 0x00000003) Transmitter enable                                         */
      __IOM uint32_t IDLEIE     : 1;            /*!< (@ 0x00000004) IDLE interrupt enable                                      */
      __IOM uint32_t RXNEIE     : 1;            /*!< (@ 0x00000005) RXNE interrupt enable                                      */
      __IOM uint32_t TCIE       : 1;            /*!< (@ 0x00000006) Transmission complete interrupt enable                     */
      __IOM uint32_t TXEIE      : 1;            /*!< (@ 0x00000007) TXE interrupt enable                                       */
      __IOM uint32_t PEIE       : 1;            /*!< (@ 0x00000008) PE interrupt enable                                        */
      __IOM uint32_t PS         : 1;            /*!< (@ 0x00000009) Parity selection                                           */
      __IOM uint32_t PCE        : 1;            /*!< (@ 0x0000000A) Parity control enable                                      */
      __IOM uint32_t WAKE       : 1;            /*!< (@ 0x0000000B) Wakeup method                                              */
      __IOM uint32_t M          : 1;            /*!< (@ 0x0000000C) Word length                                                */
      __IOM uint32_t UE         : 1;            /*!< (@ 0x0000000D) USART enable                                               */
    } bit;
  } CR1;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) Control register 2                                         */

    struct {
      __IOM uint32_t ADD        : 4;            /*!< (@ 0x00000000) Address of the USART node                                  */
      __IM  uint32_t            : 1;
      __IOM uint32_t LBDL       : 1;            /*!< (@ 0x00000005) lin break detection length                                 */
      __IOM uint32_t LBDIE      : 1;            /*!< (@ 0x00000006) LIN break detection interrupt enable                       */
      __IM  uint32_t            : 1;
      __IOM uint32_t LBCL       : 1;            /*!< (@ 0x00000008) Last bit clock pulse                                       */
      __IOM uint32_t CPHA       : 1;            /*!< (@ 0x00000009) Clock phase                                                */
      __IOM uint32_t CPOL       : 1;            /*!< (@ 0x0000000A) Clock polarity                                             */
      __IOM uint32_t CLKEN      : 1;            /*!< (@ 0x0000000B) Clock enable                                               */
      __IOM uint32_t STOP       : 2;            /*!< (@ 0x0000000C) STOP bits                                                  */
      __IOM uint32_t LINEN      : 1;            /*!< (@ 0x0000000E) LIN mode enable                                            */
    } bit;
  } CR2;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000014) Control register 3                                         */

    struct {
      __IOM uint32_t EIE        : 1;            /*!< (@ 0x00000000) Error interrupt enable                                     */
      __IOM uint32_t IREN       : 1;            /*!< (@ 0x00000001) IrDA mode enable                                           */
      __IOM uint32_t IRLP       : 1;            /*!< (@ 0x00000002) IrDA low-power                                             */
      __IOM uint32_t HDSEL      : 1;            /*!< (@ 0x00000003) Half-duplex selection                                      */
      __IOM uint32_t NACK       : 1;            /*!< (@ 0x00000004) Smartcard NACK enable                                      */
      __IOM uint32_t SCEN       : 1;            /*!< (@ 0x00000005) Smartcard mode enable                                      */
      __IOM uint32_t DMAR       : 1;            /*!< (@ 0x00000006) DMA enable receiver                                        */
      __IOM uint32_t DMAT       : 1;            /*!< (@ 0x00000007) DMA enable transmitter                                     */
      __IOM uint32_t RTSE       : 1;            /*!< (@ 0x00000008) RTS enable                                                 */
      __IOM uint32_t CTSE       : 1;            /*!< (@ 0x00000009) CTS enable                                                 */
      __IOM uint32_t CTSIE      : 1;            /*!< (@ 0x0000000A) CTS interrupt enable                                       */
    } bit;
  } CR3;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000018) Guard time and prescaler register                          */

    struct {
      __IOM uint32_t PSC        : 8;            /*!< (@ 0x00000000) Prescaler value                                            */
      __IOM uint32_t GT         : 8;            /*!< (@ 0x00000008) Guard time value                                           */
    } bit;
  } GTPR;
} USART1_Type;                                  /*!< Size = 28 (0x1c)                                                          */



/* =========================================================================================================================== */
/* ================                                           ADC1                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Analog to digital converter (ADC1)
  */

typedef struct {                                /*!< (@ 0x40012400) ADC1 Structure                                             */

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) status register                                            */

    struct {
      __IOM uint32_t AWD        : 1;            /*!< (@ 0x00000000) Analog watchdog flag                                       */
      __IOM uint32_t EOC        : 1;            /*!< (@ 0x00000001) Regular channel end of conversion                          */
      __IOM uint32_t JEOC       : 1;            /*!< (@ 0x00000002) Injected channel end of conversion                         */
      __IOM uint32_t JSTRT      : 1;            /*!< (@ 0x00000003) Injected channel start flag                                */
      __IOM uint32_t STRT       : 1;            /*!< (@ 0x00000004) Regular channel start flag                                 */
      uint32_t                  : 27;
    } bit;
  } SR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000004) control register 1                                         */

    struct {
      __IOM uint32_t AWDCH      : 5;            /*!< (@ 0x00000000) Analog watchdog channel select bits                        */
      __IOM uint32_t EOCIE      : 1;            /*!< (@ 0x00000005) Interrupt enable for EOC                                   */
      __IOM uint32_t AWDIE      : 1;            /*!< (@ 0x00000006) Analog watchdog interrupt enable                           */
      __IOM uint32_t JEOCIE     : 1;            /*!< (@ 0x00000007) Interrupt enable for injected channels                     */
      __IOM uint32_t SCAN       : 1;            /*!< (@ 0x00000008) Scan mode                                                  */
      __IOM uint32_t AWDSGL     : 1;            /*!< (@ 0x00000009) Enable the watchdog on a single channel in scan mode       */
      __IOM uint32_t JAUTO      : 1;            /*!< (@ 0x0000000A) Automatic injected group conversion                        */
      __IOM uint32_t DISCEN     : 1;            /*!< (@ 0x0000000B) Discontinuous mode on regular channels                     */
      __IOM uint32_t JDISCEN    : 1;            /*!< (@ 0x0000000C) Discontinuous mode on injected channels                    */
      __IOM uint32_t DISCNUM    : 3;            /*!< (@ 0x0000000D) Discontinuous mode channel count                           */
      __IOM uint32_t DUALMOD    : 4;            /*!< (@ 0x00000010) Dual mode selection                                        */
      __IM  uint32_t            : 2;
      __IOM uint32_t JAWDEN     : 1;            /*!< (@ 0x00000016) Analog watchdog enable on injected channels                */
      __IOM uint32_t AWDEN      : 1;            /*!< (@ 0x00000017) Analog watchdog enable on regular channels                 */
    } bit;
  } CR1;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000008) control register 2                                         */

    struct {
      __IOM uint32_t ADON       : 1;            /*!< (@ 0x00000000) A/D converter ON / OFF                                     */
      __IOM uint32_t CONT       : 1;            /*!< (@ 0x00000001) Continuous conversion                                      */
      __IOM uint32_t CAL        : 1;            /*!< (@ 0x00000002) A/D calibration                                            */
      __IOM uint32_t RSTCAL     : 1;            /*!< (@ 0x00000003) Reset calibration                                          */
      __IM  uint32_t            : 4;
      __IOM uint32_t DMA        : 1;            /*!< (@ 0x00000008) Direct memory access mode                                  */
      __IM  uint32_t            : 2;
      __IOM uint32_t ALIGN      : 1;            /*!< (@ 0x0000000B) Data alignment                                             */
      __IOM uint32_t JEXTSEL    : 3;            /*!< (@ 0x0000000C) External event select for injected group                   */
      __IOM uint32_t JEXTTRIG   : 1;            /*!< (@ 0x0000000F) External trigger conversion mode for injected
                                                                    channels                                                   */
      __IM  uint32_t            : 1;
      __IOM uint32_t EXTSEL     : 3;            /*!< (@ 0x00000011) External event select for regular group                    */
      __IOM uint32_t EXTTRIG    : 1;            /*!< (@ 0x00000014) External trigger conversion mode for regular
                                                                    channels                                                   */
      __IOM uint32_t JSWSTART   : 1;            /*!< (@ 0x00000015) Start conversion of injected channels                      */
      __IOM uint32_t SWSTART    : 1;            /*!< (@ 0x00000016) Start conversion of regular channels                       */
      __IOM uint32_t TSVREFE    : 1;            /*!< (@ 0x00000017) Temperature sensor and VREFINT enable                      */
    } bit;
  } CR2;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000000C) sample time register 1                                     */

    struct {
      __IOM uint32_t SMP10      : 3;            /*!< (@ 0x00000000) Channel 10 sample time selection                           */
      __IOM uint32_t SMP11      : 3;            /*!< (@ 0x00000003) Channel 11 sample time selection                           */
      __IOM uint32_t SMP12      : 3;            /*!< (@ 0x00000006) Channel 12 sample time selection                           */
      __IOM uint32_t SMP13      : 3;            /*!< (@ 0x00000009) Channel 13 sample time selection                           */
      __IOM uint32_t SMP14      : 3;            /*!< (@ 0x0000000C) Channel 14 sample time selection                           */
      __IOM uint32_t SMP15      : 3;            /*!< (@ 0x0000000F) Channel 15 sample time selection                           */
      __IOM uint32_t SMP16      : 3;            /*!< (@ 0x00000012) Channel 16 sample time selection                           */
      __IOM uint32_t SMP17      : 3;            /*!< (@ 0x00000015) Channel 17 sample time selection                           */
    } bit;
  } SMPR1;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) sample time register 2                                     */

    struct {
      __IOM uint32_t SMP0       : 3;            /*!< (@ 0x00000000) Channel 0 sample time selection                            */
      __IOM uint32_t SMP1       : 3;            /*!< (@ 0x00000003) Channel 1 sample time selection                            */
      __IOM uint32_t SMP2       : 3;            /*!< (@ 0x00000006) Channel 2 sample time selection                            */
      __IOM uint32_t SMP3       : 3;            /*!< (@ 0x00000009) Channel 3 sample time selection                            */
      __IOM uint32_t SMP4       : 3;            /*!< (@ 0x0000000C) Channel 4 sample time selection                            */
      __IOM uint32_t SMP5       : 3;            /*!< (@ 0x0000000F) Channel 5 sample time selection                            */
      __IOM uint32_t SMP6       : 3;            /*!< (@ 0x00000012) Channel 6 sample time selection                            */
      __IOM uint32_t SMP7       : 3;            /*!< (@ 0x00000015) Channel 7 sample time selection                            */
      __IOM uint32_t SMP8       : 3;            /*!< (@ 0x00000018) Channel 8 sample time selection                            */
      __IOM uint32_t SMP9       : 3;            /*!< (@ 0x0000001B) Channel 9 sample time selection                            */
    } bit;
  } SMPR2;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000014) injected channel data offset register x                    */

    struct {
      __IOM uint32_t JOFFSET1   : 12;           /*!< (@ 0x00000000) Data offset for injected channel x                         */
    } bit;
  } JOFR1;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000018) injected channel data offset register x                    */

    struct {
      __IOM uint32_t JOFFSET2   : 12;           /*!< (@ 0x00000000) Data offset for injected channel x                         */
    } bit;
  } JOFR2;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000001C) injected channel data offset register x                    */

    struct {
      __IOM uint32_t JOFFSET3   : 12;           /*!< (@ 0x00000000) Data offset for injected channel x                         */
    } bit;
  } JOFR3;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) injected channel data offset register x                    */

    struct {
      __IOM uint32_t JOFFSET4   : 12;           /*!< (@ 0x00000000) Data offset for injected channel x                         */
    } bit;
  } JOFR4;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000024) watchdog higher threshold register                         */

    struct {
      __IOM uint32_t HT         : 12;           /*!< (@ 0x00000000) Analog watchdog higher threshold                           */
    } bit;
  } HTR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000028) watchdog lower threshold register                          */

    struct {
      __IOM uint32_t LT         : 12;           /*!< (@ 0x00000000) Analog watchdog lower threshold                            */
    } bit;
  } LTR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000002C) regular sequence register 1                                */

    struct {
      __IOM uint32_t SQ13       : 5;            /*!< (@ 0x00000000) 13th conversion in regular sequence                        */
      __IOM uint32_t SQ14       : 5;            /*!< (@ 0x00000005) 14th conversion in regular sequence                        */
      __IOM uint32_t SQ15       : 5;            /*!< (@ 0x0000000A) 15th conversion in regular sequence                        */
      __IOM uint32_t SQ16       : 5;            /*!< (@ 0x0000000F) 16th conversion in regular sequence                        */
      __IOM uint32_t L          : 4;            /*!< (@ 0x00000014) Regular channel sequence length                            */
    } bit;
  } SQR1;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000030) regular sequence register 2                                */

    struct {
      __IOM uint32_t SQ7        : 5;            /*!< (@ 0x00000000) 7th conversion in regular sequence                         */
      __IOM uint32_t SQ8        : 5;            /*!< (@ 0x00000005) 8th conversion in regular sequence                         */
      __IOM uint32_t SQ9        : 5;            /*!< (@ 0x0000000A) 9th conversion in regular sequence                         */
      __IOM uint32_t SQ10       : 5;            /*!< (@ 0x0000000F) 10th conversion in regular sequence                        */
      __IOM uint32_t SQ11       : 5;            /*!< (@ 0x00000014) 11th conversion in regular sequence                        */
      __IOM uint32_t SQ12       : 5;            /*!< (@ 0x00000019) 12th conversion in regular sequence                        */
    } bit;
  } SQR2;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000034) regular sequence register 3                                */

    struct {
      __IOM uint32_t SQ1        : 5;            /*!< (@ 0x00000000) 1st conversion in regular sequence                         */
      __IOM uint32_t SQ2        : 5;            /*!< (@ 0x00000005) 2nd conversion in regular sequence                         */
      __IOM uint32_t SQ3        : 5;            /*!< (@ 0x0000000A) 3rd conversion in regular sequence                         */
      __IOM uint32_t SQ4        : 5;            /*!< (@ 0x0000000F) 4th conversion in regular sequence                         */
      __IOM uint32_t SQ5        : 5;            /*!< (@ 0x00000014) 5th conversion in regular sequence                         */
      __IOM uint32_t SQ6        : 5;            /*!< (@ 0x00000019) 6th conversion in regular sequence                         */
    } bit;
  } SQR3;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000038) injected sequence register                                 */

    struct {
      __IOM uint32_t JSQ1       : 5;            /*!< (@ 0x00000000) 1st conversion in injected sequence                        */
      __IOM uint32_t JSQ2       : 5;            /*!< (@ 0x00000005) 2nd conversion in injected sequence                        */
      __IOM uint32_t JSQ3       : 5;            /*!< (@ 0x0000000A) 3rd conversion in injected sequence                        */
      __IOM uint32_t JSQ4       : 5;            /*!< (@ 0x0000000F) 4th conversion in injected sequence                        */
      __IOM uint32_t JL         : 2;            /*!< (@ 0x00000014) Injected sequence length                                   */
    } bit;
  } JSQR;

  union {
    __IM  uint32_t reg;                         /*!< (@ 0x0000003C) injected data register x                                   */

    struct {
      __IM  uint32_t JDATA      : 16;           /*!< (@ 0x00000000) Injected data                                              */
    } bit;
  } JDR1;

  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000040) injected data register x                                   */

    struct {
      __IM  uint32_t JDATA      : 16;           /*!< (@ 0x00000000) Injected data                                              */
    } bit;
  } JDR2;

  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000044) injected data register x                                   */

    struct {
      __IM  uint32_t JDATA      : 16;           /*!< (@ 0x00000000) Injected data                                              */
    } bit;
  } JDR3;

  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000048) injected data register x                                   */

    struct {
      __IM  uint32_t JDATA      : 16;           /*!< (@ 0x00000000) Injected data                                              */
    } bit;
  } JDR4;

  union {
    __IM  uint32_t reg;                         /*!< (@ 0x0000004C) regular data register                                      */

    struct {
      __IM  uint32_t DATA       : 16;           /*!< (@ 0x00000000) Regular data                                               */
      __IM  uint32_t ADC2DATA   : 16;           /*!< (@ 0x00000010) ADC2 data                                                  */
    } bit;
  } DR;
} ADC1_Type;                                    /*!< Size = 80 (0x50)                                                          */



/* =========================================================================================================================== */
/* ================                                           ADC2                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Analog to digital converter (ADC2)
  */

typedef struct {                                /*!< (@ 0x40012800) ADC2 Structure                                             */

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) status register                                            */

    struct {
      __IOM uint32_t AWD        : 1;            /*!< (@ 0x00000000) Analog watchdog flag                                       */
      __IOM uint32_t EOC        : 1;            /*!< (@ 0x00000001) Regular channel end of conversion                          */
      __IOM uint32_t JEOC       : 1;            /*!< (@ 0x00000002) Injected channel end of conversion                         */
      __IOM uint32_t JSTRT      : 1;            /*!< (@ 0x00000003) Injected channel start flag                                */
      __IOM uint32_t STRT       : 1;            /*!< (@ 0x00000004) Regular channel start flag                                 */
    } bit;
  } SR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000004) control register 1                                         */

    struct {
      __IOM uint32_t AWDCH      : 5;            /*!< (@ 0x00000000) Analog watchdog channel select bits                        */
      __IOM uint32_t EOCIE      : 1;            /*!< (@ 0x00000005) Interrupt enable for EOC                                   */
      __IOM uint32_t AWDIE      : 1;            /*!< (@ 0x00000006) Analog watchdog interrupt enable                           */
      __IOM uint32_t JEOCIE     : 1;            /*!< (@ 0x00000007) Interrupt enable for injected channels                     */
      __IOM uint32_t SCAN       : 1;            /*!< (@ 0x00000008) Scan mode                                                  */
      __IOM uint32_t AWDSGL     : 1;            /*!< (@ 0x00000009) Enable the watchdog on a single channel in scan
                                                                    mode                                                       */
      __IOM uint32_t JAUTO      : 1;            /*!< (@ 0x0000000A) Automatic injected group conversion                        */
      __IOM uint32_t DISCEN     : 1;            /*!< (@ 0x0000000B) Discontinuous mode on regular channels                     */
      __IOM uint32_t JDISCEN    : 1;            /*!< (@ 0x0000000C) Discontinuous mode on injected channels                    */
      __IOM uint32_t DISCNUM    : 3;            /*!< (@ 0x0000000D) Discontinuous mode channel count                           */
      __IM  uint32_t            : 6;
      __IOM uint32_t JAWDEN     : 1;            /*!< (@ 0x00000016) Analog watchdog enable on injected channels                */
      __IOM uint32_t AWDEN      : 1;            /*!< (@ 0x00000017) Analog watchdog enable on regular channels                 */
    } bit;
  } CR1;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000008) control register 2                                         */

    struct {
      __IOM uint32_t ADON       : 1;            /*!< (@ 0x00000000) A/D converter ON / OFF                                     */
      __IOM uint32_t CONT       : 1;            /*!< (@ 0x00000001) Continuous conversion                                      */
      __IOM uint32_t CAL        : 1;            /*!< (@ 0x00000002) A/D calibration                                            */
      __IOM uint32_t RSTCAL     : 1;            /*!< (@ 0x00000003) Reset calibration                                          */
      __IM  uint32_t            : 4;
      __IOM uint32_t DMA        : 1;            /*!< (@ 0x00000008) Direct memory access mode                                  */
      __IM  uint32_t            : 2;
      __IOM uint32_t ALIGN      : 1;            /*!< (@ 0x0000000B) Data alignment                                             */
      __IOM uint32_t JEXTSEL    : 3;            /*!< (@ 0x0000000C) External event select for injected group                   */
      __IOM uint32_t JEXTTRIG   : 1;            /*!< (@ 0x0000000F) External trigger conversion mode for injected
                                                                    channels                                                   */
      __IM  uint32_t            : 1;
      __IOM uint32_t EXTSEL     : 3;            /*!< (@ 0x00000011) External event select for regular group                    */
      __IOM uint32_t EXTTRIG    : 1;            /*!< (@ 0x00000014) External trigger conversion mode for regular
                                                                    channels                                                   */
      __IOM uint32_t JSWSTART   : 1;            /*!< (@ 0x00000015) Start conversion of injected channels                      */
      __IOM uint32_t SWSTART    : 1;            /*!< (@ 0x00000016) Start conversion of regular channels                       */
      __IOM uint32_t TSVREFE    : 1;            /*!< (@ 0x00000017) Temperature sensor and VREFINT enable                      */
    } bit;
  } CR2;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000000C) sample time register 1                                     */

    struct {
      __IOM uint32_t SMP10      : 3;            /*!< (@ 0x00000000) Channel 10 sample time selection                           */
      __IOM uint32_t SMP11      : 3;            /*!< (@ 0x00000003) Channel 11 sample time selection                           */
      __IOM uint32_t SMP12      : 3;            /*!< (@ 0x00000006) Channel 12 sample time selection                           */
      __IOM uint32_t SMP13      : 3;            /*!< (@ 0x00000009) Channel 13 sample time selection                           */
      __IOM uint32_t SMP14      : 3;            /*!< (@ 0x0000000C) Channel 14 sample time selection                           */
      __IOM uint32_t SMP15      : 3;            /*!< (@ 0x0000000F) Channel 15 sample time selection                           */
      __IOM uint32_t SMP16      : 3;            /*!< (@ 0x00000012) Channel 16 sample time selection                           */
      __IOM uint32_t SMP17      : 3;            /*!< (@ 0x00000015) Channel 17 sample time selection                           */
    } bit;
  } SMPR1;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) sample time register 2                                     */

    struct {
      __IOM uint32_t SMP0       : 3;            /*!< (@ 0x00000000) Channel 0 sample time selection                            */
      __IOM uint32_t SMP1       : 3;            /*!< (@ 0x00000003) Channel 1 sample time selection                            */
      __IOM uint32_t SMP2       : 3;            /*!< (@ 0x00000006) Channel 2 sample time selection                            */
      __IOM uint32_t SMP3       : 3;            /*!< (@ 0x00000009) Channel 3 sample time selection                            */
      __IOM uint32_t SMP4       : 3;            /*!< (@ 0x0000000C) Channel 4 sample time selection                            */
      __IOM uint32_t SMP5       : 3;            /*!< (@ 0x0000000F) Channel 5 sample time selection                            */
      __IOM uint32_t SMP6       : 3;            /*!< (@ 0x00000012) Channel 6 sample time selection                            */
      __IOM uint32_t SMP7       : 3;            /*!< (@ 0x00000015) Channel 7 sample time selection                            */
      __IOM uint32_t SMP8       : 3;            /*!< (@ 0x00000018) Channel 8 sample time selection                            */
      __IOM uint32_t SMP9       : 3;            /*!< (@ 0x0000001B) Channel 9 sample time selection                            */
    } bit;
  } SMPR2;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000014) injected channel data offset register x                    */

    struct {
      __IOM uint32_t JOFFSET1   : 12;           /*!< (@ 0x00000000) Data offset for injected channel x                         */
    } bit;
  } JOFR1;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000018) injected channel data offset register x                    */

    struct {
      __IOM uint32_t JOFFSET2   : 12;           /*!< (@ 0x00000000) Data offset for injected channel x                         */
    } bit;
  } JOFR2;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000001C) injected channel data offset register x                    */

    struct {
      __IOM uint32_t JOFFSET3   : 12;           /*!< (@ 0x00000000) Data offset for injected channel x                         */
    } bit;
  } JOFR3;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) injected channel data offset register x                    */

    struct {
      __IOM uint32_t JOFFSET4   : 12;           /*!< (@ 0x00000000) Data offset for injected channel x                         */
    } bit;
  } JOFR4;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000024) watchdog higher threshold register                         */

    struct {
      __IOM uint32_t HT         : 12;           /*!< (@ 0x00000000) Analog watchdog higher threshold                           */
    } bit;
  } HTR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000028) watchdog lower threshold register                          */

    struct {
      __IOM uint32_t LT         : 12;           /*!< (@ 0x00000000) Analog watchdog lower threshold                            */
    } bit;
  } LTR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000002C) regular sequence register 1                                */

    struct {
      __IOM uint32_t SQ13       : 5;            /*!< (@ 0x00000000) 13th conversion in regular sequence                        */
      __IOM uint32_t SQ14       : 5;            /*!< (@ 0x00000005) 14th conversion in regular sequence                        */
      __IOM uint32_t SQ15       : 5;            /*!< (@ 0x0000000A) 15th conversion in regular sequence                        */
      __IOM uint32_t SQ16       : 5;            /*!< (@ 0x0000000F) 16th conversion in regular sequence                        */
      __IOM uint32_t L          : 4;            /*!< (@ 0x00000014) Regular channel sequence length                            */
    } bit;
  } SQR1;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000030) regular sequence register 2                                */

    struct {
      __IOM uint32_t SQ7        : 5;            /*!< (@ 0x00000000) 7th conversion in regular sequence                         */
      __IOM uint32_t SQ8        : 5;            /*!< (@ 0x00000005) 8th conversion in regular sequence                         */
      __IOM uint32_t SQ9        : 5;            /*!< (@ 0x0000000A) 9th conversion in regular sequence                         */
      __IOM uint32_t SQ10       : 5;            /*!< (@ 0x0000000F) 10th conversion in regular sequence                        */
      __IOM uint32_t SQ11       : 5;            /*!< (@ 0x00000014) 11th conversion in regular sequence                        */
      __IOM uint32_t SQ12       : 5;            /*!< (@ 0x00000019) 12th conversion in regular sequence                        */
    } bit;
  } SQR2;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000034) regular sequence register 3                                */

    struct {
      __IOM uint32_t SQ1        : 5;            /*!< (@ 0x00000000) 1st conversion in regular sequence                         */
      __IOM uint32_t SQ2        : 5;            /*!< (@ 0x00000005) 2nd conversion in regular sequence                         */
      __IOM uint32_t SQ3        : 5;            /*!< (@ 0x0000000A) 3rd conversion in regular sequence                         */
      __IOM uint32_t SQ4        : 5;            /*!< (@ 0x0000000F) 4th conversion in regular sequence                         */
      __IOM uint32_t SQ5        : 5;            /*!< (@ 0x00000014) 5th conversion in regular sequence                         */
      __IOM uint32_t SQ6        : 5;            /*!< (@ 0x00000019) 6th conversion in regular sequence                         */
    } bit;
  } SQR3;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000038) injected sequence register                                 */

    struct {
      __IOM uint32_t JSQ1       : 5;            /*!< (@ 0x00000000) 1st conversion in injected sequence                        */
      __IOM uint32_t JSQ2       : 5;            /*!< (@ 0x00000005) 2nd conversion in injected sequence                        */
      __IOM uint32_t JSQ3       : 5;            /*!< (@ 0x0000000A) 3rd conversion in injected sequence                        */
      __IOM uint32_t JSQ4       : 5;            /*!< (@ 0x0000000F) 4th conversion in injected sequence                        */
      __IOM uint32_t JL         : 2;            /*!< (@ 0x00000014) Injected sequence length                                   */
    } bit;
  } JSQR;

  union {
    __IM  uint32_t reg;                         /*!< (@ 0x0000003C) injected data register x                                   */

    struct {
      __IM  uint32_t JDATA      : 16;           /*!< (@ 0x00000000) Injected data                                              */
    } bit;
  } JDR1;

  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000040) injected data register x                                   */

    struct {
      __IM  uint32_t JDATA      : 16;           /*!< (@ 0x00000000) Injected data                                              */
    } bit;
  } JDR2;

  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000044) injected data register x                                   */

    struct {
      __IM  uint32_t JDATA      : 16;           /*!< (@ 0x00000000) Injected data                                              */
    } bit;
  } JDR3;

  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000048) injected data register x                                   */

    struct {
      __IM  uint32_t JDATA      : 16;           /*!< (@ 0x00000000) Injected data                                              */
    } bit;
  } JDR4;

  union {
    __IM  uint32_t reg;                         /*!< (@ 0x0000004C) regular data register                                      */

    struct {
      __IM  uint32_t DATA       : 16;           /*!< (@ 0x00000000) Regular data                                               */
    } bit;
  } DR;
} ADC2_Type;                                    /*!< Size = 80 (0x50)                                                          */



/* =========================================================================================================================== */
/* ================                                            CAN                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Controller area network (CAN)
  */

typedef struct {                                /*!< (@ 0x40006400) CAN Structure                                              */

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) CAN_MCR                                                    */

    struct {
      __IOM uint32_t INRQ       : 1;            /*!< (@ 0x00000000) INRQ                                                       */
      __IOM uint32_t SLEEP      : 1;            /*!< (@ 0x00000001) SLEEP                                                      */
      __IOM uint32_t TXFP       : 1;            /*!< (@ 0x00000002) TXFP                                                       */
      __IOM uint32_t RFLM       : 1;            /*!< (@ 0x00000003) RFLM                                                       */
      __IOM uint32_t NART       : 1;            /*!< (@ 0x00000004) NART                                                       */
      __IOM uint32_t AWUM       : 1;            /*!< (@ 0x00000005) AWUM                                                       */
      __IOM uint32_t ABOM       : 1;            /*!< (@ 0x00000006) ABOM                                                       */
      __IOM uint32_t TTCM       : 1;            /*!< (@ 0x00000007) TTCM                                                       */
      __IM  uint32_t            : 7;
      __IOM uint32_t RESET      : 1;            /*!< (@ 0x0000000F) RESET                                                      */
      __IOM uint32_t DBF        : 1;            /*!< (@ 0x00000010) DBF                                                        */
    } bit;
  } CAN_MCR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000004) CAN_MSR                                                    */

    struct {
      __IM  uint32_t INAK       : 1;            /*!< (@ 0x00000000) INAK                                                       */
      __IM  uint32_t SLAK       : 1;            /*!< (@ 0x00000001) SLAK                                                       */
      __IOM uint32_t ERRI       : 1;            /*!< (@ 0x00000002) ERRI                                                       */
      __IOM uint32_t WKUI       : 1;            /*!< (@ 0x00000003) WKUI                                                       */
      __IOM uint32_t SLAKI      : 1;            /*!< (@ 0x00000004) SLAKI                                                      */
      __IM  uint32_t            : 3;
      __IM  uint32_t TXM        : 1;            /*!< (@ 0x00000008) TXM                                                        */
      __IM  uint32_t RXM        : 1;            /*!< (@ 0x00000009) RXM                                                        */
      __IM  uint32_t SAMP       : 1;            /*!< (@ 0x0000000A) SAMP                                                       */
      __IM  uint32_t RX         : 1;            /*!< (@ 0x0000000B) RX                                                         */
    } bit;
  } CAN_MSR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000008) CAN_TSR                                                    */

    struct {
      __IOM uint32_t RQCP0      : 1;            /*!< (@ 0x00000000) RQCP0                                                      */
      __IOM uint32_t TXOK0      : 1;            /*!< (@ 0x00000001) TXOK0                                                      */
      __IOM uint32_t ALST0      : 1;            /*!< (@ 0x00000002) ALST0                                                      */
      __IOM uint32_t TERR0      : 1;            /*!< (@ 0x00000003) TERR0                                                      */
      __IM  uint32_t            : 3;
      __IOM uint32_t ABRQ0      : 1;            /*!< (@ 0x00000007) ABRQ0                                                      */
      __IOM uint32_t RQCP1      : 1;            /*!< (@ 0x00000008) RQCP1                                                      */
      __IOM uint32_t TXOK1      : 1;            /*!< (@ 0x00000009) TXOK1                                                      */
      __IOM uint32_t ALST1      : 1;            /*!< (@ 0x0000000A) ALST1                                                      */
      __IOM uint32_t TERR1      : 1;            /*!< (@ 0x0000000B) TERR1                                                      */
      __IM  uint32_t            : 3;
      __IOM uint32_t ABRQ1      : 1;            /*!< (@ 0x0000000F) ABRQ1                                                      */
      __IOM uint32_t RQCP2      : 1;            /*!< (@ 0x00000010) RQCP2                                                      */
      __IOM uint32_t TXOK2      : 1;            /*!< (@ 0x00000011) TXOK2                                                      */
      __IOM uint32_t ALST2      : 1;            /*!< (@ 0x00000012) ALST2                                                      */
      __IOM uint32_t TERR2      : 1;            /*!< (@ 0x00000013) TERR2                                                      */
      __IM  uint32_t            : 3;
      __IOM uint32_t ABRQ2      : 1;            /*!< (@ 0x00000017) ABRQ2                                                      */
      __IM  uint32_t CODE       : 2;            /*!< (@ 0x00000018) CODE                                                       */
      __IM  uint32_t TME0       : 1;            /*!< (@ 0x0000001A) Lowest priority flag for mailbox 0                         */
      __IM  uint32_t TME1       : 1;            /*!< (@ 0x0000001B) Lowest priority flag for mailbox 1                         */
      __IM  uint32_t TME2       : 1;            /*!< (@ 0x0000001C) Lowest priority flag for mailbox 2                         */
      __IM  uint32_t LOW0       : 1;            /*!< (@ 0x0000001D) Lowest priority flag for mailbox 0                         */
      __IM  uint32_t LOW1       : 1;            /*!< (@ 0x0000001E) Lowest priority flag for mailbox 1                         */
      __IM  uint32_t LOW2       : 1;            /*!< (@ 0x0000001F) Lowest priority flag for mailbox 2                         */
    } bit;
  } CAN_TSR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000000C) CAN_RF0R                                                   */

    struct {
      __IM  uint32_t FMP0       : 2;            /*!< (@ 0x00000000) FMP0                                                       */
      __IM  uint32_t            : 1;
      __IOM uint32_t FULL0      : 1;            /*!< (@ 0x00000003) FULL0                                                      */
      __IOM uint32_t FOVR0      : 1;            /*!< (@ 0x00000004) FOVR0                                                      */
      __IOM uint32_t RFOM0      : 1;            /*!< (@ 0x00000005) RFOM0                                                      */
    } bit;
  } CAN_RF0R;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) CAN_RF1R                                                   */

    struct {
      __IM  uint32_t FMP1       : 2;            /*!< (@ 0x00000000) FMP1                                                       */
      __IM  uint32_t            : 1;
      __IOM uint32_t FULL1      : 1;            /*!< (@ 0x00000003) FULL1                                                      */
      __IOM uint32_t FOVR1      : 1;            /*!< (@ 0x00000004) FOVR1                                                      */
      __IOM uint32_t RFOM1      : 1;            /*!< (@ 0x00000005) RFOM1                                                      */
    } bit;
  } CAN_RF1R;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000014) CAN_IER                                                    */

    struct {
      __IOM uint32_t TMEIE      : 1;            /*!< (@ 0x00000000) TMEIE                                                      */
      __IOM uint32_t FMPIE0     : 1;            /*!< (@ 0x00000001) FMPIE0                                                     */
      __IOM uint32_t FFIE0      : 1;            /*!< (@ 0x00000002) FFIE0                                                      */
      __IOM uint32_t FOVIE0     : 1;            /*!< (@ 0x00000003) FOVIE0                                                     */
      __IOM uint32_t FMPIE1     : 1;            /*!< (@ 0x00000004) FMPIE1                                                     */
      __IOM uint32_t FFIE1      : 1;            /*!< (@ 0x00000005) FFIE1                                                      */
      __IOM uint32_t FOVIE1     : 1;            /*!< (@ 0x00000006) FOVIE1                                                     */
      __IM  uint32_t            : 1;
      __IOM uint32_t EWGIE      : 1;            /*!< (@ 0x00000008) EWGIE                                                      */
      __IOM uint32_t EPVIE      : 1;            /*!< (@ 0x00000009) EPVIE                                                      */
      __IOM uint32_t BOFIE      : 1;            /*!< (@ 0x0000000A) BOFIE                                                      */
      __IOM uint32_t LECIE      : 1;            /*!< (@ 0x0000000B) LECIE                                                      */
      __IM  uint32_t            : 3;
      __IOM uint32_t ERRIE      : 1;            /*!< (@ 0x0000000F) ERRIE                                                      */
      __IOM uint32_t WKUIE      : 1;            /*!< (@ 0x00000010) WKUIE                                                      */
      __IOM uint32_t SLKIE      : 1;            /*!< (@ 0x00000011) SLKIE                                                      */
    } bit;
  } CAN_IER;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000018) CAN_ESR                                                    */

    struct {
      __IM  uint32_t EWGF       : 1;            /*!< (@ 0x00000000) EWGF                                                       */
      __IM  uint32_t EPVF       : 1;            /*!< (@ 0x00000001) EPVF                                                       */
      __IM  uint32_t BOFF       : 1;            /*!< (@ 0x00000002) BOFF                                                       */
      __IM  uint32_t            : 1;
      __IOM uint32_t LEC        : 3;            /*!< (@ 0x00000004) LEC                                                        */
      __IM  uint32_t            : 9;
      __IM  uint32_t TEC        : 8;            /*!< (@ 0x00000010) TEC                                                        */
      __IM  uint32_t REC        : 8;            /*!< (@ 0x00000018) REC                                                        */
    } bit;
  } CAN_ESR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000001C) CAN_BTR                                                    */

    struct {
      __IOM uint32_t BRP        : 10;           /*!< (@ 0x00000000) BRP                                                        */
      __IM  uint32_t            : 6;
      __IOM uint32_t TS1        : 4;            /*!< (@ 0x00000010) TS1                                                        */
      __IOM uint32_t TS2        : 3;            /*!< (@ 0x00000014) TS2                                                        */
      __IM  uint32_t            : 1;
      __IOM uint32_t SJW        : 2;            /*!< (@ 0x00000018) SJW                                                        */
      __IM  uint32_t            : 4;
      __IOM uint32_t LBKM       : 1;            /*!< (@ 0x0000001E) LBKM                                                       */
      __IOM uint32_t SILM       : 1;            /*!< (@ 0x0000001F) SILM                                                       */
    } bit;
  } CAN_BTR;
  __IM  uint32_t  RESERVED[88];

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000180) CAN_TI0R                                                   */

    struct {
      __IOM uint32_t TXRQ       : 1;            /*!< (@ 0x00000000) TXRQ                                                       */
      __IOM uint32_t RTR        : 1;            /*!< (@ 0x00000001) RTR                                                        */
      __IOM uint32_t IDE        : 1;            /*!< (@ 0x00000002) IDE                                                        */
      __IOM uint32_t EXID       : 18;           /*!< (@ 0x00000003) EXID                                                       */
      __IOM uint32_t STID       : 11;           /*!< (@ 0x00000015) STID                                                       */
    } bit;
  } CAN_TI0R;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000184) CAN_TDT0R                                                  */

    struct {
      __IOM uint32_t DLC        : 4;            /*!< (@ 0x00000000) DLC                                                        */
      __IM  uint32_t            : 4;
      __IOM uint32_t TGT        : 1;            /*!< (@ 0x00000008) TGT                                                        */
      __IM  uint32_t            : 7;
      __IOM uint32_t TIME       : 16;           /*!< (@ 0x00000010) TIME                                                       */
    } bit;
  } CAN_TDT0R;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000188) CAN_TDL0R                                                  */

    struct {
      __IOM uint32_t DATA0      : 8;            /*!< (@ 0x00000000) DATA0                                                      */
      __IOM uint32_t DATA1      : 8;            /*!< (@ 0x00000008) DATA1                                                      */
      __IOM uint32_t DATA2      : 8;            /*!< (@ 0x00000010) DATA2                                                      */
      __IOM uint32_t DATA3      : 8;            /*!< (@ 0x00000018) DATA3                                                      */
    } bit;
  } CAN_TDL0R;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000018C) CAN_TDH0R                                                  */

    struct {
      __IOM uint32_t DATA4      : 8;            /*!< (@ 0x00000000) DATA4                                                      */
      __IOM uint32_t DATA5      : 8;            /*!< (@ 0x00000008) DATA5                                                      */
      __IOM uint32_t DATA6      : 8;            /*!< (@ 0x00000010) DATA6                                                      */
      __IOM uint32_t DATA7      : 8;            /*!< (@ 0x00000018) DATA7                                                      */
    } bit;
  } CAN_TDH0R;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000190) CAN_TI1R                                                   */

    struct {
      __IOM uint32_t TXRQ       : 1;            /*!< (@ 0x00000000) TXRQ                                                       */
      __IOM uint32_t RTR        : 1;            /*!< (@ 0x00000001) RTR                                                        */
      __IOM uint32_t IDE        : 1;            /*!< (@ 0x00000002) IDE                                                        */
      __IOM uint32_t EXID       : 18;           /*!< (@ 0x00000003) EXID                                                       */
      __IOM uint32_t STID       : 11;           /*!< (@ 0x00000015) STID                                                       */
    } bit;
  } CAN_TI1R;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000194) CAN_TDT1R                                                  */

    struct {
      __IOM uint32_t DLC        : 4;            /*!< (@ 0x00000000) DLC                                                        */
      __IM  uint32_t            : 4;
      __IOM uint32_t TGT        : 1;            /*!< (@ 0x00000008) TGT                                                        */
      __IM  uint32_t            : 7;
      __IOM uint32_t TIME       : 16;           /*!< (@ 0x00000010) TIME                                                       */
    } bit;
  } CAN_TDT1R;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000198) CAN_TDL1R                                                  */

    struct {
      __IOM uint32_t DATA0      : 8;            /*!< (@ 0x00000000) DATA0                                                      */
      __IOM uint32_t DATA1      : 8;            /*!< (@ 0x00000008) DATA1                                                      */
      __IOM uint32_t DATA2      : 8;            /*!< (@ 0x00000010) DATA2                                                      */
      __IOM uint32_t DATA3      : 8;            /*!< (@ 0x00000018) DATA3                                                      */
    } bit;
  } CAN_TDL1R;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000019C) CAN_TDH1R                                                  */

    struct {
      __IOM uint32_t DATA4      : 8;            /*!< (@ 0x00000000) DATA4                                                      */
      __IOM uint32_t DATA5      : 8;            /*!< (@ 0x00000008) DATA5                                                      */
      __IOM uint32_t DATA6      : 8;            /*!< (@ 0x00000010) DATA6                                                      */
      __IOM uint32_t DATA7      : 8;            /*!< (@ 0x00000018) DATA7                                                      */
    } bit;
  } CAN_TDH1R;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000001A0) CAN_TI2R                                                   */

    struct {
      __IOM uint32_t TXRQ       : 1;            /*!< (@ 0x00000000) TXRQ                                                       */
      __IOM uint32_t RTR        : 1;            /*!< (@ 0x00000001) RTR                                                        */
      __IOM uint32_t IDE        : 1;            /*!< (@ 0x00000002) IDE                                                        */
      __IOM uint32_t EXID       : 18;           /*!< (@ 0x00000003) EXID                                                       */
      __IOM uint32_t STID       : 11;           /*!< (@ 0x00000015) STID                                                       */
    } bit;
  } CAN_TI2R;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000001A4) CAN_TDT2R                                                  */

    struct {
      __IOM uint32_t DLC        : 4;            /*!< (@ 0x00000000) DLC                                                        */
      __IM  uint32_t            : 4;
      __IOM uint32_t TGT        : 1;            /*!< (@ 0x00000008) TGT                                                        */
      __IM  uint32_t            : 7;
      __IOM uint32_t TIME       : 16;           /*!< (@ 0x00000010) TIME                                                       */
    } bit;
  } CAN_TDT2R;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000001A8) CAN_TDL2R                                                  */

    struct {
      __IOM uint32_t DATA0      : 8;            /*!< (@ 0x00000000) DATA0                                                      */
      __IOM uint32_t DATA1      : 8;            /*!< (@ 0x00000008) DATA1                                                      */
      __IOM uint32_t DATA2      : 8;            /*!< (@ 0x00000010) DATA2                                                      */
      __IOM uint32_t DATA3      : 8;            /*!< (@ 0x00000018) DATA3                                                      */
    } bit;
  } CAN_TDL2R;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000001AC) CAN_TDH2R                                                  */

    struct {
      __IOM uint32_t DATA4      : 8;            /*!< (@ 0x00000000) DATA4                                                      */
      __IOM uint32_t DATA5      : 8;            /*!< (@ 0x00000008) DATA5                                                      */
      __IOM uint32_t DATA6      : 8;            /*!< (@ 0x00000010) DATA6                                                      */
      __IOM uint32_t DATA7      : 8;            /*!< (@ 0x00000018) DATA7                                                      */
    } bit;
  } CAN_TDH2R;

  union {
    __IM  uint32_t reg;                         /*!< (@ 0x000001B0) CAN_RI0R                                                   */

    struct {
      __IM  uint32_t            : 1;
      __IM  uint32_t RTR        : 1;            /*!< (@ 0x00000001) RTR                                                        */
      __IM  uint32_t IDE        : 1;            /*!< (@ 0x00000002) IDE                                                        */
      __IM  uint32_t EXID       : 18;           /*!< (@ 0x00000003) EXID                                                       */
      __IM  uint32_t STID       : 11;           /*!< (@ 0x00000015) STID                                                       */
    } bit;
  } CAN_RI0R;

  union {
    __IM  uint32_t reg;                         /*!< (@ 0x000001B4) CAN_RDT0R                                                  */

    struct {
      __IM  uint32_t DLC        : 4;            /*!< (@ 0x00000000) DLC                                                        */
      __IM  uint32_t            : 4;
      __IM  uint32_t FMI        : 8;            /*!< (@ 0x00000008) FMI                                                        */
      __IM  uint32_t TIME       : 16;           /*!< (@ 0x00000010) TIME                                                       */
    } bit;
  } CAN_RDT0R;

  union {
    __IM  uint32_t reg;                         /*!< (@ 0x000001B8) CAN_RDL0R                                                  */

    struct {
      __IM  uint32_t DATA0      : 8;            /*!< (@ 0x00000000) DATA0                                                      */
      __IM  uint32_t DATA1      : 8;            /*!< (@ 0x00000008) DATA1                                                      */
      __IM  uint32_t DATA2      : 8;            /*!< (@ 0x00000010) DATA2                                                      */
      __IM  uint32_t DATA3      : 8;            /*!< (@ 0x00000018) DATA3                                                      */
    } bit;
  } CAN_RDL0R;

  union {
    __IM  uint32_t reg;                         /*!< (@ 0x000001BC) CAN_RDH0R                                                  */

    struct {
      __IM  uint32_t DATA4      : 8;            /*!< (@ 0x00000000) DATA4                                                      */
      __IM  uint32_t DATA5      : 8;            /*!< (@ 0x00000008) DATA5                                                      */
      __IM  uint32_t DATA6      : 8;            /*!< (@ 0x00000010) DATA6                                                      */
      __IM  uint32_t DATA7      : 8;            /*!< (@ 0x00000018) DATA7                                                      */
    } bit;
  } CAN_RDH0R;

  union {
    __IM  uint32_t reg;                         /*!< (@ 0x000001C0) CAN_RI1R                                                   */

    struct {
      __IM  uint32_t            : 1;
      __IM  uint32_t RTR        : 1;            /*!< (@ 0x00000001) RTR                                                        */
      __IM  uint32_t IDE        : 1;            /*!< (@ 0x00000002) IDE                                                        */
      __IM  uint32_t EXID       : 18;           /*!< (@ 0x00000003) EXID                                                       */
      __IM  uint32_t STID       : 11;           /*!< (@ 0x00000015) STID                                                       */
    } bit;
  } CAN_RI1R;

  union {
    __IM  uint32_t reg;                         /*!< (@ 0x000001C4) CAN_RDT1R                                                  */

    struct {
      __IM  uint32_t DLC        : 4;            /*!< (@ 0x00000000) DLC                                                        */
      __IM  uint32_t            : 4;
      __IM  uint32_t FMI        : 8;            /*!< (@ 0x00000008) FMI                                                        */
      __IM  uint32_t TIME       : 16;           /*!< (@ 0x00000010) TIME                                                       */
    } bit;
  } CAN_RDT1R;

  union {
    __IM  uint32_t reg;                         /*!< (@ 0x000001C8) CAN_RDL1R                                                  */

    struct {
      __IM  uint32_t DATA0      : 8;            /*!< (@ 0x00000000) DATA0                                                      */
      __IM  uint32_t DATA1      : 8;            /*!< (@ 0x00000008) DATA1                                                      */
      __IM  uint32_t DATA2      : 8;            /*!< (@ 0x00000010) DATA2                                                      */
      __IM  uint32_t DATA3      : 8;            /*!< (@ 0x00000018) DATA3                                                      */
    } bit;
  } CAN_RDL1R;

  union {
    __IM  uint32_t reg;                         /*!< (@ 0x000001CC) CAN_RDH1R                                                  */

    struct {
      __IM  uint32_t DATA4      : 8;            /*!< (@ 0x00000000) DATA4                                                      */
      __IM  uint32_t DATA5      : 8;            /*!< (@ 0x00000008) DATA5                                                      */
      __IM  uint32_t DATA6      : 8;            /*!< (@ 0x00000010) DATA6                                                      */
      __IM  uint32_t DATA7      : 8;            /*!< (@ 0x00000018) DATA7                                                      */
    } bit;
  } CAN_RDH1R;
  __IM  uint32_t  RESERVED1[12];

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000200) CAN_FMR                                                    */

    struct {
      __IOM uint32_t FINIT      : 1;            /*!< (@ 0x00000000) FINIT                                                      */
    } bit;
  } CAN_FMR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000204) CAN_FM1R                                                   */

    struct {
      __IOM uint32_t FBM0       : 1;            /*!< (@ 0x00000000) Filter mode                                                */
      __IOM uint32_t FBM1       : 1;            /*!< (@ 0x00000001) Filter mode                                                */
      __IOM uint32_t FBM2       : 1;            /*!< (@ 0x00000002) Filter mode                                                */
      __IOM uint32_t FBM3       : 1;            /*!< (@ 0x00000003) Filter mode                                                */
      __IOM uint32_t FBM4       : 1;            /*!< (@ 0x00000004) Filter mode                                                */
      __IOM uint32_t FBM5       : 1;            /*!< (@ 0x00000005) Filter mode                                                */
      __IOM uint32_t FBM6       : 1;            /*!< (@ 0x00000006) Filter mode                                                */
      __IOM uint32_t FBM7       : 1;            /*!< (@ 0x00000007) Filter mode                                                */
      __IOM uint32_t FBM8       : 1;            /*!< (@ 0x00000008) Filter mode                                                */
      __IOM uint32_t FBM9       : 1;            /*!< (@ 0x00000009) Filter mode                                                */
      __IOM uint32_t FBM10      : 1;            /*!< (@ 0x0000000A) Filter mode                                                */
      __IOM uint32_t FBM11      : 1;            /*!< (@ 0x0000000B) Filter mode                                                */
      __IOM uint32_t FBM12      : 1;            /*!< (@ 0x0000000C) Filter mode                                                */
      __IOM uint32_t FBM13      : 1;            /*!< (@ 0x0000000D) Filter mode                                                */
    } bit;
  } CAN_FM1R;
  __IM  uint32_t  RESERVED2;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000020C) CAN_FS1R                                                   */

    struct {
      __IOM uint32_t FSC0       : 1;            /*!< (@ 0x00000000) Filter scale configuration                                 */
      __IOM uint32_t FSC1       : 1;            /*!< (@ 0x00000001) Filter scale configuration                                 */
      __IOM uint32_t FSC2       : 1;            /*!< (@ 0x00000002) Filter scale configuration                                 */
      __IOM uint32_t FSC3       : 1;            /*!< (@ 0x00000003) Filter scale configuration                                 */
      __IOM uint32_t FSC4       : 1;            /*!< (@ 0x00000004) Filter scale configuration                                 */
      __IOM uint32_t FSC5       : 1;            /*!< (@ 0x00000005) Filter scale configuration                                 */
      __IOM uint32_t FSC6       : 1;            /*!< (@ 0x00000006) Filter scale configuration                                 */
      __IOM uint32_t FSC7       : 1;            /*!< (@ 0x00000007) Filter scale configuration                                 */
      __IOM uint32_t FSC8       : 1;            /*!< (@ 0x00000008) Filter scale configuration                                 */
      __IOM uint32_t FSC9       : 1;            /*!< (@ 0x00000009) Filter scale configuration                                 */
      __IOM uint32_t FSC10      : 1;            /*!< (@ 0x0000000A) Filter scale configuration                                 */
      __IOM uint32_t FSC11      : 1;            /*!< (@ 0x0000000B) Filter scale configuration                                 */
      __IOM uint32_t FSC12      : 1;            /*!< (@ 0x0000000C) Filter scale configuration                                 */
      __IOM uint32_t FSC13      : 1;            /*!< (@ 0x0000000D) Filter scale configuration                                 */
    } bit;
  } CAN_FS1R;
  __IM  uint32_t  RESERVED3;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000214) CAN_FFA1R                                                  */

    struct {
      __IOM uint32_t FFA0       : 1;            /*!< (@ 0x00000000) Filter FIFO assignment for filter 0                        */
      __IOM uint32_t FFA1       : 1;            /*!< (@ 0x00000001) Filter FIFO assignment for filter 1                        */
      __IOM uint32_t FFA2       : 1;            /*!< (@ 0x00000002) Filter FIFO assignment for filter 2                        */
      __IOM uint32_t FFA3       : 1;            /*!< (@ 0x00000003) Filter FIFO assignment for filter 3                        */
      __IOM uint32_t FFA4       : 1;            /*!< (@ 0x00000004) Filter FIFO assignment for filter 4                        */
      __IOM uint32_t FFA5       : 1;            /*!< (@ 0x00000005) Filter FIFO assignment for filter 5                        */
      __IOM uint32_t FFA6       : 1;            /*!< (@ 0x00000006) Filter FIFO assignment for filter 6                        */
      __IOM uint32_t FFA7       : 1;            /*!< (@ 0x00000007) Filter FIFO assignment for filter 7                        */
      __IOM uint32_t FFA8       : 1;            /*!< (@ 0x00000008) Filter FIFO assignment for filter 8                        */
      __IOM uint32_t FFA9       : 1;            /*!< (@ 0x00000009) Filter FIFO assignment for filter 9                        */
      __IOM uint32_t FFA10      : 1;            /*!< (@ 0x0000000A) Filter FIFO assignment for filter 10                       */
      __IOM uint32_t FFA11      : 1;            /*!< (@ 0x0000000B) Filter FIFO assignment for filter 11                       */
      __IOM uint32_t FFA12      : 1;            /*!< (@ 0x0000000C) Filter FIFO assignment for filter 12                       */
      __IOM uint32_t FFA13      : 1;            /*!< (@ 0x0000000D) Filter FIFO assignment for filter 13                       */
    } bit;
  } CAN_FFA1R;
  __IM  uint32_t  RESERVED4;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000021C) CAN_FA1R                                                   */

    struct {
      __IOM uint32_t FACT0      : 1;            /*!< (@ 0x00000000) Filter active                                              */
      __IOM uint32_t FACT1      : 1;            /*!< (@ 0x00000001) Filter active                                              */
      __IOM uint32_t FACT2      : 1;            /*!< (@ 0x00000002) Filter active                                              */
      __IOM uint32_t FACT3      : 1;            /*!< (@ 0x00000003) Filter active                                              */
      __IOM uint32_t FACT4      : 1;            /*!< (@ 0x00000004) Filter active                                              */
      __IOM uint32_t FACT5      : 1;            /*!< (@ 0x00000005) Filter active                                              */
      __IOM uint32_t FACT6      : 1;            /*!< (@ 0x00000006) Filter active                                              */
      __IOM uint32_t FACT7      : 1;            /*!< (@ 0x00000007) Filter active                                              */
      __IOM uint32_t FACT8      : 1;            /*!< (@ 0x00000008) Filter active                                              */
      __IOM uint32_t FACT9      : 1;            /*!< (@ 0x00000009) Filter active                                              */
      __IOM uint32_t FACT10     : 1;            /*!< (@ 0x0000000A) Filter active                                              */
      __IOM uint32_t FACT11     : 1;            /*!< (@ 0x0000000B) Filter active                                              */
      __IOM uint32_t FACT12     : 1;            /*!< (@ 0x0000000C) Filter active                                              */
      __IOM uint32_t FACT13     : 1;            /*!< (@ 0x0000000D) Filter active                                              */
    } bit;
  } CAN_FA1R;
  __IM  uint32_t  RESERVED5[8];

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000240) Filter bank 0 register 1                                   */

    struct {
      __IOM uint32_t FB0        : 1;            /*!< (@ 0x00000000) Filter bits                                                */
      __IOM uint32_t FB1        : 1;            /*!< (@ 0x00000001) Filter bits                                                */
      __IOM uint32_t FB2        : 1;            /*!< (@ 0x00000002) Filter bits                                                */
      __IOM uint32_t FB3        : 1;            /*!< (@ 0x00000003) Filter bits                                                */
      __IOM uint32_t FB4        : 1;            /*!< (@ 0x00000004) Filter bits                                                */
      __IOM uint32_t FB5        : 1;            /*!< (@ 0x00000005) Filter bits                                                */
      __IOM uint32_t FB6        : 1;            /*!< (@ 0x00000006) Filter bits                                                */
      __IOM uint32_t FB7        : 1;            /*!< (@ 0x00000007) Filter bits                                                */
      __IOM uint32_t FB8        : 1;            /*!< (@ 0x00000008) Filter bits                                                */
      __IOM uint32_t FB9        : 1;            /*!< (@ 0x00000009) Filter bits                                                */
      __IOM uint32_t FB10       : 1;            /*!< (@ 0x0000000A) Filter bits                                                */
      __IOM uint32_t FB11       : 1;            /*!< (@ 0x0000000B) Filter bits                                                */
      __IOM uint32_t FB12       : 1;            /*!< (@ 0x0000000C) Filter bits                                                */
      __IOM uint32_t FB13       : 1;            /*!< (@ 0x0000000D) Filter bits                                                */
      __IOM uint32_t FB14       : 1;            /*!< (@ 0x0000000E) Filter bits                                                */
      __IOM uint32_t FB15       : 1;            /*!< (@ 0x0000000F) Filter bits                                                */
      __IOM uint32_t FB16       : 1;            /*!< (@ 0x00000010) Filter bits                                                */
      __IOM uint32_t FB17       : 1;            /*!< (@ 0x00000011) Filter bits                                                */
      __IOM uint32_t FB18       : 1;            /*!< (@ 0x00000012) Filter bits                                                */
      __IOM uint32_t FB19       : 1;            /*!< (@ 0x00000013) Filter bits                                                */
      __IOM uint32_t FB20       : 1;            /*!< (@ 0x00000014) Filter bits                                                */
      __IOM uint32_t FB21       : 1;            /*!< (@ 0x00000015) Filter bits                                                */
      __IOM uint32_t FB22       : 1;            /*!< (@ 0x00000016) Filter bits                                                */
      __IOM uint32_t FB23       : 1;            /*!< (@ 0x00000017) Filter bits                                                */
      __IOM uint32_t FB24       : 1;            /*!< (@ 0x00000018) Filter bits                                                */
      __IOM uint32_t FB25       : 1;            /*!< (@ 0x00000019) Filter bits                                                */
      __IOM uint32_t FB26       : 1;            /*!< (@ 0x0000001A) Filter bits                                                */
      __IOM uint32_t FB27       : 1;            /*!< (@ 0x0000001B) Filter bits                                                */
      __IOM uint32_t FB28       : 1;            /*!< (@ 0x0000001C) Filter bits                                                */
      __IOM uint32_t FB29       : 1;            /*!< (@ 0x0000001D) Filter bits                                                */
      __IOM uint32_t FB30       : 1;            /*!< (@ 0x0000001E) Filter bits                                                */
      __IOM uint32_t FB31       : 1;            /*!< (@ 0x0000001F) Filter bits                                                */
    } bit;
  } F0R1;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000244) Filter bank 0 register 2                                   */

    struct {
      __IOM uint32_t FB0        : 1;            /*!< (@ 0x00000000) Filter bits                                                */
      __IOM uint32_t FB1        : 1;            /*!< (@ 0x00000001) Filter bits                                                */
      __IOM uint32_t FB2        : 1;            /*!< (@ 0x00000002) Filter bits                                                */
      __IOM uint32_t FB3        : 1;            /*!< (@ 0x00000003) Filter bits                                                */
      __IOM uint32_t FB4        : 1;            /*!< (@ 0x00000004) Filter bits                                                */
      __IOM uint32_t FB5        : 1;            /*!< (@ 0x00000005) Filter bits                                                */
      __IOM uint32_t FB6        : 1;            /*!< (@ 0x00000006) Filter bits                                                */
      __IOM uint32_t FB7        : 1;            /*!< (@ 0x00000007) Filter bits                                                */
      __IOM uint32_t FB8        : 1;            /*!< (@ 0x00000008) Filter bits                                                */
      __IOM uint32_t FB9        : 1;            /*!< (@ 0x00000009) Filter bits                                                */
      __IOM uint32_t FB10       : 1;            /*!< (@ 0x0000000A) Filter bits                                                */
      __IOM uint32_t FB11       : 1;            /*!< (@ 0x0000000B) Filter bits                                                */
      __IOM uint32_t FB12       : 1;            /*!< (@ 0x0000000C) Filter bits                                                */
      __IOM uint32_t FB13       : 1;            /*!< (@ 0x0000000D) Filter bits                                                */
      __IOM uint32_t FB14       : 1;            /*!< (@ 0x0000000E) Filter bits                                                */
      __IOM uint32_t FB15       : 1;            /*!< (@ 0x0000000F) Filter bits                                                */
      __IOM uint32_t FB16       : 1;            /*!< (@ 0x00000010) Filter bits                                                */
      __IOM uint32_t FB17       : 1;            /*!< (@ 0x00000011) Filter bits                                                */
      __IOM uint32_t FB18       : 1;            /*!< (@ 0x00000012) Filter bits                                                */
      __IOM uint32_t FB19       : 1;            /*!< (@ 0x00000013) Filter bits                                                */
      __IOM uint32_t FB20       : 1;            /*!< (@ 0x00000014) Filter bits                                                */
      __IOM uint32_t FB21       : 1;            /*!< (@ 0x00000015) Filter bits                                                */
      __IOM uint32_t FB22       : 1;            /*!< (@ 0x00000016) Filter bits                                                */
      __IOM uint32_t FB23       : 1;            /*!< (@ 0x00000017) Filter bits                                                */
      __IOM uint32_t FB24       : 1;            /*!< (@ 0x00000018) Filter bits                                                */
      __IOM uint32_t FB25       : 1;            /*!< (@ 0x00000019) Filter bits                                                */
      __IOM uint32_t FB26       : 1;            /*!< (@ 0x0000001A) Filter bits                                                */
      __IOM uint32_t FB27       : 1;            /*!< (@ 0x0000001B) Filter bits                                                */
      __IOM uint32_t FB28       : 1;            /*!< (@ 0x0000001C) Filter bits                                                */
      __IOM uint32_t FB29       : 1;            /*!< (@ 0x0000001D) Filter bits                                                */
      __IOM uint32_t FB30       : 1;            /*!< (@ 0x0000001E) Filter bits                                                */
      __IOM uint32_t FB31       : 1;            /*!< (@ 0x0000001F) Filter bits                                                */
    } bit;
  } F0R2;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000248) Filter bank 1 register 1                                   */

    struct {
      __IOM uint32_t FB0        : 1;            /*!< (@ 0x00000000) Filter bits                                                */
      __IOM uint32_t FB1        : 1;            /*!< (@ 0x00000001) Filter bits                                                */
      __IOM uint32_t FB2        : 1;            /*!< (@ 0x00000002) Filter bits                                                */
      __IOM uint32_t FB3        : 1;            /*!< (@ 0x00000003) Filter bits                                                */
      __IOM uint32_t FB4        : 1;            /*!< (@ 0x00000004) Filter bits                                                */
      __IOM uint32_t FB5        : 1;            /*!< (@ 0x00000005) Filter bits                                                */
      __IOM uint32_t FB6        : 1;            /*!< (@ 0x00000006) Filter bits                                                */
      __IOM uint32_t FB7        : 1;            /*!< (@ 0x00000007) Filter bits                                                */
      __IOM uint32_t FB8        : 1;            /*!< (@ 0x00000008) Filter bits                                                */
      __IOM uint32_t FB9        : 1;            /*!< (@ 0x00000009) Filter bits                                                */
      __IOM uint32_t FB10       : 1;            /*!< (@ 0x0000000A) Filter bits                                                */
      __IOM uint32_t FB11       : 1;            /*!< (@ 0x0000000B) Filter bits                                                */
      __IOM uint32_t FB12       : 1;            /*!< (@ 0x0000000C) Filter bits                                                */
      __IOM uint32_t FB13       : 1;            /*!< (@ 0x0000000D) Filter bits                                                */
      __IOM uint32_t FB14       : 1;            /*!< (@ 0x0000000E) Filter bits                                                */
      __IOM uint32_t FB15       : 1;            /*!< (@ 0x0000000F) Filter bits                                                */
      __IOM uint32_t FB16       : 1;            /*!< (@ 0x00000010) Filter bits                                                */
      __IOM uint32_t FB17       : 1;            /*!< (@ 0x00000011) Filter bits                                                */
      __IOM uint32_t FB18       : 1;            /*!< (@ 0x00000012) Filter bits                                                */
      __IOM uint32_t FB19       : 1;            /*!< (@ 0x00000013) Filter bits                                                */
      __IOM uint32_t FB20       : 1;            /*!< (@ 0x00000014) Filter bits                                                */
      __IOM uint32_t FB21       : 1;            /*!< (@ 0x00000015) Filter bits                                                */
      __IOM uint32_t FB22       : 1;            /*!< (@ 0x00000016) Filter bits                                                */
      __IOM uint32_t FB23       : 1;            /*!< (@ 0x00000017) Filter bits                                                */
      __IOM uint32_t FB24       : 1;            /*!< (@ 0x00000018) Filter bits                                                */
      __IOM uint32_t FB25       : 1;            /*!< (@ 0x00000019) Filter bits                                                */
      __IOM uint32_t FB26       : 1;            /*!< (@ 0x0000001A) Filter bits                                                */
      __IOM uint32_t FB27       : 1;            /*!< (@ 0x0000001B) Filter bits                                                */
      __IOM uint32_t FB28       : 1;            /*!< (@ 0x0000001C) Filter bits                                                */
      __IOM uint32_t FB29       : 1;            /*!< (@ 0x0000001D) Filter bits                                                */
      __IOM uint32_t FB30       : 1;            /*!< (@ 0x0000001E) Filter bits                                                */
      __IOM uint32_t FB31       : 1;            /*!< (@ 0x0000001F) Filter bits                                                */
    } bit;
  } F1R1;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000024C) Filter bank 1 register 2                                   */

    struct {
      __IOM uint32_t FB0        : 1;            /*!< (@ 0x00000000) Filter bits                                                */
      __IOM uint32_t FB1        : 1;            /*!< (@ 0x00000001) Filter bits                                                */
      __IOM uint32_t FB2        : 1;            /*!< (@ 0x00000002) Filter bits                                                */
      __IOM uint32_t FB3        : 1;            /*!< (@ 0x00000003) Filter bits                                                */
      __IOM uint32_t FB4        : 1;            /*!< (@ 0x00000004) Filter bits                                                */
      __IOM uint32_t FB5        : 1;            /*!< (@ 0x00000005) Filter bits                                                */
      __IOM uint32_t FB6        : 1;            /*!< (@ 0x00000006) Filter bits                                                */
      __IOM uint32_t FB7        : 1;            /*!< (@ 0x00000007) Filter bits                                                */
      __IOM uint32_t FB8        : 1;            /*!< (@ 0x00000008) Filter bits                                                */
      __IOM uint32_t FB9        : 1;            /*!< (@ 0x00000009) Filter bits                                                */
      __IOM uint32_t FB10       : 1;            /*!< (@ 0x0000000A) Filter bits                                                */
      __IOM uint32_t FB11       : 1;            /*!< (@ 0x0000000B) Filter bits                                                */
      __IOM uint32_t FB12       : 1;            /*!< (@ 0x0000000C) Filter bits                                                */
      __IOM uint32_t FB13       : 1;            /*!< (@ 0x0000000D) Filter bits                                                */
      __IOM uint32_t FB14       : 1;            /*!< (@ 0x0000000E) Filter bits                                                */
      __IOM uint32_t FB15       : 1;            /*!< (@ 0x0000000F) Filter bits                                                */
      __IOM uint32_t FB16       : 1;            /*!< (@ 0x00000010) Filter bits                                                */
      __IOM uint32_t FB17       : 1;            /*!< (@ 0x00000011) Filter bits                                                */
      __IOM uint32_t FB18       : 1;            /*!< (@ 0x00000012) Filter bits                                                */
      __IOM uint32_t FB19       : 1;            /*!< (@ 0x00000013) Filter bits                                                */
      __IOM uint32_t FB20       : 1;            /*!< (@ 0x00000014) Filter bits                                                */
      __IOM uint32_t FB21       : 1;            /*!< (@ 0x00000015) Filter bits                                                */
      __IOM uint32_t FB22       : 1;            /*!< (@ 0x00000016) Filter bits                                                */
      __IOM uint32_t FB23       : 1;            /*!< (@ 0x00000017) Filter bits                                                */
      __IOM uint32_t FB24       : 1;            /*!< (@ 0x00000018) Filter bits                                                */
      __IOM uint32_t FB25       : 1;            /*!< (@ 0x00000019) Filter bits                                                */
      __IOM uint32_t FB26       : 1;            /*!< (@ 0x0000001A) Filter bits                                                */
      __IOM uint32_t FB27       : 1;            /*!< (@ 0x0000001B) Filter bits                                                */
      __IOM uint32_t FB28       : 1;            /*!< (@ 0x0000001C) Filter bits                                                */
      __IOM uint32_t FB29       : 1;            /*!< (@ 0x0000001D) Filter bits                                                */
      __IOM uint32_t FB30       : 1;            /*!< (@ 0x0000001E) Filter bits                                                */
      __IOM uint32_t FB31       : 1;            /*!< (@ 0x0000001F) Filter bits                                                */
    } bit;
  } F1R2;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000250) Filter bank 2 register 1                                   */

    struct {
      __IOM uint32_t FB0        : 1;            /*!< (@ 0x00000000) Filter bits                                                */
      __IOM uint32_t FB1        : 1;            /*!< (@ 0x00000001) Filter bits                                                */
      __IOM uint32_t FB2        : 1;            /*!< (@ 0x00000002) Filter bits                                                */
      __IOM uint32_t FB3        : 1;            /*!< (@ 0x00000003) Filter bits                                                */
      __IOM uint32_t FB4        : 1;            /*!< (@ 0x00000004) Filter bits                                                */
      __IOM uint32_t FB5        : 1;            /*!< (@ 0x00000005) Filter bits                                                */
      __IOM uint32_t FB6        : 1;            /*!< (@ 0x00000006) Filter bits                                                */
      __IOM uint32_t FB7        : 1;            /*!< (@ 0x00000007) Filter bits                                                */
      __IOM uint32_t FB8        : 1;            /*!< (@ 0x00000008) Filter bits                                                */
      __IOM uint32_t FB9        : 1;            /*!< (@ 0x00000009) Filter bits                                                */
      __IOM uint32_t FB10       : 1;            /*!< (@ 0x0000000A) Filter bits                                                */
      __IOM uint32_t FB11       : 1;            /*!< (@ 0x0000000B) Filter bits                                                */
      __IOM uint32_t FB12       : 1;            /*!< (@ 0x0000000C) Filter bits                                                */
      __IOM uint32_t FB13       : 1;            /*!< (@ 0x0000000D) Filter bits                                                */
      __IOM uint32_t FB14       : 1;            /*!< (@ 0x0000000E) Filter bits                                                */
      __IOM uint32_t FB15       : 1;            /*!< (@ 0x0000000F) Filter bits                                                */
      __IOM uint32_t FB16       : 1;            /*!< (@ 0x00000010) Filter bits                                                */
      __IOM uint32_t FB17       : 1;            /*!< (@ 0x00000011) Filter bits                                                */
      __IOM uint32_t FB18       : 1;            /*!< (@ 0x00000012) Filter bits                                                */
      __IOM uint32_t FB19       : 1;            /*!< (@ 0x00000013) Filter bits                                                */
      __IOM uint32_t FB20       : 1;            /*!< (@ 0x00000014) Filter bits                                                */
      __IOM uint32_t FB21       : 1;            /*!< (@ 0x00000015) Filter bits                                                */
      __IOM uint32_t FB22       : 1;            /*!< (@ 0x00000016) Filter bits                                                */
      __IOM uint32_t FB23       : 1;            /*!< (@ 0x00000017) Filter bits                                                */
      __IOM uint32_t FB24       : 1;            /*!< (@ 0x00000018) Filter bits                                                */
      __IOM uint32_t FB25       : 1;            /*!< (@ 0x00000019) Filter bits                                                */
      __IOM uint32_t FB26       : 1;            /*!< (@ 0x0000001A) Filter bits                                                */
      __IOM uint32_t FB27       : 1;            /*!< (@ 0x0000001B) Filter bits                                                */
      __IOM uint32_t FB28       : 1;            /*!< (@ 0x0000001C) Filter bits                                                */
      __IOM uint32_t FB29       : 1;            /*!< (@ 0x0000001D) Filter bits                                                */
      __IOM uint32_t FB30       : 1;            /*!< (@ 0x0000001E) Filter bits                                                */
      __IOM uint32_t FB31       : 1;            /*!< (@ 0x0000001F) Filter bits                                                */
    } bit;
  } F2R1;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000254) Filter bank 2 register 2                                   */

    struct {
      __IOM uint32_t FB0        : 1;            /*!< (@ 0x00000000) Filter bits                                                */
      __IOM uint32_t FB1        : 1;            /*!< (@ 0x00000001) Filter bits                                                */
      __IOM uint32_t FB2        : 1;            /*!< (@ 0x00000002) Filter bits                                                */
      __IOM uint32_t FB3        : 1;            /*!< (@ 0x00000003) Filter bits                                                */
      __IOM uint32_t FB4        : 1;            /*!< (@ 0x00000004) Filter bits                                                */
      __IOM uint32_t FB5        : 1;            /*!< (@ 0x00000005) Filter bits                                                */
      __IOM uint32_t FB6        : 1;            /*!< (@ 0x00000006) Filter bits                                                */
      __IOM uint32_t FB7        : 1;            /*!< (@ 0x00000007) Filter bits                                                */
      __IOM uint32_t FB8        : 1;            /*!< (@ 0x00000008) Filter bits                                                */
      __IOM uint32_t FB9        : 1;            /*!< (@ 0x00000009) Filter bits                                                */
      __IOM uint32_t FB10       : 1;            /*!< (@ 0x0000000A) Filter bits                                                */
      __IOM uint32_t FB11       : 1;            /*!< (@ 0x0000000B) Filter bits                                                */
      __IOM uint32_t FB12       : 1;            /*!< (@ 0x0000000C) Filter bits                                                */
      __IOM uint32_t FB13       : 1;            /*!< (@ 0x0000000D) Filter bits                                                */
      __IOM uint32_t FB14       : 1;            /*!< (@ 0x0000000E) Filter bits                                                */
      __IOM uint32_t FB15       : 1;            /*!< (@ 0x0000000F) Filter bits                                                */
      __IOM uint32_t FB16       : 1;            /*!< (@ 0x00000010) Filter bits                                                */
      __IOM uint32_t FB17       : 1;            /*!< (@ 0x00000011) Filter bits                                                */
      __IOM uint32_t FB18       : 1;            /*!< (@ 0x00000012) Filter bits                                                */
      __IOM uint32_t FB19       : 1;            /*!< (@ 0x00000013) Filter bits                                                */
      __IOM uint32_t FB20       : 1;            /*!< (@ 0x00000014) Filter bits                                                */
      __IOM uint32_t FB21       : 1;            /*!< (@ 0x00000015) Filter bits                                                */
      __IOM uint32_t FB22       : 1;            /*!< (@ 0x00000016) Filter bits                                                */
      __IOM uint32_t FB23       : 1;            /*!< (@ 0x00000017) Filter bits                                                */
      __IOM uint32_t FB24       : 1;            /*!< (@ 0x00000018) Filter bits                                                */
      __IOM uint32_t FB25       : 1;            /*!< (@ 0x00000019) Filter bits                                                */
      __IOM uint32_t FB26       : 1;            /*!< (@ 0x0000001A) Filter bits                                                */
      __IOM uint32_t FB27       : 1;            /*!< (@ 0x0000001B) Filter bits                                                */
      __IOM uint32_t FB28       : 1;            /*!< (@ 0x0000001C) Filter bits                                                */
      __IOM uint32_t FB29       : 1;            /*!< (@ 0x0000001D) Filter bits                                                */
      __IOM uint32_t FB30       : 1;            /*!< (@ 0x0000001E) Filter bits                                                */
      __IOM uint32_t FB31       : 1;            /*!< (@ 0x0000001F) Filter bits                                                */
    } bit;
  } F2R2;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000258) Filter bank 3 register 1                                   */

    struct {
      __IOM uint32_t FB0        : 1;            /*!< (@ 0x00000000) Filter bits                                                */
      __IOM uint32_t FB1        : 1;            /*!< (@ 0x00000001) Filter bits                                                */
      __IOM uint32_t FB2        : 1;            /*!< (@ 0x00000002) Filter bits                                                */
      __IOM uint32_t FB3        : 1;            /*!< (@ 0x00000003) Filter bits                                                */
      __IOM uint32_t FB4        : 1;            /*!< (@ 0x00000004) Filter bits                                                */
      __IOM uint32_t FB5        : 1;            /*!< (@ 0x00000005) Filter bits                                                */
      __IOM uint32_t FB6        : 1;            /*!< (@ 0x00000006) Filter bits                                                */
      __IOM uint32_t FB7        : 1;            /*!< (@ 0x00000007) Filter bits                                                */
      __IOM uint32_t FB8        : 1;            /*!< (@ 0x00000008) Filter bits                                                */
      __IOM uint32_t FB9        : 1;            /*!< (@ 0x00000009) Filter bits                                                */
      __IOM uint32_t FB10       : 1;            /*!< (@ 0x0000000A) Filter bits                                                */
      __IOM uint32_t FB11       : 1;            /*!< (@ 0x0000000B) Filter bits                                                */
      __IOM uint32_t FB12       : 1;            /*!< (@ 0x0000000C) Filter bits                                                */
      __IOM uint32_t FB13       : 1;            /*!< (@ 0x0000000D) Filter bits                                                */
      __IOM uint32_t FB14       : 1;            /*!< (@ 0x0000000E) Filter bits                                                */
      __IOM uint32_t FB15       : 1;            /*!< (@ 0x0000000F) Filter bits                                                */
      __IOM uint32_t FB16       : 1;            /*!< (@ 0x00000010) Filter bits                                                */
      __IOM uint32_t FB17       : 1;            /*!< (@ 0x00000011) Filter bits                                                */
      __IOM uint32_t FB18       : 1;            /*!< (@ 0x00000012) Filter bits                                                */
      __IOM uint32_t FB19       : 1;            /*!< (@ 0x00000013) Filter bits                                                */
      __IOM uint32_t FB20       : 1;            /*!< (@ 0x00000014) Filter bits                                                */
      __IOM uint32_t FB21       : 1;            /*!< (@ 0x00000015) Filter bits                                                */
      __IOM uint32_t FB22       : 1;            /*!< (@ 0x00000016) Filter bits                                                */
      __IOM uint32_t FB23       : 1;            /*!< (@ 0x00000017) Filter bits                                                */
      __IOM uint32_t FB24       : 1;            /*!< (@ 0x00000018) Filter bits                                                */
      __IOM uint32_t FB25       : 1;            /*!< (@ 0x00000019) Filter bits                                                */
      __IOM uint32_t FB26       : 1;            /*!< (@ 0x0000001A) Filter bits                                                */
      __IOM uint32_t FB27       : 1;            /*!< (@ 0x0000001B) Filter bits                                                */
      __IOM uint32_t FB28       : 1;            /*!< (@ 0x0000001C) Filter bits                                                */
      __IOM uint32_t FB29       : 1;            /*!< (@ 0x0000001D) Filter bits                                                */
      __IOM uint32_t FB30       : 1;            /*!< (@ 0x0000001E) Filter bits                                                */
      __IOM uint32_t FB31       : 1;            /*!< (@ 0x0000001F) Filter bits                                                */
    } bit;
  } F3R1;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000025C) Filter bank 3 register 2                                   */

    struct {
      __IOM uint32_t FB0        : 1;            /*!< (@ 0x00000000) Filter bits                                                */
      __IOM uint32_t FB1        : 1;            /*!< (@ 0x00000001) Filter bits                                                */
      __IOM uint32_t FB2        : 1;            /*!< (@ 0x00000002) Filter bits                                                */
      __IOM uint32_t FB3        : 1;            /*!< (@ 0x00000003) Filter bits                                                */
      __IOM uint32_t FB4        : 1;            /*!< (@ 0x00000004) Filter bits                                                */
      __IOM uint32_t FB5        : 1;            /*!< (@ 0x00000005) Filter bits                                                */
      __IOM uint32_t FB6        : 1;            /*!< (@ 0x00000006) Filter bits                                                */
      __IOM uint32_t FB7        : 1;            /*!< (@ 0x00000007) Filter bits                                                */
      __IOM uint32_t FB8        : 1;            /*!< (@ 0x00000008) Filter bits                                                */
      __IOM uint32_t FB9        : 1;            /*!< (@ 0x00000009) Filter bits                                                */
      __IOM uint32_t FB10       : 1;            /*!< (@ 0x0000000A) Filter bits                                                */
      __IOM uint32_t FB11       : 1;            /*!< (@ 0x0000000B) Filter bits                                                */
      __IOM uint32_t FB12       : 1;            /*!< (@ 0x0000000C) Filter bits                                                */
      __IOM uint32_t FB13       : 1;            /*!< (@ 0x0000000D) Filter bits                                                */
      __IOM uint32_t FB14       : 1;            /*!< (@ 0x0000000E) Filter bits                                                */
      __IOM uint32_t FB15       : 1;            /*!< (@ 0x0000000F) Filter bits                                                */
      __IOM uint32_t FB16       : 1;            /*!< (@ 0x00000010) Filter bits                                                */
      __IOM uint32_t FB17       : 1;            /*!< (@ 0x00000011) Filter bits                                                */
      __IOM uint32_t FB18       : 1;            /*!< (@ 0x00000012) Filter bits                                                */
      __IOM uint32_t FB19       : 1;            /*!< (@ 0x00000013) Filter bits                                                */
      __IOM uint32_t FB20       : 1;            /*!< (@ 0x00000014) Filter bits                                                */
      __IOM uint32_t FB21       : 1;            /*!< (@ 0x00000015) Filter bits                                                */
      __IOM uint32_t FB22       : 1;            /*!< (@ 0x00000016) Filter bits                                                */
      __IOM uint32_t FB23       : 1;            /*!< (@ 0x00000017) Filter bits                                                */
      __IOM uint32_t FB24       : 1;            /*!< (@ 0x00000018) Filter bits                                                */
      __IOM uint32_t FB25       : 1;            /*!< (@ 0x00000019) Filter bits                                                */
      __IOM uint32_t FB26       : 1;            /*!< (@ 0x0000001A) Filter bits                                                */
      __IOM uint32_t FB27       : 1;            /*!< (@ 0x0000001B) Filter bits                                                */
      __IOM uint32_t FB28       : 1;            /*!< (@ 0x0000001C) Filter bits                                                */
      __IOM uint32_t FB29       : 1;            /*!< (@ 0x0000001D) Filter bits                                                */
      __IOM uint32_t FB30       : 1;            /*!< (@ 0x0000001E) Filter bits                                                */
      __IOM uint32_t FB31       : 1;            /*!< (@ 0x0000001F) Filter bits                                                */
    } bit;
  } F3R2;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000260) Filter bank 4 register 1                                   */

    struct {
      __IOM uint32_t FB0        : 1;            /*!< (@ 0x00000000) Filter bits                                                */
      __IOM uint32_t FB1        : 1;            /*!< (@ 0x00000001) Filter bits                                                */
      __IOM uint32_t FB2        : 1;            /*!< (@ 0x00000002) Filter bits                                                */
      __IOM uint32_t FB3        : 1;            /*!< (@ 0x00000003) Filter bits                                                */
      __IOM uint32_t FB4        : 1;            /*!< (@ 0x00000004) Filter bits                                                */
      __IOM uint32_t FB5        : 1;            /*!< (@ 0x00000005) Filter bits                                                */
      __IOM uint32_t FB6        : 1;            /*!< (@ 0x00000006) Filter bits                                                */
      __IOM uint32_t FB7        : 1;            /*!< (@ 0x00000007) Filter bits                                                */
      __IOM uint32_t FB8        : 1;            /*!< (@ 0x00000008) Filter bits                                                */
      __IOM uint32_t FB9        : 1;            /*!< (@ 0x00000009) Filter bits                                                */
      __IOM uint32_t FB10       : 1;            /*!< (@ 0x0000000A) Filter bits                                                */
      __IOM uint32_t FB11       : 1;            /*!< (@ 0x0000000B) Filter bits                                                */
      __IOM uint32_t FB12       : 1;            /*!< (@ 0x0000000C) Filter bits                                                */
      __IOM uint32_t FB13       : 1;            /*!< (@ 0x0000000D) Filter bits                                                */
      __IOM uint32_t FB14       : 1;            /*!< (@ 0x0000000E) Filter bits                                                */
      __IOM uint32_t FB15       : 1;            /*!< (@ 0x0000000F) Filter bits                                                */
      __IOM uint32_t FB16       : 1;            /*!< (@ 0x00000010) Filter bits                                                */
      __IOM uint32_t FB17       : 1;            /*!< (@ 0x00000011) Filter bits                                                */
      __IOM uint32_t FB18       : 1;            /*!< (@ 0x00000012) Filter bits                                                */
      __IOM uint32_t FB19       : 1;            /*!< (@ 0x00000013) Filter bits                                                */
      __IOM uint32_t FB20       : 1;            /*!< (@ 0x00000014) Filter bits                                                */
      __IOM uint32_t FB21       : 1;            /*!< (@ 0x00000015) Filter bits                                                */
      __IOM uint32_t FB22       : 1;            /*!< (@ 0x00000016) Filter bits                                                */
      __IOM uint32_t FB23       : 1;            /*!< (@ 0x00000017) Filter bits                                                */
      __IOM uint32_t FB24       : 1;            /*!< (@ 0x00000018) Filter bits                                                */
      __IOM uint32_t FB25       : 1;            /*!< (@ 0x00000019) Filter bits                                                */
      __IOM uint32_t FB26       : 1;            /*!< (@ 0x0000001A) Filter bits                                                */
      __IOM uint32_t FB27       : 1;            /*!< (@ 0x0000001B) Filter bits                                                */
      __IOM uint32_t FB28       : 1;            /*!< (@ 0x0000001C) Filter bits                                                */
      __IOM uint32_t FB29       : 1;            /*!< (@ 0x0000001D) Filter bits                                                */
      __IOM uint32_t FB30       : 1;            /*!< (@ 0x0000001E) Filter bits                                                */
      __IOM uint32_t FB31       : 1;            /*!< (@ 0x0000001F) Filter bits                                                */
    } bit;
  } F4R1;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000264) Filter bank 4 register 2                                   */

    struct {
      __IOM uint32_t FB0        : 1;            /*!< (@ 0x00000000) Filter bits                                                */
      __IOM uint32_t FB1        : 1;            /*!< (@ 0x00000001) Filter bits                                                */
      __IOM uint32_t FB2        : 1;            /*!< (@ 0x00000002) Filter bits                                                */
      __IOM uint32_t FB3        : 1;            /*!< (@ 0x00000003) Filter bits                                                */
      __IOM uint32_t FB4        : 1;            /*!< (@ 0x00000004) Filter bits                                                */
      __IOM uint32_t FB5        : 1;            /*!< (@ 0x00000005) Filter bits                                                */
      __IOM uint32_t FB6        : 1;            /*!< (@ 0x00000006) Filter bits                                                */
      __IOM uint32_t FB7        : 1;            /*!< (@ 0x00000007) Filter bits                                                */
      __IOM uint32_t FB8        : 1;            /*!< (@ 0x00000008) Filter bits                                                */
      __IOM uint32_t FB9        : 1;            /*!< (@ 0x00000009) Filter bits                                                */
      __IOM uint32_t FB10       : 1;            /*!< (@ 0x0000000A) Filter bits                                                */
      __IOM uint32_t FB11       : 1;            /*!< (@ 0x0000000B) Filter bits                                                */
      __IOM uint32_t FB12       : 1;            /*!< (@ 0x0000000C) Filter bits                                                */
      __IOM uint32_t FB13       : 1;            /*!< (@ 0x0000000D) Filter bits                                                */
      __IOM uint32_t FB14       : 1;            /*!< (@ 0x0000000E) Filter bits                                                */
      __IOM uint32_t FB15       : 1;            /*!< (@ 0x0000000F) Filter bits                                                */
      __IOM uint32_t FB16       : 1;            /*!< (@ 0x00000010) Filter bits                                                */
      __IOM uint32_t FB17       : 1;            /*!< (@ 0x00000011) Filter bits                                                */
      __IOM uint32_t FB18       : 1;            /*!< (@ 0x00000012) Filter bits                                                */
      __IOM uint32_t FB19       : 1;            /*!< (@ 0x00000013) Filter bits                                                */
      __IOM uint32_t FB20       : 1;            /*!< (@ 0x00000014) Filter bits                                                */
      __IOM uint32_t FB21       : 1;            /*!< (@ 0x00000015) Filter bits                                                */
      __IOM uint32_t FB22       : 1;            /*!< (@ 0x00000016) Filter bits                                                */
      __IOM uint32_t FB23       : 1;            /*!< (@ 0x00000017) Filter bits                                                */
      __IOM uint32_t FB24       : 1;            /*!< (@ 0x00000018) Filter bits                                                */
      __IOM uint32_t FB25       : 1;            /*!< (@ 0x00000019) Filter bits                                                */
      __IOM uint32_t FB26       : 1;            /*!< (@ 0x0000001A) Filter bits                                                */
      __IOM uint32_t FB27       : 1;            /*!< (@ 0x0000001B) Filter bits                                                */
      __IOM uint32_t FB28       : 1;            /*!< (@ 0x0000001C) Filter bits                                                */
      __IOM uint32_t FB29       : 1;            /*!< (@ 0x0000001D) Filter bits                                                */
      __IOM uint32_t FB30       : 1;            /*!< (@ 0x0000001E) Filter bits                                                */
      __IOM uint32_t FB31       : 1;            /*!< (@ 0x0000001F) Filter bits                                                */
    } bit;
  } F4R2;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000268) Filter bank 5 register 1                                   */

    struct {
      __IOM uint32_t FB0        : 1;            /*!< (@ 0x00000000) Filter bits                                                */
      __IOM uint32_t FB1        : 1;            /*!< (@ 0x00000001) Filter bits                                                */
      __IOM uint32_t FB2        : 1;            /*!< (@ 0x00000002) Filter bits                                                */
      __IOM uint32_t FB3        : 1;            /*!< (@ 0x00000003) Filter bits                                                */
      __IOM uint32_t FB4        : 1;            /*!< (@ 0x00000004) Filter bits                                                */
      __IOM uint32_t FB5        : 1;            /*!< (@ 0x00000005) Filter bits                                                */
      __IOM uint32_t FB6        : 1;            /*!< (@ 0x00000006) Filter bits                                                */
      __IOM uint32_t FB7        : 1;            /*!< (@ 0x00000007) Filter bits                                                */
      __IOM uint32_t FB8        : 1;            /*!< (@ 0x00000008) Filter bits                                                */
      __IOM uint32_t FB9        : 1;            /*!< (@ 0x00000009) Filter bits                                                */
      __IOM uint32_t FB10       : 1;            /*!< (@ 0x0000000A) Filter bits                                                */
      __IOM uint32_t FB11       : 1;            /*!< (@ 0x0000000B) Filter bits                                                */
      __IOM uint32_t FB12       : 1;            /*!< (@ 0x0000000C) Filter bits                                                */
      __IOM uint32_t FB13       : 1;            /*!< (@ 0x0000000D) Filter bits                                                */
      __IOM uint32_t FB14       : 1;            /*!< (@ 0x0000000E) Filter bits                                                */
      __IOM uint32_t FB15       : 1;            /*!< (@ 0x0000000F) Filter bits                                                */
      __IOM uint32_t FB16       : 1;            /*!< (@ 0x00000010) Filter bits                                                */
      __IOM uint32_t FB17       : 1;            /*!< (@ 0x00000011) Filter bits                                                */
      __IOM uint32_t FB18       : 1;            /*!< (@ 0x00000012) Filter bits                                                */
      __IOM uint32_t FB19       : 1;            /*!< (@ 0x00000013) Filter bits                                                */
      __IOM uint32_t FB20       : 1;            /*!< (@ 0x00000014) Filter bits                                                */
      __IOM uint32_t FB21       : 1;            /*!< (@ 0x00000015) Filter bits                                                */
      __IOM uint32_t FB22       : 1;            /*!< (@ 0x00000016) Filter bits                                                */
      __IOM uint32_t FB23       : 1;            /*!< (@ 0x00000017) Filter bits                                                */
      __IOM uint32_t FB24       : 1;            /*!< (@ 0x00000018) Filter bits                                                */
      __IOM uint32_t FB25       : 1;            /*!< (@ 0x00000019) Filter bits                                                */
      __IOM uint32_t FB26       : 1;            /*!< (@ 0x0000001A) Filter bits                                                */
      __IOM uint32_t FB27       : 1;            /*!< (@ 0x0000001B) Filter bits                                                */
      __IOM uint32_t FB28       : 1;            /*!< (@ 0x0000001C) Filter bits                                                */
      __IOM uint32_t FB29       : 1;            /*!< (@ 0x0000001D) Filter bits                                                */
      __IOM uint32_t FB30       : 1;            /*!< (@ 0x0000001E) Filter bits                                                */
      __IOM uint32_t FB31       : 1;            /*!< (@ 0x0000001F) Filter bits                                                */
    } bit;
  } F5R1;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000026C) Filter bank 5 register 2                                   */

    struct {
      __IOM uint32_t FB0        : 1;            /*!< (@ 0x00000000) Filter bits                                                */
      __IOM uint32_t FB1        : 1;            /*!< (@ 0x00000001) Filter bits                                                */
      __IOM uint32_t FB2        : 1;            /*!< (@ 0x00000002) Filter bits                                                */
      __IOM uint32_t FB3        : 1;            /*!< (@ 0x00000003) Filter bits                                                */
      __IOM uint32_t FB4        : 1;            /*!< (@ 0x00000004) Filter bits                                                */
      __IOM uint32_t FB5        : 1;            /*!< (@ 0x00000005) Filter bits                                                */
      __IOM uint32_t FB6        : 1;            /*!< (@ 0x00000006) Filter bits                                                */
      __IOM uint32_t FB7        : 1;            /*!< (@ 0x00000007) Filter bits                                                */
      __IOM uint32_t FB8        : 1;            /*!< (@ 0x00000008) Filter bits                                                */
      __IOM uint32_t FB9        : 1;            /*!< (@ 0x00000009) Filter bits                                                */
      __IOM uint32_t FB10       : 1;            /*!< (@ 0x0000000A) Filter bits                                                */
      __IOM uint32_t FB11       : 1;            /*!< (@ 0x0000000B) Filter bits                                                */
      __IOM uint32_t FB12       : 1;            /*!< (@ 0x0000000C) Filter bits                                                */
      __IOM uint32_t FB13       : 1;            /*!< (@ 0x0000000D) Filter bits                                                */
      __IOM uint32_t FB14       : 1;            /*!< (@ 0x0000000E) Filter bits                                                */
      __IOM uint32_t FB15       : 1;            /*!< (@ 0x0000000F) Filter bits                                                */
      __IOM uint32_t FB16       : 1;            /*!< (@ 0x00000010) Filter bits                                                */
      __IOM uint32_t FB17       : 1;            /*!< (@ 0x00000011) Filter bits                                                */
      __IOM uint32_t FB18       : 1;            /*!< (@ 0x00000012) Filter bits                                                */
      __IOM uint32_t FB19       : 1;            /*!< (@ 0x00000013) Filter bits                                                */
      __IOM uint32_t FB20       : 1;            /*!< (@ 0x00000014) Filter bits                                                */
      __IOM uint32_t FB21       : 1;            /*!< (@ 0x00000015) Filter bits                                                */
      __IOM uint32_t FB22       : 1;            /*!< (@ 0x00000016) Filter bits                                                */
      __IOM uint32_t FB23       : 1;            /*!< (@ 0x00000017) Filter bits                                                */
      __IOM uint32_t FB24       : 1;            /*!< (@ 0x00000018) Filter bits                                                */
      __IOM uint32_t FB25       : 1;            /*!< (@ 0x00000019) Filter bits                                                */
      __IOM uint32_t FB26       : 1;            /*!< (@ 0x0000001A) Filter bits                                                */
      __IOM uint32_t FB27       : 1;            /*!< (@ 0x0000001B) Filter bits                                                */
      __IOM uint32_t FB28       : 1;            /*!< (@ 0x0000001C) Filter bits                                                */
      __IOM uint32_t FB29       : 1;            /*!< (@ 0x0000001D) Filter bits                                                */
      __IOM uint32_t FB30       : 1;            /*!< (@ 0x0000001E) Filter bits                                                */
      __IOM uint32_t FB31       : 1;            /*!< (@ 0x0000001F) Filter bits                                                */
    } bit;
  } F5R2;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000270) Filter bank 6 register 1                                   */

    struct {
      __IOM uint32_t FB0        : 1;            /*!< (@ 0x00000000) Filter bits                                                */
      __IOM uint32_t FB1        : 1;            /*!< (@ 0x00000001) Filter bits                                                */
      __IOM uint32_t FB2        : 1;            /*!< (@ 0x00000002) Filter bits                                                */
      __IOM uint32_t FB3        : 1;            /*!< (@ 0x00000003) Filter bits                                                */
      __IOM uint32_t FB4        : 1;            /*!< (@ 0x00000004) Filter bits                                                */
      __IOM uint32_t FB5        : 1;            /*!< (@ 0x00000005) Filter bits                                                */
      __IOM uint32_t FB6        : 1;            /*!< (@ 0x00000006) Filter bits                                                */
      __IOM uint32_t FB7        : 1;            /*!< (@ 0x00000007) Filter bits                                                */
      __IOM uint32_t FB8        : 1;            /*!< (@ 0x00000008) Filter bits                                                */
      __IOM uint32_t FB9        : 1;            /*!< (@ 0x00000009) Filter bits                                                */
      __IOM uint32_t FB10       : 1;            /*!< (@ 0x0000000A) Filter bits                                                */
      __IOM uint32_t FB11       : 1;            /*!< (@ 0x0000000B) Filter bits                                                */
      __IOM uint32_t FB12       : 1;            /*!< (@ 0x0000000C) Filter bits                                                */
      __IOM uint32_t FB13       : 1;            /*!< (@ 0x0000000D) Filter bits                                                */
      __IOM uint32_t FB14       : 1;            /*!< (@ 0x0000000E) Filter bits                                                */
      __IOM uint32_t FB15       : 1;            /*!< (@ 0x0000000F) Filter bits                                                */
      __IOM uint32_t FB16       : 1;            /*!< (@ 0x00000010) Filter bits                                                */
      __IOM uint32_t FB17       : 1;            /*!< (@ 0x00000011) Filter bits                                                */
      __IOM uint32_t FB18       : 1;            /*!< (@ 0x00000012) Filter bits                                                */
      __IOM uint32_t FB19       : 1;            /*!< (@ 0x00000013) Filter bits                                                */
      __IOM uint32_t FB20       : 1;            /*!< (@ 0x00000014) Filter bits                                                */
      __IOM uint32_t FB21       : 1;            /*!< (@ 0x00000015) Filter bits                                                */
      __IOM uint32_t FB22       : 1;            /*!< (@ 0x00000016) Filter bits                                                */
      __IOM uint32_t FB23       : 1;            /*!< (@ 0x00000017) Filter bits                                                */
      __IOM uint32_t FB24       : 1;            /*!< (@ 0x00000018) Filter bits                                                */
      __IOM uint32_t FB25       : 1;            /*!< (@ 0x00000019) Filter bits                                                */
      __IOM uint32_t FB26       : 1;            /*!< (@ 0x0000001A) Filter bits                                                */
      __IOM uint32_t FB27       : 1;            /*!< (@ 0x0000001B) Filter bits                                                */
      __IOM uint32_t FB28       : 1;            /*!< (@ 0x0000001C) Filter bits                                                */
      __IOM uint32_t FB29       : 1;            /*!< (@ 0x0000001D) Filter bits                                                */
      __IOM uint32_t FB30       : 1;            /*!< (@ 0x0000001E) Filter bits                                                */
      __IOM uint32_t FB31       : 1;            /*!< (@ 0x0000001F) Filter bits                                                */
    } bit;
  } F6R1;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000274) Filter bank 6 register 2                                   */

    struct {
      __IOM uint32_t FB0        : 1;            /*!< (@ 0x00000000) Filter bits                                                */
      __IOM uint32_t FB1        : 1;            /*!< (@ 0x00000001) Filter bits                                                */
      __IOM uint32_t FB2        : 1;            /*!< (@ 0x00000002) Filter bits                                                */
      __IOM uint32_t FB3        : 1;            /*!< (@ 0x00000003) Filter bits                                                */
      __IOM uint32_t FB4        : 1;            /*!< (@ 0x00000004) Filter bits                                                */
      __IOM uint32_t FB5        : 1;            /*!< (@ 0x00000005) Filter bits                                                */
      __IOM uint32_t FB6        : 1;            /*!< (@ 0x00000006) Filter bits                                                */
      __IOM uint32_t FB7        : 1;            /*!< (@ 0x00000007) Filter bits                                                */
      __IOM uint32_t FB8        : 1;            /*!< (@ 0x00000008) Filter bits                                                */
      __IOM uint32_t FB9        : 1;            /*!< (@ 0x00000009) Filter bits                                                */
      __IOM uint32_t FB10       : 1;            /*!< (@ 0x0000000A) Filter bits                                                */
      __IOM uint32_t FB11       : 1;            /*!< (@ 0x0000000B) Filter bits                                                */
      __IOM uint32_t FB12       : 1;            /*!< (@ 0x0000000C) Filter bits                                                */
      __IOM uint32_t FB13       : 1;            /*!< (@ 0x0000000D) Filter bits                                                */
      __IOM uint32_t FB14       : 1;            /*!< (@ 0x0000000E) Filter bits                                                */
      __IOM uint32_t FB15       : 1;            /*!< (@ 0x0000000F) Filter bits                                                */
      __IOM uint32_t FB16       : 1;            /*!< (@ 0x00000010) Filter bits                                                */
      __IOM uint32_t FB17       : 1;            /*!< (@ 0x00000011) Filter bits                                                */
      __IOM uint32_t FB18       : 1;            /*!< (@ 0x00000012) Filter bits                                                */
      __IOM uint32_t FB19       : 1;            /*!< (@ 0x00000013) Filter bits                                                */
      __IOM uint32_t FB20       : 1;            /*!< (@ 0x00000014) Filter bits                                                */
      __IOM uint32_t FB21       : 1;            /*!< (@ 0x00000015) Filter bits                                                */
      __IOM uint32_t FB22       : 1;            /*!< (@ 0x00000016) Filter bits                                                */
      __IOM uint32_t FB23       : 1;            /*!< (@ 0x00000017) Filter bits                                                */
      __IOM uint32_t FB24       : 1;            /*!< (@ 0x00000018) Filter bits                                                */
      __IOM uint32_t FB25       : 1;            /*!< (@ 0x00000019) Filter bits                                                */
      __IOM uint32_t FB26       : 1;            /*!< (@ 0x0000001A) Filter bits                                                */
      __IOM uint32_t FB27       : 1;            /*!< (@ 0x0000001B) Filter bits                                                */
      __IOM uint32_t FB28       : 1;            /*!< (@ 0x0000001C) Filter bits                                                */
      __IOM uint32_t FB29       : 1;            /*!< (@ 0x0000001D) Filter bits                                                */
      __IOM uint32_t FB30       : 1;            /*!< (@ 0x0000001E) Filter bits                                                */
      __IOM uint32_t FB31       : 1;            /*!< (@ 0x0000001F) Filter bits                                                */
    } bit;
  } F6R2;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000278) Filter bank 7 register 1                                   */

    struct {
      __IOM uint32_t FB0        : 1;            /*!< (@ 0x00000000) Filter bits                                                */
      __IOM uint32_t FB1        : 1;            /*!< (@ 0x00000001) Filter bits                                                */
      __IOM uint32_t FB2        : 1;            /*!< (@ 0x00000002) Filter bits                                                */
      __IOM uint32_t FB3        : 1;            /*!< (@ 0x00000003) Filter bits                                                */
      __IOM uint32_t FB4        : 1;            /*!< (@ 0x00000004) Filter bits                                                */
      __IOM uint32_t FB5        : 1;            /*!< (@ 0x00000005) Filter bits                                                */
      __IOM uint32_t FB6        : 1;            /*!< (@ 0x00000006) Filter bits                                                */
      __IOM uint32_t FB7        : 1;            /*!< (@ 0x00000007) Filter bits                                                */
      __IOM uint32_t FB8        : 1;            /*!< (@ 0x00000008) Filter bits                                                */
      __IOM uint32_t FB9        : 1;            /*!< (@ 0x00000009) Filter bits                                                */
      __IOM uint32_t FB10       : 1;            /*!< (@ 0x0000000A) Filter bits                                                */
      __IOM uint32_t FB11       : 1;            /*!< (@ 0x0000000B) Filter bits                                                */
      __IOM uint32_t FB12       : 1;            /*!< (@ 0x0000000C) Filter bits                                                */
      __IOM uint32_t FB13       : 1;            /*!< (@ 0x0000000D) Filter bits                                                */
      __IOM uint32_t FB14       : 1;            /*!< (@ 0x0000000E) Filter bits                                                */
      __IOM uint32_t FB15       : 1;            /*!< (@ 0x0000000F) Filter bits                                                */
      __IOM uint32_t FB16       : 1;            /*!< (@ 0x00000010) Filter bits                                                */
      __IOM uint32_t FB17       : 1;            /*!< (@ 0x00000011) Filter bits                                                */
      __IOM uint32_t FB18       : 1;            /*!< (@ 0x00000012) Filter bits                                                */
      __IOM uint32_t FB19       : 1;            /*!< (@ 0x00000013) Filter bits                                                */
      __IOM uint32_t FB20       : 1;            /*!< (@ 0x00000014) Filter bits                                                */
      __IOM uint32_t FB21       : 1;            /*!< (@ 0x00000015) Filter bits                                                */
      __IOM uint32_t FB22       : 1;            /*!< (@ 0x00000016) Filter bits                                                */
      __IOM uint32_t FB23       : 1;            /*!< (@ 0x00000017) Filter bits                                                */
      __IOM uint32_t FB24       : 1;            /*!< (@ 0x00000018) Filter bits                                                */
      __IOM uint32_t FB25       : 1;            /*!< (@ 0x00000019) Filter bits                                                */
      __IOM uint32_t FB26       : 1;            /*!< (@ 0x0000001A) Filter bits                                                */
      __IOM uint32_t FB27       : 1;            /*!< (@ 0x0000001B) Filter bits                                                */
      __IOM uint32_t FB28       : 1;            /*!< (@ 0x0000001C) Filter bits                                                */
      __IOM uint32_t FB29       : 1;            /*!< (@ 0x0000001D) Filter bits                                                */
      __IOM uint32_t FB30       : 1;            /*!< (@ 0x0000001E) Filter bits                                                */
      __IOM uint32_t FB31       : 1;            /*!< (@ 0x0000001F) Filter bits                                                */
    } bit;
  } F7R1;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000027C) Filter bank 7 register 2                                   */

    struct {
      __IOM uint32_t FB0        : 1;            /*!< (@ 0x00000000) Filter bits                                                */
      __IOM uint32_t FB1        : 1;            /*!< (@ 0x00000001) Filter bits                                                */
      __IOM uint32_t FB2        : 1;            /*!< (@ 0x00000002) Filter bits                                                */
      __IOM uint32_t FB3        : 1;            /*!< (@ 0x00000003) Filter bits                                                */
      __IOM uint32_t FB4        : 1;            /*!< (@ 0x00000004) Filter bits                                                */
      __IOM uint32_t FB5        : 1;            /*!< (@ 0x00000005) Filter bits                                                */
      __IOM uint32_t FB6        : 1;            /*!< (@ 0x00000006) Filter bits                                                */
      __IOM uint32_t FB7        : 1;            /*!< (@ 0x00000007) Filter bits                                                */
      __IOM uint32_t FB8        : 1;            /*!< (@ 0x00000008) Filter bits                                                */
      __IOM uint32_t FB9        : 1;            /*!< (@ 0x00000009) Filter bits                                                */
      __IOM uint32_t FB10       : 1;            /*!< (@ 0x0000000A) Filter bits                                                */
      __IOM uint32_t FB11       : 1;            /*!< (@ 0x0000000B) Filter bits                                                */
      __IOM uint32_t FB12       : 1;            /*!< (@ 0x0000000C) Filter bits                                                */
      __IOM uint32_t FB13       : 1;            /*!< (@ 0x0000000D) Filter bits                                                */
      __IOM uint32_t FB14       : 1;            /*!< (@ 0x0000000E) Filter bits                                                */
      __IOM uint32_t FB15       : 1;            /*!< (@ 0x0000000F) Filter bits                                                */
      __IOM uint32_t FB16       : 1;            /*!< (@ 0x00000010) Filter bits                                                */
      __IOM uint32_t FB17       : 1;            /*!< (@ 0x00000011) Filter bits                                                */
      __IOM uint32_t FB18       : 1;            /*!< (@ 0x00000012) Filter bits                                                */
      __IOM uint32_t FB19       : 1;            /*!< (@ 0x00000013) Filter bits                                                */
      __IOM uint32_t FB20       : 1;            /*!< (@ 0x00000014) Filter bits                                                */
      __IOM uint32_t FB21       : 1;            /*!< (@ 0x00000015) Filter bits                                                */
      __IOM uint32_t FB22       : 1;            /*!< (@ 0x00000016) Filter bits                                                */
      __IOM uint32_t FB23       : 1;            /*!< (@ 0x00000017) Filter bits                                                */
      __IOM uint32_t FB24       : 1;            /*!< (@ 0x00000018) Filter bits                                                */
      __IOM uint32_t FB25       : 1;            /*!< (@ 0x00000019) Filter bits                                                */
      __IOM uint32_t FB26       : 1;            /*!< (@ 0x0000001A) Filter bits                                                */
      __IOM uint32_t FB27       : 1;            /*!< (@ 0x0000001B) Filter bits                                                */
      __IOM uint32_t FB28       : 1;            /*!< (@ 0x0000001C) Filter bits                                                */
      __IOM uint32_t FB29       : 1;            /*!< (@ 0x0000001D) Filter bits                                                */
      __IOM uint32_t FB30       : 1;            /*!< (@ 0x0000001E) Filter bits                                                */
      __IOM uint32_t FB31       : 1;            /*!< (@ 0x0000001F) Filter bits                                                */
    } bit;
  } F7R2;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000280) Filter bank 8 register 1                                   */

    struct {
      __IOM uint32_t FB0        : 1;            /*!< (@ 0x00000000) Filter bits                                                */
      __IOM uint32_t FB1        : 1;            /*!< (@ 0x00000001) Filter bits                                                */
      __IOM uint32_t FB2        : 1;            /*!< (@ 0x00000002) Filter bits                                                */
      __IOM uint32_t FB3        : 1;            /*!< (@ 0x00000003) Filter bits                                                */
      __IOM uint32_t FB4        : 1;            /*!< (@ 0x00000004) Filter bits                                                */
      __IOM uint32_t FB5        : 1;            /*!< (@ 0x00000005) Filter bits                                                */
      __IOM uint32_t FB6        : 1;            /*!< (@ 0x00000006) Filter bits                                                */
      __IOM uint32_t FB7        : 1;            /*!< (@ 0x00000007) Filter bits                                                */
      __IOM uint32_t FB8        : 1;            /*!< (@ 0x00000008) Filter bits                                                */
      __IOM uint32_t FB9        : 1;            /*!< (@ 0x00000009) Filter bits                                                */
      __IOM uint32_t FB10       : 1;            /*!< (@ 0x0000000A) Filter bits                                                */
      __IOM uint32_t FB11       : 1;            /*!< (@ 0x0000000B) Filter bits                                                */
      __IOM uint32_t FB12       : 1;            /*!< (@ 0x0000000C) Filter bits                                                */
      __IOM uint32_t FB13       : 1;            /*!< (@ 0x0000000D) Filter bits                                                */
      __IOM uint32_t FB14       : 1;            /*!< (@ 0x0000000E) Filter bits                                                */
      __IOM uint32_t FB15       : 1;            /*!< (@ 0x0000000F) Filter bits                                                */
      __IOM uint32_t FB16       : 1;            /*!< (@ 0x00000010) Filter bits                                                */
      __IOM uint32_t FB17       : 1;            /*!< (@ 0x00000011) Filter bits                                                */
      __IOM uint32_t FB18       : 1;            /*!< (@ 0x00000012) Filter bits                                                */
      __IOM uint32_t FB19       : 1;            /*!< (@ 0x00000013) Filter bits                                                */
      __IOM uint32_t FB20       : 1;            /*!< (@ 0x00000014) Filter bits                                                */
      __IOM uint32_t FB21       : 1;            /*!< (@ 0x00000015) Filter bits                                                */
      __IOM uint32_t FB22       : 1;            /*!< (@ 0x00000016) Filter bits                                                */
      __IOM uint32_t FB23       : 1;            /*!< (@ 0x00000017) Filter bits                                                */
      __IOM uint32_t FB24       : 1;            /*!< (@ 0x00000018) Filter bits                                                */
      __IOM uint32_t FB25       : 1;            /*!< (@ 0x00000019) Filter bits                                                */
      __IOM uint32_t FB26       : 1;            /*!< (@ 0x0000001A) Filter bits                                                */
      __IOM uint32_t FB27       : 1;            /*!< (@ 0x0000001B) Filter bits                                                */
      __IOM uint32_t FB28       : 1;            /*!< (@ 0x0000001C) Filter bits                                                */
      __IOM uint32_t FB29       : 1;            /*!< (@ 0x0000001D) Filter bits                                                */
      __IOM uint32_t FB30       : 1;            /*!< (@ 0x0000001E) Filter bits                                                */
      __IOM uint32_t FB31       : 1;            /*!< (@ 0x0000001F) Filter bits                                                */
    } bit;
  } F8R1;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000284) Filter bank 8 register 2                                   */

    struct {
      __IOM uint32_t FB0        : 1;            /*!< (@ 0x00000000) Filter bits                                                */
      __IOM uint32_t FB1        : 1;            /*!< (@ 0x00000001) Filter bits                                                */
      __IOM uint32_t FB2        : 1;            /*!< (@ 0x00000002) Filter bits                                                */
      __IOM uint32_t FB3        : 1;            /*!< (@ 0x00000003) Filter bits                                                */
      __IOM uint32_t FB4        : 1;            /*!< (@ 0x00000004) Filter bits                                                */
      __IOM uint32_t FB5        : 1;            /*!< (@ 0x00000005) Filter bits                                                */
      __IOM uint32_t FB6        : 1;            /*!< (@ 0x00000006) Filter bits                                                */
      __IOM uint32_t FB7        : 1;            /*!< (@ 0x00000007) Filter bits                                                */
      __IOM uint32_t FB8        : 1;            /*!< (@ 0x00000008) Filter bits                                                */
      __IOM uint32_t FB9        : 1;            /*!< (@ 0x00000009) Filter bits                                                */
      __IOM uint32_t FB10       : 1;            /*!< (@ 0x0000000A) Filter bits                                                */
      __IOM uint32_t FB11       : 1;            /*!< (@ 0x0000000B) Filter bits                                                */
      __IOM uint32_t FB12       : 1;            /*!< (@ 0x0000000C) Filter bits                                                */
      __IOM uint32_t FB13       : 1;            /*!< (@ 0x0000000D) Filter bits                                                */
      __IOM uint32_t FB14       : 1;            /*!< (@ 0x0000000E) Filter bits                                                */
      __IOM uint32_t FB15       : 1;            /*!< (@ 0x0000000F) Filter bits                                                */
      __IOM uint32_t FB16       : 1;            /*!< (@ 0x00000010) Filter bits                                                */
      __IOM uint32_t FB17       : 1;            /*!< (@ 0x00000011) Filter bits                                                */
      __IOM uint32_t FB18       : 1;            /*!< (@ 0x00000012) Filter bits                                                */
      __IOM uint32_t FB19       : 1;            /*!< (@ 0x00000013) Filter bits                                                */
      __IOM uint32_t FB20       : 1;            /*!< (@ 0x00000014) Filter bits                                                */
      __IOM uint32_t FB21       : 1;            /*!< (@ 0x00000015) Filter bits                                                */
      __IOM uint32_t FB22       : 1;            /*!< (@ 0x00000016) Filter bits                                                */
      __IOM uint32_t FB23       : 1;            /*!< (@ 0x00000017) Filter bits                                                */
      __IOM uint32_t FB24       : 1;            /*!< (@ 0x00000018) Filter bits                                                */
      __IOM uint32_t FB25       : 1;            /*!< (@ 0x00000019) Filter bits                                                */
      __IOM uint32_t FB26       : 1;            /*!< (@ 0x0000001A) Filter bits                                                */
      __IOM uint32_t FB27       : 1;            /*!< (@ 0x0000001B) Filter bits                                                */
      __IOM uint32_t FB28       : 1;            /*!< (@ 0x0000001C) Filter bits                                                */
      __IOM uint32_t FB29       : 1;            /*!< (@ 0x0000001D) Filter bits                                                */
      __IOM uint32_t FB30       : 1;            /*!< (@ 0x0000001E) Filter bits                                                */
      __IOM uint32_t FB31       : 1;            /*!< (@ 0x0000001F) Filter bits                                                */
    } bit;
  } F8R2;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000288) Filter bank 9 register 1                                   */

    struct {
      __IOM uint32_t FB0        : 1;            /*!< (@ 0x00000000) Filter bits                                                */
      __IOM uint32_t FB1        : 1;            /*!< (@ 0x00000001) Filter bits                                                */
      __IOM uint32_t FB2        : 1;            /*!< (@ 0x00000002) Filter bits                                                */
      __IOM uint32_t FB3        : 1;            /*!< (@ 0x00000003) Filter bits                                                */
      __IOM uint32_t FB4        : 1;            /*!< (@ 0x00000004) Filter bits                                                */
      __IOM uint32_t FB5        : 1;            /*!< (@ 0x00000005) Filter bits                                                */
      __IOM uint32_t FB6        : 1;            /*!< (@ 0x00000006) Filter bits                                                */
      __IOM uint32_t FB7        : 1;            /*!< (@ 0x00000007) Filter bits                                                */
      __IOM uint32_t FB8        : 1;            /*!< (@ 0x00000008) Filter bits                                                */
      __IOM uint32_t FB9        : 1;            /*!< (@ 0x00000009) Filter bits                                                */
      __IOM uint32_t FB10       : 1;            /*!< (@ 0x0000000A) Filter bits                                                */
      __IOM uint32_t FB11       : 1;            /*!< (@ 0x0000000B) Filter bits                                                */
      __IOM uint32_t FB12       : 1;            /*!< (@ 0x0000000C) Filter bits                                                */
      __IOM uint32_t FB13       : 1;            /*!< (@ 0x0000000D) Filter bits                                                */
      __IOM uint32_t FB14       : 1;            /*!< (@ 0x0000000E) Filter bits                                                */
      __IOM uint32_t FB15       : 1;            /*!< (@ 0x0000000F) Filter bits                                                */
      __IOM uint32_t FB16       : 1;            /*!< (@ 0x00000010) Filter bits                                                */
      __IOM uint32_t FB17       : 1;            /*!< (@ 0x00000011) Filter bits                                                */
      __IOM uint32_t FB18       : 1;            /*!< (@ 0x00000012) Filter bits                                                */
      __IOM uint32_t FB19       : 1;            /*!< (@ 0x00000013) Filter bits                                                */
      __IOM uint32_t FB20       : 1;            /*!< (@ 0x00000014) Filter bits                                                */
      __IOM uint32_t FB21       : 1;            /*!< (@ 0x00000015) Filter bits                                                */
      __IOM uint32_t FB22       : 1;            /*!< (@ 0x00000016) Filter bits                                                */
      __IOM uint32_t FB23       : 1;            /*!< (@ 0x00000017) Filter bits                                                */
      __IOM uint32_t FB24       : 1;            /*!< (@ 0x00000018) Filter bits                                                */
      __IOM uint32_t FB25       : 1;            /*!< (@ 0x00000019) Filter bits                                                */
      __IOM uint32_t FB26       : 1;            /*!< (@ 0x0000001A) Filter bits                                                */
      __IOM uint32_t FB27       : 1;            /*!< (@ 0x0000001B) Filter bits                                                */
      __IOM uint32_t FB28       : 1;            /*!< (@ 0x0000001C) Filter bits                                                */
      __IOM uint32_t FB29       : 1;            /*!< (@ 0x0000001D) Filter bits                                                */
      __IOM uint32_t FB30       : 1;            /*!< (@ 0x0000001E) Filter bits                                                */
      __IOM uint32_t FB31       : 1;            /*!< (@ 0x0000001F) Filter bits                                                */
    } bit;
  } F9R1;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000028C) Filter bank 9 register 2                                   */

    struct {
      __IOM uint32_t FB0        : 1;            /*!< (@ 0x00000000) Filter bits                                                */
      __IOM uint32_t FB1        : 1;            /*!< (@ 0x00000001) Filter bits                                                */
      __IOM uint32_t FB2        : 1;            /*!< (@ 0x00000002) Filter bits                                                */
      __IOM uint32_t FB3        : 1;            /*!< (@ 0x00000003) Filter bits                                                */
      __IOM uint32_t FB4        : 1;            /*!< (@ 0x00000004) Filter bits                                                */
      __IOM uint32_t FB5        : 1;            /*!< (@ 0x00000005) Filter bits                                                */
      __IOM uint32_t FB6        : 1;            /*!< (@ 0x00000006) Filter bits                                                */
      __IOM uint32_t FB7        : 1;            /*!< (@ 0x00000007) Filter bits                                                */
      __IOM uint32_t FB8        : 1;            /*!< (@ 0x00000008) Filter bits                                                */
      __IOM uint32_t FB9        : 1;            /*!< (@ 0x00000009) Filter bits                                                */
      __IOM uint32_t FB10       : 1;            /*!< (@ 0x0000000A) Filter bits                                                */
      __IOM uint32_t FB11       : 1;            /*!< (@ 0x0000000B) Filter bits                                                */
      __IOM uint32_t FB12       : 1;            /*!< (@ 0x0000000C) Filter bits                                                */
      __IOM uint32_t FB13       : 1;            /*!< (@ 0x0000000D) Filter bits                                                */
      __IOM uint32_t FB14       : 1;            /*!< (@ 0x0000000E) Filter bits                                                */
      __IOM uint32_t FB15       : 1;            /*!< (@ 0x0000000F) Filter bits                                                */
      __IOM uint32_t FB16       : 1;            /*!< (@ 0x00000010) Filter bits                                                */
      __IOM uint32_t FB17       : 1;            /*!< (@ 0x00000011) Filter bits                                                */
      __IOM uint32_t FB18       : 1;            /*!< (@ 0x00000012) Filter bits                                                */
      __IOM uint32_t FB19       : 1;            /*!< (@ 0x00000013) Filter bits                                                */
      __IOM uint32_t FB20       : 1;            /*!< (@ 0x00000014) Filter bits                                                */
      __IOM uint32_t FB21       : 1;            /*!< (@ 0x00000015) Filter bits                                                */
      __IOM uint32_t FB22       : 1;            /*!< (@ 0x00000016) Filter bits                                                */
      __IOM uint32_t FB23       : 1;            /*!< (@ 0x00000017) Filter bits                                                */
      __IOM uint32_t FB24       : 1;            /*!< (@ 0x00000018) Filter bits                                                */
      __IOM uint32_t FB25       : 1;            /*!< (@ 0x00000019) Filter bits                                                */
      __IOM uint32_t FB26       : 1;            /*!< (@ 0x0000001A) Filter bits                                                */
      __IOM uint32_t FB27       : 1;            /*!< (@ 0x0000001B) Filter bits                                                */
      __IOM uint32_t FB28       : 1;            /*!< (@ 0x0000001C) Filter bits                                                */
      __IOM uint32_t FB29       : 1;            /*!< (@ 0x0000001D) Filter bits                                                */
      __IOM uint32_t FB30       : 1;            /*!< (@ 0x0000001E) Filter bits                                                */
      __IOM uint32_t FB31       : 1;            /*!< (@ 0x0000001F) Filter bits                                                */
    } bit;
  } F9R2;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000290) Filter bank 10 register 1                                  */

    struct {
      __IOM uint32_t FB0        : 1;            /*!< (@ 0x00000000) Filter bits                                                */
      __IOM uint32_t FB1        : 1;            /*!< (@ 0x00000001) Filter bits                                                */
      __IOM uint32_t FB2        : 1;            /*!< (@ 0x00000002) Filter bits                                                */
      __IOM uint32_t FB3        : 1;            /*!< (@ 0x00000003) Filter bits                                                */
      __IOM uint32_t FB4        : 1;            /*!< (@ 0x00000004) Filter bits                                                */
      __IOM uint32_t FB5        : 1;            /*!< (@ 0x00000005) Filter bits                                                */
      __IOM uint32_t FB6        : 1;            /*!< (@ 0x00000006) Filter bits                                                */
      __IOM uint32_t FB7        : 1;            /*!< (@ 0x00000007) Filter bits                                                */
      __IOM uint32_t FB8        : 1;            /*!< (@ 0x00000008) Filter bits                                                */
      __IOM uint32_t FB9        : 1;            /*!< (@ 0x00000009) Filter bits                                                */
      __IOM uint32_t FB10       : 1;            /*!< (@ 0x0000000A) Filter bits                                                */
      __IOM uint32_t FB11       : 1;            /*!< (@ 0x0000000B) Filter bits                                                */
      __IOM uint32_t FB12       : 1;            /*!< (@ 0x0000000C) Filter bits                                                */
      __IOM uint32_t FB13       : 1;            /*!< (@ 0x0000000D) Filter bits                                                */
      __IOM uint32_t FB14       : 1;            /*!< (@ 0x0000000E) Filter bits                                                */
      __IOM uint32_t FB15       : 1;            /*!< (@ 0x0000000F) Filter bits                                                */
      __IOM uint32_t FB16       : 1;            /*!< (@ 0x00000010) Filter bits                                                */
      __IOM uint32_t FB17       : 1;            /*!< (@ 0x00000011) Filter bits                                                */
      __IOM uint32_t FB18       : 1;            /*!< (@ 0x00000012) Filter bits                                                */
      __IOM uint32_t FB19       : 1;            /*!< (@ 0x00000013) Filter bits                                                */
      __IOM uint32_t FB20       : 1;            /*!< (@ 0x00000014) Filter bits                                                */
      __IOM uint32_t FB21       : 1;            /*!< (@ 0x00000015) Filter bits                                                */
      __IOM uint32_t FB22       : 1;            /*!< (@ 0x00000016) Filter bits                                                */
      __IOM uint32_t FB23       : 1;            /*!< (@ 0x00000017) Filter bits                                                */
      __IOM uint32_t FB24       : 1;            /*!< (@ 0x00000018) Filter bits                                                */
      __IOM uint32_t FB25       : 1;            /*!< (@ 0x00000019) Filter bits                                                */
      __IOM uint32_t FB26       : 1;            /*!< (@ 0x0000001A) Filter bits                                                */
      __IOM uint32_t FB27       : 1;            /*!< (@ 0x0000001B) Filter bits                                                */
      __IOM uint32_t FB28       : 1;            /*!< (@ 0x0000001C) Filter bits                                                */
      __IOM uint32_t FB29       : 1;            /*!< (@ 0x0000001D) Filter bits                                                */
      __IOM uint32_t FB30       : 1;            /*!< (@ 0x0000001E) Filter bits                                                */
      __IOM uint32_t FB31       : 1;            /*!< (@ 0x0000001F) Filter bits                                                */
    } bit;
  } F10R1;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000294) Filter bank 10 register 2                                  */

    struct {
      __IOM uint32_t FB0        : 1;            /*!< (@ 0x00000000) Filter bits                                                */
      __IOM uint32_t FB1        : 1;            /*!< (@ 0x00000001) Filter bits                                                */
      __IOM uint32_t FB2        : 1;            /*!< (@ 0x00000002) Filter bits                                                */
      __IOM uint32_t FB3        : 1;            /*!< (@ 0x00000003) Filter bits                                                */
      __IOM uint32_t FB4        : 1;            /*!< (@ 0x00000004) Filter bits                                                */
      __IOM uint32_t FB5        : 1;            /*!< (@ 0x00000005) Filter bits                                                */
      __IOM uint32_t FB6        : 1;            /*!< (@ 0x00000006) Filter bits                                                */
      __IOM uint32_t FB7        : 1;            /*!< (@ 0x00000007) Filter bits                                                */
      __IOM uint32_t FB8        : 1;            /*!< (@ 0x00000008) Filter bits                                                */
      __IOM uint32_t FB9        : 1;            /*!< (@ 0x00000009) Filter bits                                                */
      __IOM uint32_t FB10       : 1;            /*!< (@ 0x0000000A) Filter bits                                                */
      __IOM uint32_t FB11       : 1;            /*!< (@ 0x0000000B) Filter bits                                                */
      __IOM uint32_t FB12       : 1;            /*!< (@ 0x0000000C) Filter bits                                                */
      __IOM uint32_t FB13       : 1;            /*!< (@ 0x0000000D) Filter bits                                                */
      __IOM uint32_t FB14       : 1;            /*!< (@ 0x0000000E) Filter bits                                                */
      __IOM uint32_t FB15       : 1;            /*!< (@ 0x0000000F) Filter bits                                                */
      __IOM uint32_t FB16       : 1;            /*!< (@ 0x00000010) Filter bits                                                */
      __IOM uint32_t FB17       : 1;            /*!< (@ 0x00000011) Filter bits                                                */
      __IOM uint32_t FB18       : 1;            /*!< (@ 0x00000012) Filter bits                                                */
      __IOM uint32_t FB19       : 1;            /*!< (@ 0x00000013) Filter bits                                                */
      __IOM uint32_t FB20       : 1;            /*!< (@ 0x00000014) Filter bits                                                */
      __IOM uint32_t FB21       : 1;            /*!< (@ 0x00000015) Filter bits                                                */
      __IOM uint32_t FB22       : 1;            /*!< (@ 0x00000016) Filter bits                                                */
      __IOM uint32_t FB23       : 1;            /*!< (@ 0x00000017) Filter bits                                                */
      __IOM uint32_t FB24       : 1;            /*!< (@ 0x00000018) Filter bits                                                */
      __IOM uint32_t FB25       : 1;            /*!< (@ 0x00000019) Filter bits                                                */
      __IOM uint32_t FB26       : 1;            /*!< (@ 0x0000001A) Filter bits                                                */
      __IOM uint32_t FB27       : 1;            /*!< (@ 0x0000001B) Filter bits                                                */
      __IOM uint32_t FB28       : 1;            /*!< (@ 0x0000001C) Filter bits                                                */
      __IOM uint32_t FB29       : 1;            /*!< (@ 0x0000001D) Filter bits                                                */
      __IOM uint32_t FB30       : 1;            /*!< (@ 0x0000001E) Filter bits                                                */
      __IOM uint32_t FB31       : 1;            /*!< (@ 0x0000001F) Filter bits                                                */
    } bit;
  } F10R2;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000298) Filter bank 11 register 1                                  */

    struct {
      __IOM uint32_t FB0        : 1;            /*!< (@ 0x00000000) Filter bits                                                */
      __IOM uint32_t FB1        : 1;            /*!< (@ 0x00000001) Filter bits                                                */
      __IOM uint32_t FB2        : 1;            /*!< (@ 0x00000002) Filter bits                                                */
      __IOM uint32_t FB3        : 1;            /*!< (@ 0x00000003) Filter bits                                                */
      __IOM uint32_t FB4        : 1;            /*!< (@ 0x00000004) Filter bits                                                */
      __IOM uint32_t FB5        : 1;            /*!< (@ 0x00000005) Filter bits                                                */
      __IOM uint32_t FB6        : 1;            /*!< (@ 0x00000006) Filter bits                                                */
      __IOM uint32_t FB7        : 1;            /*!< (@ 0x00000007) Filter bits                                                */
      __IOM uint32_t FB8        : 1;            /*!< (@ 0x00000008) Filter bits                                                */
      __IOM uint32_t FB9        : 1;            /*!< (@ 0x00000009) Filter bits                                                */
      __IOM uint32_t FB10       : 1;            /*!< (@ 0x0000000A) Filter bits                                                */
      __IOM uint32_t FB11       : 1;            /*!< (@ 0x0000000B) Filter bits                                                */
      __IOM uint32_t FB12       : 1;            /*!< (@ 0x0000000C) Filter bits                                                */
      __IOM uint32_t FB13       : 1;            /*!< (@ 0x0000000D) Filter bits                                                */
      __IOM uint32_t FB14       : 1;            /*!< (@ 0x0000000E) Filter bits                                                */
      __IOM uint32_t FB15       : 1;            /*!< (@ 0x0000000F) Filter bits                                                */
      __IOM uint32_t FB16       : 1;            /*!< (@ 0x00000010) Filter bits                                                */
      __IOM uint32_t FB17       : 1;            /*!< (@ 0x00000011) Filter bits                                                */
      __IOM uint32_t FB18       : 1;            /*!< (@ 0x00000012) Filter bits                                                */
      __IOM uint32_t FB19       : 1;            /*!< (@ 0x00000013) Filter bits                                                */
      __IOM uint32_t FB20       : 1;            /*!< (@ 0x00000014) Filter bits                                                */
      __IOM uint32_t FB21       : 1;            /*!< (@ 0x00000015) Filter bits                                                */
      __IOM uint32_t FB22       : 1;            /*!< (@ 0x00000016) Filter bits                                                */
      __IOM uint32_t FB23       : 1;            /*!< (@ 0x00000017) Filter bits                                                */
      __IOM uint32_t FB24       : 1;            /*!< (@ 0x00000018) Filter bits                                                */
      __IOM uint32_t FB25       : 1;            /*!< (@ 0x00000019) Filter bits                                                */
      __IOM uint32_t FB26       : 1;            /*!< (@ 0x0000001A) Filter bits                                                */
      __IOM uint32_t FB27       : 1;            /*!< (@ 0x0000001B) Filter bits                                                */
      __IOM uint32_t FB28       : 1;            /*!< (@ 0x0000001C) Filter bits                                                */
      __IOM uint32_t FB29       : 1;            /*!< (@ 0x0000001D) Filter bits                                                */
      __IOM uint32_t FB30       : 1;            /*!< (@ 0x0000001E) Filter bits                                                */
      __IOM uint32_t FB31       : 1;            /*!< (@ 0x0000001F) Filter bits                                                */
    } bit;
  } F11R1;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000029C) Filter bank 11 register 2                                  */

    struct {
      __IOM uint32_t FB0        : 1;            /*!< (@ 0x00000000) Filter bits                                                */
      __IOM uint32_t FB1        : 1;            /*!< (@ 0x00000001) Filter bits                                                */
      __IOM uint32_t FB2        : 1;            /*!< (@ 0x00000002) Filter bits                                                */
      __IOM uint32_t FB3        : 1;            /*!< (@ 0x00000003) Filter bits                                                */
      __IOM uint32_t FB4        : 1;            /*!< (@ 0x00000004) Filter bits                                                */
      __IOM uint32_t FB5        : 1;            /*!< (@ 0x00000005) Filter bits                                                */
      __IOM uint32_t FB6        : 1;            /*!< (@ 0x00000006) Filter bits                                                */
      __IOM uint32_t FB7        : 1;            /*!< (@ 0x00000007) Filter bits                                                */
      __IOM uint32_t FB8        : 1;            /*!< (@ 0x00000008) Filter bits                                                */
      __IOM uint32_t FB9        : 1;            /*!< (@ 0x00000009) Filter bits                                                */
      __IOM uint32_t FB10       : 1;            /*!< (@ 0x0000000A) Filter bits                                                */
      __IOM uint32_t FB11       : 1;            /*!< (@ 0x0000000B) Filter bits                                                */
      __IOM uint32_t FB12       : 1;            /*!< (@ 0x0000000C) Filter bits                                                */
      __IOM uint32_t FB13       : 1;            /*!< (@ 0x0000000D) Filter bits                                                */
      __IOM uint32_t FB14       : 1;            /*!< (@ 0x0000000E) Filter bits                                                */
      __IOM uint32_t FB15       : 1;            /*!< (@ 0x0000000F) Filter bits                                                */
      __IOM uint32_t FB16       : 1;            /*!< (@ 0x00000010) Filter bits                                                */
      __IOM uint32_t FB17       : 1;            /*!< (@ 0x00000011) Filter bits                                                */
      __IOM uint32_t FB18       : 1;            /*!< (@ 0x00000012) Filter bits                                                */
      __IOM uint32_t FB19       : 1;            /*!< (@ 0x00000013) Filter bits                                                */
      __IOM uint32_t FB20       : 1;            /*!< (@ 0x00000014) Filter bits                                                */
      __IOM uint32_t FB21       : 1;            /*!< (@ 0x00000015) Filter bits                                                */
      __IOM uint32_t FB22       : 1;            /*!< (@ 0x00000016) Filter bits                                                */
      __IOM uint32_t FB23       : 1;            /*!< (@ 0x00000017) Filter bits                                                */
      __IOM uint32_t FB24       : 1;            /*!< (@ 0x00000018) Filter bits                                                */
      __IOM uint32_t FB25       : 1;            /*!< (@ 0x00000019) Filter bits                                                */
      __IOM uint32_t FB26       : 1;            /*!< (@ 0x0000001A) Filter bits                                                */
      __IOM uint32_t FB27       : 1;            /*!< (@ 0x0000001B) Filter bits                                                */
      __IOM uint32_t FB28       : 1;            /*!< (@ 0x0000001C) Filter bits                                                */
      __IOM uint32_t FB29       : 1;            /*!< (@ 0x0000001D) Filter bits                                                */
      __IOM uint32_t FB30       : 1;            /*!< (@ 0x0000001E) Filter bits                                                */
      __IOM uint32_t FB31       : 1;            /*!< (@ 0x0000001F) Filter bits                                                */
    } bit;
  } F11R2;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000002A0) Filter bank 4 register 1                                   */

    struct {
      __IOM uint32_t FB0        : 1;            /*!< (@ 0x00000000) Filter bits                                                */
      __IOM uint32_t FB1        : 1;            /*!< (@ 0x00000001) Filter bits                                                */
      __IOM uint32_t FB2        : 1;            /*!< (@ 0x00000002) Filter bits                                                */
      __IOM uint32_t FB3        : 1;            /*!< (@ 0x00000003) Filter bits                                                */
      __IOM uint32_t FB4        : 1;            /*!< (@ 0x00000004) Filter bits                                                */
      __IOM uint32_t FB5        : 1;            /*!< (@ 0x00000005) Filter bits                                                */
      __IOM uint32_t FB6        : 1;            /*!< (@ 0x00000006) Filter bits                                                */
      __IOM uint32_t FB7        : 1;            /*!< (@ 0x00000007) Filter bits                                                */
      __IOM uint32_t FB8        : 1;            /*!< (@ 0x00000008) Filter bits                                                */
      __IOM uint32_t FB9        : 1;            /*!< (@ 0x00000009) Filter bits                                                */
      __IOM uint32_t FB10       : 1;            /*!< (@ 0x0000000A) Filter bits                                                */
      __IOM uint32_t FB11       : 1;            /*!< (@ 0x0000000B) Filter bits                                                */
      __IOM uint32_t FB12       : 1;            /*!< (@ 0x0000000C) Filter bits                                                */
      __IOM uint32_t FB13       : 1;            /*!< (@ 0x0000000D) Filter bits                                                */
      __IOM uint32_t FB14       : 1;            /*!< (@ 0x0000000E) Filter bits                                                */
      __IOM uint32_t FB15       : 1;            /*!< (@ 0x0000000F) Filter bits                                                */
      __IOM uint32_t FB16       : 1;            /*!< (@ 0x00000010) Filter bits                                                */
      __IOM uint32_t FB17       : 1;            /*!< (@ 0x00000011) Filter bits                                                */
      __IOM uint32_t FB18       : 1;            /*!< (@ 0x00000012) Filter bits                                                */
      __IOM uint32_t FB19       : 1;            /*!< (@ 0x00000013) Filter bits                                                */
      __IOM uint32_t FB20       : 1;            /*!< (@ 0x00000014) Filter bits                                                */
      __IOM uint32_t FB21       : 1;            /*!< (@ 0x00000015) Filter bits                                                */
      __IOM uint32_t FB22       : 1;            /*!< (@ 0x00000016) Filter bits                                                */
      __IOM uint32_t FB23       : 1;            /*!< (@ 0x00000017) Filter bits                                                */
      __IOM uint32_t FB24       : 1;            /*!< (@ 0x00000018) Filter bits                                                */
      __IOM uint32_t FB25       : 1;            /*!< (@ 0x00000019) Filter bits                                                */
      __IOM uint32_t FB26       : 1;            /*!< (@ 0x0000001A) Filter bits                                                */
      __IOM uint32_t FB27       : 1;            /*!< (@ 0x0000001B) Filter bits                                                */
      __IOM uint32_t FB28       : 1;            /*!< (@ 0x0000001C) Filter bits                                                */
      __IOM uint32_t FB29       : 1;            /*!< (@ 0x0000001D) Filter bits                                                */
      __IOM uint32_t FB30       : 1;            /*!< (@ 0x0000001E) Filter bits                                                */
      __IOM uint32_t FB31       : 1;            /*!< (@ 0x0000001F) Filter bits                                                */
    } bit;
  } F12R1;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000002A4) Filter bank 12 register 2                                  */

    struct {
      __IOM uint32_t FB0        : 1;            /*!< (@ 0x00000000) Filter bits                                                */
      __IOM uint32_t FB1        : 1;            /*!< (@ 0x00000001) Filter bits                                                */
      __IOM uint32_t FB2        : 1;            /*!< (@ 0x00000002) Filter bits                                                */
      __IOM uint32_t FB3        : 1;            /*!< (@ 0x00000003) Filter bits                                                */
      __IOM uint32_t FB4        : 1;            /*!< (@ 0x00000004) Filter bits                                                */
      __IOM uint32_t FB5        : 1;            /*!< (@ 0x00000005) Filter bits                                                */
      __IOM uint32_t FB6        : 1;            /*!< (@ 0x00000006) Filter bits                                                */
      __IOM uint32_t FB7        : 1;            /*!< (@ 0x00000007) Filter bits                                                */
      __IOM uint32_t FB8        : 1;            /*!< (@ 0x00000008) Filter bits                                                */
      __IOM uint32_t FB9        : 1;            /*!< (@ 0x00000009) Filter bits                                                */
      __IOM uint32_t FB10       : 1;            /*!< (@ 0x0000000A) Filter bits                                                */
      __IOM uint32_t FB11       : 1;            /*!< (@ 0x0000000B) Filter bits                                                */
      __IOM uint32_t FB12       : 1;            /*!< (@ 0x0000000C) Filter bits                                                */
      __IOM uint32_t FB13       : 1;            /*!< (@ 0x0000000D) Filter bits                                                */
      __IOM uint32_t FB14       : 1;            /*!< (@ 0x0000000E) Filter bits                                                */
      __IOM uint32_t FB15       : 1;            /*!< (@ 0x0000000F) Filter bits                                                */
      __IOM uint32_t FB16       : 1;            /*!< (@ 0x00000010) Filter bits                                                */
      __IOM uint32_t FB17       : 1;            /*!< (@ 0x00000011) Filter bits                                                */
      __IOM uint32_t FB18       : 1;            /*!< (@ 0x00000012) Filter bits                                                */
      __IOM uint32_t FB19       : 1;            /*!< (@ 0x00000013) Filter bits                                                */
      __IOM uint32_t FB20       : 1;            /*!< (@ 0x00000014) Filter bits                                                */
      __IOM uint32_t FB21       : 1;            /*!< (@ 0x00000015) Filter bits                                                */
      __IOM uint32_t FB22       : 1;            /*!< (@ 0x00000016) Filter bits                                                */
      __IOM uint32_t FB23       : 1;            /*!< (@ 0x00000017) Filter bits                                                */
      __IOM uint32_t FB24       : 1;            /*!< (@ 0x00000018) Filter bits                                                */
      __IOM uint32_t FB25       : 1;            /*!< (@ 0x00000019) Filter bits                                                */
      __IOM uint32_t FB26       : 1;            /*!< (@ 0x0000001A) Filter bits                                                */
      __IOM uint32_t FB27       : 1;            /*!< (@ 0x0000001B) Filter bits                                                */
      __IOM uint32_t FB28       : 1;            /*!< (@ 0x0000001C) Filter bits                                                */
      __IOM uint32_t FB29       : 1;            /*!< (@ 0x0000001D) Filter bits                                                */
      __IOM uint32_t FB30       : 1;            /*!< (@ 0x0000001E) Filter bits                                                */
      __IOM uint32_t FB31       : 1;            /*!< (@ 0x0000001F) Filter bits                                                */
    } bit;
  } F12R2;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000002A8) Filter bank 13 register 1                                  */

    struct {
      __IOM uint32_t FB0        : 1;            /*!< (@ 0x00000000) Filter bits                                                */
      __IOM uint32_t FB1        : 1;            /*!< (@ 0x00000001) Filter bits                                                */
      __IOM uint32_t FB2        : 1;            /*!< (@ 0x00000002) Filter bits                                                */
      __IOM uint32_t FB3        : 1;            /*!< (@ 0x00000003) Filter bits                                                */
      __IOM uint32_t FB4        : 1;            /*!< (@ 0x00000004) Filter bits                                                */
      __IOM uint32_t FB5        : 1;            /*!< (@ 0x00000005) Filter bits                                                */
      __IOM uint32_t FB6        : 1;            /*!< (@ 0x00000006) Filter bits                                                */
      __IOM uint32_t FB7        : 1;            /*!< (@ 0x00000007) Filter bits                                                */
      __IOM uint32_t FB8        : 1;            /*!< (@ 0x00000008) Filter bits                                                */
      __IOM uint32_t FB9        : 1;            /*!< (@ 0x00000009) Filter bits                                                */
      __IOM uint32_t FB10       : 1;            /*!< (@ 0x0000000A) Filter bits                                                */
      __IOM uint32_t FB11       : 1;            /*!< (@ 0x0000000B) Filter bits                                                */
      __IOM uint32_t FB12       : 1;            /*!< (@ 0x0000000C) Filter bits                                                */
      __IOM uint32_t FB13       : 1;            /*!< (@ 0x0000000D) Filter bits                                                */
      __IOM uint32_t FB14       : 1;            /*!< (@ 0x0000000E) Filter bits                                                */
      __IOM uint32_t FB15       : 1;            /*!< (@ 0x0000000F) Filter bits                                                */
      __IOM uint32_t FB16       : 1;            /*!< (@ 0x00000010) Filter bits                                                */
      __IOM uint32_t FB17       : 1;            /*!< (@ 0x00000011) Filter bits                                                */
      __IOM uint32_t FB18       : 1;            /*!< (@ 0x00000012) Filter bits                                                */
      __IOM uint32_t FB19       : 1;            /*!< (@ 0x00000013) Filter bits                                                */
      __IOM uint32_t FB20       : 1;            /*!< (@ 0x00000014) Filter bits                                                */
      __IOM uint32_t FB21       : 1;            /*!< (@ 0x00000015) Filter bits                                                */
      __IOM uint32_t FB22       : 1;            /*!< (@ 0x00000016) Filter bits                                                */
      __IOM uint32_t FB23       : 1;            /*!< (@ 0x00000017) Filter bits                                                */
      __IOM uint32_t FB24       : 1;            /*!< (@ 0x00000018) Filter bits                                                */
      __IOM uint32_t FB25       : 1;            /*!< (@ 0x00000019) Filter bits                                                */
      __IOM uint32_t FB26       : 1;            /*!< (@ 0x0000001A) Filter bits                                                */
      __IOM uint32_t FB27       : 1;            /*!< (@ 0x0000001B) Filter bits                                                */
      __IOM uint32_t FB28       : 1;            /*!< (@ 0x0000001C) Filter bits                                                */
      __IOM uint32_t FB29       : 1;            /*!< (@ 0x0000001D) Filter bits                                                */
      __IOM uint32_t FB30       : 1;            /*!< (@ 0x0000001E) Filter bits                                                */
      __IOM uint32_t FB31       : 1;            /*!< (@ 0x0000001F) Filter bits                                                */
    } bit;
  } F13R1;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x000002AC) Filter bank 13 register 2                                  */

    struct {
      __IOM uint32_t FB0        : 1;            /*!< (@ 0x00000000) Filter bits                                                */
      __IOM uint32_t FB1        : 1;            /*!< (@ 0x00000001) Filter bits                                                */
      __IOM uint32_t FB2        : 1;            /*!< (@ 0x00000002) Filter bits                                                */
      __IOM uint32_t FB3        : 1;            /*!< (@ 0x00000003) Filter bits                                                */
      __IOM uint32_t FB4        : 1;            /*!< (@ 0x00000004) Filter bits                                                */
      __IOM uint32_t FB5        : 1;            /*!< (@ 0x00000005) Filter bits                                                */
      __IOM uint32_t FB6        : 1;            /*!< (@ 0x00000006) Filter bits                                                */
      __IOM uint32_t FB7        : 1;            /*!< (@ 0x00000007) Filter bits                                                */
      __IOM uint32_t FB8        : 1;            /*!< (@ 0x00000008) Filter bits                                                */
      __IOM uint32_t FB9        : 1;            /*!< (@ 0x00000009) Filter bits                                                */
      __IOM uint32_t FB10       : 1;            /*!< (@ 0x0000000A) Filter bits                                                */
      __IOM uint32_t FB11       : 1;            /*!< (@ 0x0000000B) Filter bits                                                */
      __IOM uint32_t FB12       : 1;            /*!< (@ 0x0000000C) Filter bits                                                */
      __IOM uint32_t FB13       : 1;            /*!< (@ 0x0000000D) Filter bits                                                */
      __IOM uint32_t FB14       : 1;            /*!< (@ 0x0000000E) Filter bits                                                */
      __IOM uint32_t FB15       : 1;            /*!< (@ 0x0000000F) Filter bits                                                */
      __IOM uint32_t FB16       : 1;            /*!< (@ 0x00000010) Filter bits                                                */
      __IOM uint32_t FB17       : 1;            /*!< (@ 0x00000011) Filter bits                                                */
      __IOM uint32_t FB18       : 1;            /*!< (@ 0x00000012) Filter bits                                                */
      __IOM uint32_t FB19       : 1;            /*!< (@ 0x00000013) Filter bits                                                */
      __IOM uint32_t FB20       : 1;            /*!< (@ 0x00000014) Filter bits                                                */
      __IOM uint32_t FB21       : 1;            /*!< (@ 0x00000015) Filter bits                                                */
      __IOM uint32_t FB22       : 1;            /*!< (@ 0x00000016) Filter bits                                                */
      __IOM uint32_t FB23       : 1;            /*!< (@ 0x00000017) Filter bits                                                */
      __IOM uint32_t FB24       : 1;            /*!< (@ 0x00000018) Filter bits                                                */
      __IOM uint32_t FB25       : 1;            /*!< (@ 0x00000019) Filter bits                                                */
      __IOM uint32_t FB26       : 1;            /*!< (@ 0x0000001A) Filter bits                                                */
      __IOM uint32_t FB27       : 1;            /*!< (@ 0x0000001B) Filter bits                                                */
      __IOM uint32_t FB28       : 1;            /*!< (@ 0x0000001C) Filter bits                                                */
      __IOM uint32_t FB29       : 1;            /*!< (@ 0x0000001D) Filter bits                                                */
      __IOM uint32_t FB30       : 1;            /*!< (@ 0x0000001E) Filter bits                                                */
      __IOM uint32_t FB31       : 1;            /*!< (@ 0x0000001F) Filter bits                                                */
    } bit;
  } F13R2;
} CAN_Type;                                     /*!< Size = 688 (0x2b0)                                                        */



/* =========================================================================================================================== */
/* ================                                            DAC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Digital to analog converter (DAC)
  */

typedef struct {                                /*!< (@ 0x40007400) DAC Structure                                              */

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Control register (DAC_CR)                                  */

    struct {
      __IOM uint32_t EN1        : 1;            /*!< (@ 0x00000000) DAC channel1 enable                                        */
      __IOM uint32_t BOFF1      : 1;            /*!< (@ 0x00000001) DAC channel1 output buffer disable                         */
      __IOM uint32_t TEN1       : 1;            /*!< (@ 0x00000002) DAC channel1 trigger enable                                */
      __IOM uint32_t TSEL1      : 3;            /*!< (@ 0x00000003) DAC channel1 trigger selection                             */
      __IOM uint32_t WAVE1      : 2;            /*!< (@ 0x00000006) DAC channel1 noise/triangle wave generation enable         */
      __IOM uint32_t MAMP1      : 4;            /*!< (@ 0x00000008) DAC channel1 mask/amplitude selector                       */
      __IOM uint32_t DMAEN1     : 1;            /*!< (@ 0x0000000C) DAC channel1 DMA enable                                    */
      __IM  uint32_t            : 3;
      __IOM uint32_t EN2        : 1;            /*!< (@ 0x00000010) DAC channel2 enable                                        */
      __IOM uint32_t BOFF2      : 1;            /*!< (@ 0x00000011) DAC channel2 output buffer disable                         */
      __IOM uint32_t TEN2       : 1;            /*!< (@ 0x00000012) DAC channel2 trigger enable                                */
      __IOM uint32_t TSEL2      : 3;            /*!< (@ 0x00000013) DAC channel2 trigger selection                             */
      __IOM uint32_t WAVE2      : 2;            /*!< (@ 0x00000016) DAC channel2 noise/triangle wave generation enable         */
      __IOM uint32_t MAMP2      : 4;            /*!< (@ 0x00000018) DAC channel2 mask/amplitude selector                       */
      __IOM uint32_t DMAEN2     : 1;            /*!< (@ 0x0000001C) DAC channel2 DMA enable                                    */
    } bit;
  } CR;

  union {
    __OM  uint32_t reg;                         /*!< (@ 0x00000004) DAC software trigger register (DAC_SWTRIGR)                */

    struct {
      __OM  uint32_t SWTRIG1    : 1;            /*!< (@ 0x00000000) DAC channel1 software trigger                              */
      __OM  uint32_t SWTRIG2    : 1;            /*!< (@ 0x00000001) DAC channel2 software trigger                              */
    } bit;
  } SWTRIGR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000008) DAC channel1 12-bit right-aligned data holding
                                                                    register(DAC_DHR12R1)                                      */

    struct {
      __IOM uint32_t DACC1DHR   : 12;           /*!< (@ 0x00000000) DAC channel1 12-bit right-aligned data                     */
    } bit;
  } DHR12R1;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000000C) DAC channel1 12-bit left aligned data holding
                                                                    register (DAC_DHR12L1)                                     */

    struct {
      __IM  uint32_t            : 4;
      __IOM uint32_t DACC1DHR   : 12;           /*!< (@ 0x00000004) DAC channel1 12-bit left-aligned data                      */
    } bit;
  } DHR12L1;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) DAC channel1 8-bit right aligned data holding
                                                                    register (DAC_DHR8R1)                                      */

    struct {
      __IOM uint32_t DACC1DHR   : 8;            /*!< (@ 0x00000000) DAC channel1 8-bit right-aligned data                      */
    } bit;
  } DHR8R1;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000014) DAC channel2 12-bit right aligned data holding
                                                                    register (DAC_DHR12R2)                                     */

    struct {
      __IOM uint32_t DACC2DHR   : 12;           /*!< (@ 0x00000000) DAC channel2 12-bit right-aligned data                     */
    } bit;
  } DHR12R2;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000018) DAC channel2 12-bit left aligned data holding
                                                                    register (DAC_DHR12L2)                                     */

    struct {
      __IM  uint32_t            : 4;
      __IOM uint32_t DACC2DHR   : 12;           /*!< (@ 0x00000004) DAC channel2 12-bit left-aligned data                      */
    } bit;
  } DHR12L2;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000001C) DAC channel2 8-bit right-aligned data holding
                                                                    register (DAC_DHR8R2)                                      */

    struct {
      __IOM uint32_t DACC2DHR   : 8;            /*!< (@ 0x00000000) DAC channel2 8-bit right-aligned data                      */
    } bit;
  } DHR8R2;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000020) Dual DAC 12-bit right-aligned data holding register
                                                                    (DAC_DHR12RD), Bits 31:28 Reserved, Bits
                                                                    15:12 Reserved                                             */

    struct {
      __IOM uint32_t DACC1DHR   : 12;           /*!< (@ 0x00000000) DAC channel1 12-bit right-aligned data                     */
      __IM  uint32_t            : 4;
      __IOM uint32_t DACC2DHR   : 12;           /*!< (@ 0x00000010) DAC channel2 12-bit right-aligned data                     */
    } bit;
  } DHR12RD;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000024) DUAL DAC 12-bit left aligned data holding register
                                                                    (DAC_DHR12LD), Bits 19:16 Reserved, Bits
                                                                    3:0 Reserved                                               */

    struct {
      __IM  uint32_t            : 4;
      __IOM uint32_t DACC1DHR   : 12;           /*!< (@ 0x00000004) DAC channel1 12-bit left-aligned data                      */
      __IM  uint32_t            : 4;
      __IOM uint32_t DACC2DHR   : 12;           /*!< (@ 0x00000014) DAC channel2 12-bit right-aligned data                     */
    } bit;
  } DHR12LD;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000028) DUAL DAC 8-bit right aligned data holding register
                                                                    (DAC_DHR8RD), Bits 31:16 Reserved                          */

    struct {
      __IOM uint32_t DACC1DHR   : 8;            /*!< (@ 0x00000000) DAC channel1 8-bit right-aligned data                      */
      __IOM uint32_t DACC2DHR   : 8;            /*!< (@ 0x00000008) DAC channel2 8-bit right-aligned data                      */
    } bit;
  } DHR8RD;

  union {
    __IM  uint32_t reg;                         /*!< (@ 0x0000002C) DAC channel1 data output register (DAC_DOR1)               */

    struct {
      __IM  uint32_t DACC1DOR   : 12;           /*!< (@ 0x00000000) DAC channel1 data output                                   */
    } bit;
  } DOR1;

  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000030) DAC channel2 data output register (DAC_DOR2)               */

    struct {
      __IM  uint32_t DACC2DOR   : 12;           /*!< (@ 0x00000000) DAC channel2 data output                                   */
    } bit;
  } DOR2;
} DAC_Type;                                     /*!< Size = 52 (0x34)                                                          */



/* =========================================================================================================================== */
/* ================                                            DBG                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Debug support (DBG)
  */

typedef struct {                                /*!< (@ 0xE0042000) DBG Structure                                              */

  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000000) DBGMCU_IDCODE                                              */

    struct {
      __IM  uint32_t DEV_ID     : 12;           /*!< (@ 0x00000000) DEV_ID                                                     */
      __IM  uint32_t            : 4;
      __IM  uint32_t REV_ID     : 16;           /*!< (@ 0x00000010) REV_ID                                                     */
    } bit;
  } IDCODE;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000004) DBGMCU_CR                                                  */

    struct {
      __IOM uint32_t DBG_SLEEP  : 1;            /*!< (@ 0x00000000) DBG_SLEEP                                                  */
      __IOM uint32_t DBG_STOP   : 1;            /*!< (@ 0x00000001) DBG_STOP                                                   */
      __IOM uint32_t DBG_STANDBY : 1;           /*!< (@ 0x00000002) DBG_STANDBY                                                */
      __IM  uint32_t            : 2;
      __IOM uint32_t TRACE_IOEN : 1;            /*!< (@ 0x00000005) TRACE_IOEN                                                 */
      __IOM uint32_t TRACE_MODE : 2;            /*!< (@ 0x00000006) TRACE_MODE                                                 */
      __IOM uint32_t DBG_IWDG_STOP : 1;         /*!< (@ 0x00000008) DBG_IWDG_STOP                                              */
      __IOM uint32_t DBG_WWDG_STOP : 1;         /*!< (@ 0x00000009) DBG_WWDG_STOP                                              */
      __IOM uint32_t DBG_TIM1_STOP : 1;         /*!< (@ 0x0000000A) DBG_TIM1_STOP                                              */
      __IOM uint32_t DBG_TIM2_STOP : 1;         /*!< (@ 0x0000000B) DBG_TIM2_STOP                                              */
      __IOM uint32_t DBG_TIM3_STOP : 1;         /*!< (@ 0x0000000C) DBG_TIM3_STOP                                              */
      __IOM uint32_t DBG_TIM4_STOP : 1;         /*!< (@ 0x0000000D) DBG_TIM4_STOP                                              */
      __IOM uint32_t DBG_CAN1_STOP : 1;         /*!< (@ 0x0000000E) DBG_CAN1_STOP                                              */
      __IOM uint32_t DBG_I2C1_SMBUS_TIMEOUT : 1;/*!< (@ 0x0000000F) DBG_I2C1_SMBUS_TIMEOUT                                     */
      __IOM uint32_t DBG_I2C2_SMBUS_TIMEOUT : 1;/*!< (@ 0x00000010) DBG_I2C2_SMBUS_TIMEOUT                                     */
      __IOM uint32_t DBG_TIM8_STOP : 1;         /*!< (@ 0x00000011) DBG_TIM8_STOP                                              */
      __IOM uint32_t DBG_TIM5_STOP : 1;         /*!< (@ 0x00000012) DBG_TIM5_STOP                                              */
      __IOM uint32_t DBG_TIM6_STOP : 1;         /*!< (@ 0x00000013) DBG_TIM6_STOP                                              */
      __IOM uint32_t DBG_TIM7_STOP : 1;         /*!< (@ 0x00000014) DBG_TIM7_STOP                                              */
      __IOM uint32_t DBG_CAN2_STOP : 1;         /*!< (@ 0x00000015) DBG_CAN2_STOP                                              */
    } bit;
  } CR;
} DBG_Type;                                     /*!< Size = 8 (0x8)                                                            */



/* =========================================================================================================================== */
/* ================                                           UART4                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Universal asynchronous receiver  transmitter (UART4)
  */

typedef struct {                                /*!< (@ 0x40004C00) UART4 Structure                                            */

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) UART4_SR                                                   */

    struct {
      __IM  uint32_t PE         : 1;            /*!< (@ 0x00000000) Parity error                                               */
      __IM  uint32_t FE         : 1;            /*!< (@ 0x00000001) Framing error                                              */
      __IM  uint32_t NE         : 1;            /*!< (@ 0x00000002) Noise error flag                                           */
      __IM  uint32_t ORE        : 1;            /*!< (@ 0x00000003) Overrun error                                              */
      __IM  uint32_t IDLE       : 1;            /*!< (@ 0x00000004) IDLE line detected                                         */
      __IOM uint32_t RXNE       : 1;            /*!< (@ 0x00000005) Read data register not empty                               */
      __IOM uint32_t TC         : 1;            /*!< (@ 0x00000006) Transmission complete                                      */
      __IM  uint32_t TXE        : 1;            /*!< (@ 0x00000007) Transmit data register empty                               */
      __IOM uint32_t LBD        : 1;            /*!< (@ 0x00000008) LIN break detection flag                                   */
    } bit;
  } SR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000004) UART4_DR                                                   */

    struct {
      __IOM uint32_t DR         : 9;            /*!< (@ 0x00000000) DR                                                         */
    } bit;
  } DR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000008) UART4_BRR                                                  */

    struct {
      __IOM uint32_t DIV_Fraction : 4;          /*!< (@ 0x00000000) DIV_Fraction                                               */
      __IOM uint32_t DIV_Mantissa : 12;         /*!< (@ 0x00000004) DIV_Mantissa                                               */
    } bit;
  } BRR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000000C) UART4_CR1                                                  */

    struct {
      __IOM uint32_t SBK        : 1;            /*!< (@ 0x00000000) Send break                                                 */
      __IOM uint32_t RWU        : 1;            /*!< (@ 0x00000001) Receiver wakeup                                            */
      __IOM uint32_t RE         : 1;            /*!< (@ 0x00000002) Receiver enable                                            */
      __IOM uint32_t TE         : 1;            /*!< (@ 0x00000003) Transmitter enable                                         */
      __IOM uint32_t IDLEIE     : 1;            /*!< (@ 0x00000004) IDLE interrupt enable                                      */
      __IOM uint32_t RXNEIE     : 1;            /*!< (@ 0x00000005) RXNE interrupt enable                                      */
      __IOM uint32_t TCIE       : 1;            /*!< (@ 0x00000006) Transmission complete interrupt enable                     */
      __IOM uint32_t TXEIE      : 1;            /*!< (@ 0x00000007) TXE interrupt enable                                       */
      __IOM uint32_t PEIE       : 1;            /*!< (@ 0x00000008) PE interrupt enable                                        */
      __IOM uint32_t PS         : 1;            /*!< (@ 0x00000009) Parity selection                                           */
      __IOM uint32_t PCE        : 1;            /*!< (@ 0x0000000A) Parity control enable                                      */
      __IOM uint32_t WAKE       : 1;            /*!< (@ 0x0000000B) Wakeup method                                              */
      __IOM uint32_t M          : 1;            /*!< (@ 0x0000000C) Word length                                                */
      __IOM uint32_t UE         : 1;            /*!< (@ 0x0000000D) USART enable                                               */
    } bit;
  } CR1;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) UART4_CR2                                                  */

    struct {
      __IOM uint32_t ADD        : 4;            /*!< (@ 0x00000000) Address of the USART node                                  */
      __IM  uint32_t            : 1;
      __IOM uint32_t LBDL       : 1;            /*!< (@ 0x00000005) lin break detection length                                 */
      __IOM uint32_t LBDIE      : 1;            /*!< (@ 0x00000006) LIN break detection interrupt enable                       */
      __IM  uint32_t            : 5;
      __IOM uint32_t STOP       : 2;            /*!< (@ 0x0000000C) STOP bits                                                  */
      __IOM uint32_t LINEN      : 1;            /*!< (@ 0x0000000E) LIN mode enable                                            */
    } bit;
  } CR2;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000014) UART4_CR3                                                  */

    struct {
      __IOM uint32_t EIE        : 1;            /*!< (@ 0x00000000) Error interrupt enable                                     */
      __IOM uint32_t IREN       : 1;            /*!< (@ 0x00000001) IrDA mode enable                                           */
      __IOM uint32_t IRLP       : 1;            /*!< (@ 0x00000002) IrDA low-power                                             */
      __IOM uint32_t HDSEL      : 1;            /*!< (@ 0x00000003) Half-duplex selection                                      */
      __IM  uint32_t            : 2;
      __IOM uint32_t DMAR       : 1;            /*!< (@ 0x00000006) DMA enable receiver                                        */
      __IOM uint32_t DMAT       : 1;            /*!< (@ 0x00000007) DMA enable transmitter                                     */
    } bit;
  } CR3;
} UART4_Type;                                   /*!< Size = 24 (0x18)                                                          */



/* =========================================================================================================================== */
/* ================                                           UART5                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief Universal asynchronous receiver  transmitter (UART5)
  */

typedef struct {                                /*!< (@ 0x40005000) UART5 Structure                                            */

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) UART4_SR                                                   */

    struct {
      __IM  uint32_t PE         : 1;            /*!< (@ 0x00000000) PE                                                         */
      __IM  uint32_t FE         : 1;            /*!< (@ 0x00000001) FE                                                         */
      __IM  uint32_t NE         : 1;            /*!< (@ 0x00000002) NE                                                         */
      __IM  uint32_t ORE        : 1;            /*!< (@ 0x00000003) ORE                                                        */
      __IM  uint32_t IDLE       : 1;            /*!< (@ 0x00000004) IDLE                                                       */
      __IOM uint32_t RXNE       : 1;            /*!< (@ 0x00000005) RXNE                                                       */
      __IOM uint32_t TC         : 1;            /*!< (@ 0x00000006) TC                                                         */
      __IM  uint32_t TXE        : 1;            /*!< (@ 0x00000007) TXE                                                        */
      __IOM uint32_t LBD        : 1;            /*!< (@ 0x00000008) LBD                                                        */
    } bit;
  } SR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000004) UART4_DR                                                   */

    struct {
      __IOM uint32_t DR         : 9;            /*!< (@ 0x00000000) DR                                                         */
    } bit;
  } DR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000008) UART4_BRR                                                  */

    struct {
      __IOM uint32_t DIV_Fraction : 4;          /*!< (@ 0x00000000) DIV_Fraction                                               */
      __IOM uint32_t DIV_Mantissa : 12;         /*!< (@ 0x00000004) DIV_Mantissa                                               */
    } bit;
  } BRR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000000C) UART4_CR1                                                  */

    struct {
      __IOM uint32_t SBK        : 1;            /*!< (@ 0x00000000) SBK                                                        */
      __IOM uint32_t RWU        : 1;            /*!< (@ 0x00000001) RWU                                                        */
      __IOM uint32_t RE         : 1;            /*!< (@ 0x00000002) RE                                                         */
      __IOM uint32_t TE         : 1;            /*!< (@ 0x00000003) TE                                                         */
      __IOM uint32_t IDLEIE     : 1;            /*!< (@ 0x00000004) IDLEIE                                                     */
      __IOM uint32_t RXNEIE     : 1;            /*!< (@ 0x00000005) RXNEIE                                                     */
      __IOM uint32_t TCIE       : 1;            /*!< (@ 0x00000006) TCIE                                                       */
      __IOM uint32_t TXEIE      : 1;            /*!< (@ 0x00000007) TXEIE                                                      */
      __IOM uint32_t PEIE       : 1;            /*!< (@ 0x00000008) PEIE                                                       */
      __IOM uint32_t PS         : 1;            /*!< (@ 0x00000009) PS                                                         */
      __IOM uint32_t PCE        : 1;            /*!< (@ 0x0000000A) PCE                                                        */
      __IOM uint32_t WAKE       : 1;            /*!< (@ 0x0000000B) WAKE                                                       */
      __IOM uint32_t M          : 1;            /*!< (@ 0x0000000C) M                                                          */
      __IOM uint32_t UE         : 1;            /*!< (@ 0x0000000D) UE                                                         */
    } bit;
  } CR1;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) UART4_CR2                                                  */

    struct {
      __IOM uint32_t ADD        : 4;            /*!< (@ 0x00000000) ADD                                                        */
      __IM  uint32_t            : 1;
      __IOM uint32_t LBDL       : 1;            /*!< (@ 0x00000005) LBDL                                                       */
      __IOM uint32_t LBDIE      : 1;            /*!< (@ 0x00000006) LBDIE                                                      */
      __IM  uint32_t            : 5;
      __IOM uint32_t STOP       : 2;            /*!< (@ 0x0000000C) STOP                                                       */
      __IOM uint32_t LINEN      : 1;            /*!< (@ 0x0000000E) LINEN                                                      */
    } bit;
  } CR2;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000014) UART4_CR3                                                  */

    struct {
      __IOM uint32_t EIE        : 1;            /*!< (@ 0x00000000) Error interrupt enable                                     */
      __IOM uint32_t IREN       : 1;            /*!< (@ 0x00000001) IrDA mode enable                                           */
      __IOM uint32_t IRLP       : 1;            /*!< (@ 0x00000002) IrDA low-power                                             */
      __IOM uint32_t HDSEL      : 1;            /*!< (@ 0x00000003) Half-duplex selection                                      */
      __IM  uint32_t            : 3;
      __IOM uint32_t DMAT       : 1;            /*!< (@ 0x00000007) DMA enable transmitter                                     */
    } bit;
  } CR3;
} UART5_Type;                                   /*!< Size = 24 (0x18)                                                          */



/* =========================================================================================================================== */
/* ================                                            CRC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief CRC calculation unit (CRC)
  */

typedef struct {                                /*!< (@ 0x40023000) CRC Structure                                              */

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Data register                                              */

    struct {
      __IOM uint32_t DR         : 32;           /*!< (@ 0x00000000) Data Register                                              */
    } bit;
  } DR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000004) Independent Data register                                  */

    struct {
      __IOM uint32_t IDR        : 8;            /*!< (@ 0x00000000) Independent Data register                                  */
    } bit;
  } IDR;

  union {
    __OM  uint32_t reg;                         /*!< (@ 0x00000008) Control register                                           */

    struct {
      __OM  uint32_t RESET      : 1;            /*!< (@ 0x00000000) Reset bit                                                  */
    } bit;
  } CR;
} CRC_Type;                                     /*!< Size = 12 (0xc)                                                           */



/* =========================================================================================================================== */
/* ================                                           FLASH                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief FLASH (FLASH)
  */
typedef struct {                                /*!< (@ 0x40022000) FLASH Structure                                            */

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) Flash access control register                              */

    struct {
      __IOM uint32_t LATENCY    : 3 ;            /*!< (@ 0x00000000) Latency                                                    */
      __IOM uint32_t HLFCYA     : 1 ;            /*!< (@ 0x00000003) Flash half cycle access enable                             */
      __IOM uint32_t PRFTBE     : 1 ;            /*!< (@ 0x00000004) Prefetch buffer enable                                     */
      __IM  uint32_t PRFTBS     : 1 ;            /*!< (@ 0x00000005) Prefetch buffer status                                     */
      __IM  uint32_t		    : 26 ;


    } bit;
  } ACR;

  union {
    __OM  uint32_t reg;                         /*!< (@ 0x00000004) Flash key register                                         */

    struct {
      __OM  uint32_t KEY        : 32;           /*!< (@ 0x00000000) FPEC key                                                   */
    } bit;
  } KEYR;

  union {
    __OM  uint32_t reg;                         /*!< (@ 0x00000008) Flash option key register                                  */

    struct {
      __OM  uint32_t OPTKEY     : 32;           /*!< (@ 0x00000000) Option byte key                                            */
    } bit;
  } OPTKEYR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000000C) Status register                                            */

    struct {
      __IM  uint32_t BSY        : 1;            /*!< (@ 0x00000000) Busy                                                       */
      __IM  uint32_t            : 1;
      __IOM uint32_t PGERR      : 1;            /*!< (@ 0x00000002) Programming error                                          */
      __IM  uint32_t            : 1;
      __IOM uint32_t WRPRTERR   : 1;            /*!< (@ 0x00000004) Write protection error                                     */
      __IOM uint32_t EOP        : 1;            /*!< (@ 0x00000005) End of operation                                           */
      __IOM uint32_t 	        : 26;

    } bit;
  } SR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) Control register                                           */

    struct {
      __IOM uint32_t PG         : 1;            /*!< (@ 0x00000000) Programming                                                */
      __IOM uint32_t PER        : 1;            /*!< (@ 0x00000001) Page Erase                                                 */
      __IOM uint32_t MER        : 1;            /*!< (@ 0x00000002) Mass Erase                                                 */
      __IM  uint32_t            : 1;
      __IOM uint32_t OPTPG      : 1;            /*!< (@ 0x00000004) Option byte programming                                    */
      __IOM uint32_t OPTER      : 1;            /*!< (@ 0x00000005) Option byte erase                                          */
      __IOM uint32_t STRT       : 1;            /*!< (@ 0x00000006) Start                                                      */
      __IOM uint32_t LOCK       : 1;            /*!< (@ 0x00000007) Lock                                                       */
      __IM  uint32_t            : 1;
      __IOM uint32_t OPTWRE     : 1;            /*!< (@ 0x00000009) Option bytes write enable                                  */
      __IOM uint32_t ERRIE      : 1;            /*!< (@ 0x0000000A) Error interrupt enable                                     */
      __IM  uint32_t            : 1;
      __IOM uint32_t EOPIE      : 1;            /*!< (@ 0x0000000C) End of operation interrupt enable                          */
    } bit;
  } CR;

  union {
    __OM  uint32_t reg;                         /*!< (@ 0x00000014) Flash address register                                     */

    struct {
      __OM  uint32_t FAR        : 32;           /*!< (@ 0x00000000) Flash Address                                              */
    } bit;
  } AR;
  __IM  uint32_t  RESERVED;

  union {
    __IM  uint32_t reg;                         /*!< (@ 0x0000001C) Option byte register                                       */

    struct {
      __IM  uint32_t OPTERR     : 1;            /*!< (@ 0x00000000) Option byte error                                          */
      __IM  uint32_t RDPRT      : 1;            /*!< (@ 0x00000001) Read protection                                            */
      __IM  uint32_t WDG_SW     : 1;            /*!< (@ 0x00000002) WDG_SW                                                     */
      __IM  uint32_t nRST_STOP  : 1;            /*!< (@ 0x00000003) nRST_STOP                                                  */
      __IM  uint32_t nRST_STDBY : 1;            /*!< (@ 0x00000004) nRST_STDBY                                                 */
      __IM  uint32_t            : 5;
      __IM  uint32_t Data0      : 8;            /*!< (@ 0x0000000A) Data0                                                      */
      __IM  uint32_t Data1      : 8;            /*!< (@ 0x00000012) Data1                                                      */
    } bit;
  } OBR;

  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000020) Write protection register                                  */

    struct {
      __IM  uint32_t WRP        : 32;           /*!< (@ 0x00000000) Write protect                                              */
    } bit;
  } WRPR;
} FLASH_Type;                                   /*!< Size = 36 (0x24)                                                          */



/* =========================================================================================================================== */
/* ================                                           NVIC                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Nested Vectored Interrupt  Controller (NVIC) deleted
  */

/* =========================================================================================================================== */
/* ================                                            USB                                            ================ */
/* =========================================================================================================================== */


/**
  * @brief Universal serial bus full-speed device  interface (USB)
  */

typedef struct {                                /*!< (@ 0x40005C00) USB Structure                                              */

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000000) endpoint 0 register                                        */

    struct {
      __IOM uint32_t EA         : 4;            /*!< (@ 0x00000000) Endpoint address                                           */
      __IOM uint32_t STAT_TX    : 2;            /*!< (@ 0x00000004) Status bits, for transmission transfers                    */
      __IOM uint32_t DTOG_TX    : 1;            /*!< (@ 0x00000006) Data Toggle, for transmission transfers                    */
      __IOM uint32_t CTR_TX     : 1;            /*!< (@ 0x00000007) Correct Transfer for transmission                          */
      __IOM uint32_t EP_KIND    : 1;            /*!< (@ 0x00000008) Endpoint kind                                              */
      __IOM uint32_t EP_TYPE    : 2;            /*!< (@ 0x00000009) Endpoint type                                              */
      __IOM uint32_t SETUP      : 1;            /*!< (@ 0x0000000B) Setup transaction completed                                */
      __IOM uint32_t STAT_RX    : 2;            /*!< (@ 0x0000000C) Status bits, for reception transfers                       */
      __IOM uint32_t DTOG_RX    : 1;            /*!< (@ 0x0000000E) Data Toggle, for reception transfers                       */
      __IOM uint32_t CTR_RX     : 1;            /*!< (@ 0x0000000F) Correct transfer for reception                             */
    } bit;
  } EP0R;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000004) endpoint 1 register                                        */

    struct {
      __IOM uint32_t EA         : 4;            /*!< (@ 0x00000000) Endpoint address                                           */
      __IOM uint32_t STAT_TX    : 2;            /*!< (@ 0x00000004) Status bits, for transmission transfers                    */
      __IOM uint32_t DTOG_TX    : 1;            /*!< (@ 0x00000006) Data Toggle, for transmission transfers                    */
      __IOM uint32_t CTR_TX     : 1;            /*!< (@ 0x00000007) Correct Transfer for transmission                          */
      __IOM uint32_t EP_KIND    : 1;            /*!< (@ 0x00000008) Endpoint kind                                              */
      __IOM uint32_t EP_TYPE    : 2;            /*!< (@ 0x00000009) Endpoint type                                              */
      __IOM uint32_t SETUP      : 1;            /*!< (@ 0x0000000B) Setup transaction completed                                */
      __IOM uint32_t STAT_RX    : 2;            /*!< (@ 0x0000000C) Status bits, for reception transfers                       */
      __IOM uint32_t DTOG_RX    : 1;            /*!< (@ 0x0000000E) Data Toggle, for reception transfers                       */
      __IOM uint32_t CTR_RX     : 1;            /*!< (@ 0x0000000F) Correct transfer for reception                             */
    } bit;
  } EP1R;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000008) endpoint 2 register                                        */

    struct {
      __IOM uint32_t EA         : 4;            /*!< (@ 0x00000000) Endpoint address                                           */
      __IOM uint32_t STAT_TX    : 2;            /*!< (@ 0x00000004) Status bits, for transmission transfers                    */
      __IOM uint32_t DTOG_TX    : 1;            /*!< (@ 0x00000006) Data Toggle, for transmission transfers                    */
      __IOM uint32_t CTR_TX     : 1;            /*!< (@ 0x00000007) Correct Transfer for transmission                          */
      __IOM uint32_t EP_KIND    : 1;            /*!< (@ 0x00000008) Endpoint kind                                              */
      __IOM uint32_t EP_TYPE    : 2;            /*!< (@ 0x00000009) Endpoint type                                              */
      __IOM uint32_t SETUP      : 1;            /*!< (@ 0x0000000B) Setup transaction completed                                */
      __IOM uint32_t STAT_RX    : 2;            /*!< (@ 0x0000000C) Status bits, for reception transfers                       */
      __IOM uint32_t DTOG_RX    : 1;            /*!< (@ 0x0000000E) Data Toggle, for reception transfers                       */
      __IOM uint32_t CTR_RX     : 1;            /*!< (@ 0x0000000F) Correct transfer for reception                             */
    } bit;
  } EP2R;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000000C) endpoint 3 register                                        */

    struct {
      __IOM uint32_t EA         : 4;            /*!< (@ 0x00000000) Endpoint address                                           */
      __IOM uint32_t STAT_TX    : 2;            /*!< (@ 0x00000004) Status bits, for transmission transfers                    */
      __IOM uint32_t DTOG_TX    : 1;            /*!< (@ 0x00000006) Data Toggle, for transmission transfers                    */
      __IOM uint32_t CTR_TX     : 1;            /*!< (@ 0x00000007) Correct Transfer for transmission                          */
      __IOM uint32_t EP_KIND    : 1;            /*!< (@ 0x00000008) Endpoint kind                                              */
      __IOM uint32_t EP_TYPE    : 2;            /*!< (@ 0x00000009) Endpoint type                                              */
      __IOM uint32_t SETUP      : 1;            /*!< (@ 0x0000000B) Setup transaction completed                                */
      __IOM uint32_t STAT_RX    : 2;            /*!< (@ 0x0000000C) Status bits, for reception transfers                       */
      __IOM uint32_t DTOG_RX    : 1;            /*!< (@ 0x0000000E) Data Toggle, for reception transfers                       */
      __IOM uint32_t CTR_RX     : 1;            /*!< (@ 0x0000000F) Correct transfer for reception                             */
    } bit;
  } EP3R;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000010) endpoint 4 register                                        */

    struct {
      __IOM uint32_t EA         : 4;            /*!< (@ 0x00000000) Endpoint address                                           */
      __IOM uint32_t STAT_TX    : 2;            /*!< (@ 0x00000004) Status bits, for transmission transfers                    */
      __IOM uint32_t DTOG_TX    : 1;            /*!< (@ 0x00000006) Data Toggle, for transmission transfers                    */
      __IOM uint32_t CTR_TX     : 1;            /*!< (@ 0x00000007) Correct Transfer for transmission                          */
      __IOM uint32_t EP_KIND    : 1;            /*!< (@ 0x00000008) Endpoint kind                                              */
      __IOM uint32_t EP_TYPE    : 2;            /*!< (@ 0x00000009) Endpoint type                                              */
      __IOM uint32_t SETUP      : 1;            /*!< (@ 0x0000000B) Setup transaction completed                                */
      __IOM uint32_t STAT_RX    : 2;            /*!< (@ 0x0000000C) Status bits, for reception transfers                       */
      __IOM uint32_t DTOG_RX    : 1;            /*!< (@ 0x0000000E) Data Toggle, for reception transfers                       */
      __IOM uint32_t CTR_RX     : 1;            /*!< (@ 0x0000000F) Correct transfer for reception                             */
    } bit;
  } EP4R;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000014) endpoint 5 register                                        */

    struct {
      __IOM uint32_t EA         : 4;            /*!< (@ 0x00000000) Endpoint address                                           */
      __IOM uint32_t STAT_TX    : 2;            /*!< (@ 0x00000004) Status bits, for transmission transfers                    */
      __IOM uint32_t DTOG_TX    : 1;            /*!< (@ 0x00000006) Data Toggle, for transmission transfers                    */
      __IOM uint32_t CTR_TX     : 1;            /*!< (@ 0x00000007) Correct Transfer for transmission                          */
      __IOM uint32_t EP_KIND    : 1;            /*!< (@ 0x00000008) Endpoint kind                                              */
      __IOM uint32_t EP_TYPE    : 2;            /*!< (@ 0x00000009) Endpoint type                                              */
      __IOM uint32_t SETUP      : 1;            /*!< (@ 0x0000000B) Setup transaction completed                                */
      __IOM uint32_t STAT_RX    : 2;            /*!< (@ 0x0000000C) Status bits, for reception transfers                       */
      __IOM uint32_t DTOG_RX    : 1;            /*!< (@ 0x0000000E) Data Toggle, for reception transfers                       */
      __IOM uint32_t CTR_RX     : 1;            /*!< (@ 0x0000000F) Correct transfer for reception                             */
    } bit;
  } EP5R;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000018) endpoint 6 register                                        */

    struct {
      __IOM uint32_t EA         : 4;            /*!< (@ 0x00000000) Endpoint address                                           */
      __IOM uint32_t STAT_TX    : 2;            /*!< (@ 0x00000004) Status bits, for transmission transfers                    */
      __IOM uint32_t DTOG_TX    : 1;            /*!< (@ 0x00000006) Data Toggle, for transmission transfers                    */
      __IOM uint32_t CTR_TX     : 1;            /*!< (@ 0x00000007) Correct Transfer for transmission                          */
      __IOM uint32_t EP_KIND    : 1;            /*!< (@ 0x00000008) Endpoint kind                                              */
      __IOM uint32_t EP_TYPE    : 2;            /*!< (@ 0x00000009) Endpoint type                                              */
      __IOM uint32_t SETUP      : 1;            /*!< (@ 0x0000000B) Setup transaction completed                                */
      __IOM uint32_t STAT_RX    : 2;            /*!< (@ 0x0000000C) Status bits, for reception transfers                       */
      __IOM uint32_t DTOG_RX    : 1;            /*!< (@ 0x0000000E) Data Toggle, for reception transfers                       */
      __IOM uint32_t CTR_RX     : 1;            /*!< (@ 0x0000000F) Correct transfer for reception                             */
    } bit;
  } EP6R;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000001C) endpoint 7 register                                        */

    struct {
      __IOM uint32_t EA         : 4;            /*!< (@ 0x00000000) Endpoint address                                           */
      __IOM uint32_t STAT_TX    : 2;            /*!< (@ 0x00000004) Status bits, for transmission transfers                    */
      __IOM uint32_t DTOG_TX    : 1;            /*!< (@ 0x00000006) Data Toggle, for transmission transfers                    */
      __IOM uint32_t CTR_TX     : 1;            /*!< (@ 0x00000007) Correct Transfer for transmission                          */
      __IOM uint32_t EP_KIND    : 1;            /*!< (@ 0x00000008) Endpoint kind                                              */
      __IOM uint32_t EP_TYPE    : 2;            /*!< (@ 0x00000009) Endpoint type                                              */
      __IOM uint32_t SETUP      : 1;            /*!< (@ 0x0000000B) Setup transaction completed                                */
      __IOM uint32_t STAT_RX    : 2;            /*!< (@ 0x0000000C) Status bits, for reception transfers                       */
      __IOM uint32_t DTOG_RX    : 1;            /*!< (@ 0x0000000E) Data Toggle, for reception transfers                       */
      __IOM uint32_t CTR_RX     : 1;            /*!< (@ 0x0000000F) Correct transfer for reception                             */
    } bit;
  } EP7R;
  __IM  uint32_t  RESERVED[8];

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000040) control register                                           */

    struct {
      __IOM uint32_t FRES       : 1;            /*!< (@ 0x00000000) Force USB Reset                                            */
      __IOM uint32_t PDWN       : 1;            /*!< (@ 0x00000001) Power down                                                 */
      __IOM uint32_t LPMODE     : 1;            /*!< (@ 0x00000002) Low-power mode                                             */
      __IOM uint32_t FSUSP      : 1;            /*!< (@ 0x00000003) Force suspend                                              */
      __IOM uint32_t RESUME     : 1;            /*!< (@ 0x00000004) Resume request                                             */
      __IM  uint32_t            : 3;
      __IOM uint32_t ESOFM      : 1;            /*!< (@ 0x00000008) Expected start of frame interrupt mask                     */
      __IOM uint32_t SOFM       : 1;            /*!< (@ 0x00000009) Start of frame interrupt mask                              */
      __IOM uint32_t RESETM     : 1;            /*!< (@ 0x0000000A) USB reset interrupt mask                                   */
      __IOM uint32_t SUSPM      : 1;            /*!< (@ 0x0000000B) Suspend mode interrupt mask                                */
      __IOM uint32_t WKUPM      : 1;            /*!< (@ 0x0000000C) Wakeup interrupt mask                                      */
      __IOM uint32_t ERRM       : 1;            /*!< (@ 0x0000000D) Error interrupt mask                                       */
      __IOM uint32_t PMAOVRM    : 1;            /*!< (@ 0x0000000E) Packet memory area over / underrun interrupt
                                                                    mask                                                       */
      __IOM uint32_t CTRM       : 1;            /*!< (@ 0x0000000F) Correct transfer interrupt mask                            */
    } bit;
  } CNTR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000044) interrupt status register                                  */

    struct {
      __IOM uint32_t EP_ID      : 4;            /*!< (@ 0x00000000) Endpoint Identifier                                        */
      __IOM uint32_t DIR        : 1;            /*!< (@ 0x00000004) Direction of transaction                                   */
      __IM  uint32_t            : 3;
      __IOM uint32_t ESOF       : 1;            /*!< (@ 0x00000008) Expected start frame                                       */
      __IOM uint32_t SOF        : 1;            /*!< (@ 0x00000009) start of frame                                             */
      __IOM uint32_t RESET      : 1;            /*!< (@ 0x0000000A) reset request                                              */
      __IOM uint32_t SUSP       : 1;            /*!< (@ 0x0000000B) Suspend mode request                                       */
      __IOM uint32_t WKUP       : 1;            /*!< (@ 0x0000000C) Wakeup                                                     */
      __IOM uint32_t ERR        : 1;            /*!< (@ 0x0000000D) Error                                                      */
      __IOM uint32_t PMAOVR     : 1;            /*!< (@ 0x0000000E) Packet memory area over / underrun                         */
      __IOM uint32_t CTR        : 1;            /*!< (@ 0x0000000F) Correct transfer                                           */
    } bit;
  } ISTR;

  union {
    __IM  uint32_t reg;                         /*!< (@ 0x00000048) frame number register                                      */

    struct {
      __IM  uint32_t FN         : 11;           /*!< (@ 0x00000000) Frame number                                               */
      __IM  uint32_t LSOF       : 2;            /*!< (@ 0x0000000B) Lost SOF                                                   */
      __IM  uint32_t LCK        : 1;            /*!< (@ 0x0000000D) Locked                                                     */
      __IM  uint32_t RXDM       : 1;            /*!< (@ 0x0000000E) Receive data - line status                                 */
      __IM  uint32_t RXDP       : 1;            /*!< (@ 0x0000000F) Receive data + line status                                 */
    } bit;
  } FNR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x0000004C) device address                                             */

    struct {
      __IOM uint32_t ADD        : 7;            /*!< (@ 0x00000000) Device address                                             */
      __IOM uint32_t EF         : 1;            /*!< (@ 0x00000007) Enable function                                            */
    } bit;
  } DADDR;

  union {
    __IOM uint32_t reg;                         /*!< (@ 0x00000050) Buffer table address                                       */

    struct {
      __IM  uint32_t            : 3;
      __IOM uint32_t BTABLE     : 13;           /*!< (@ 0x00000003) Buffer table                                               */
    } bit;
  } BTABLE;
} USB_Type;                                     /*!< Size = 84 (0x54)                                                          */


/** @} */ /* End of group Device_Peripheral_peripherals */


/* =========================================  End of section using anonymous unions  ========================================= */
#if defined (__CC_ARM)
  #pragma pop
#elif defined (__ICCARM__)
  /* leave anonymous unions enabled */
#elif (__ARMCC_VERSION >= 6010050)
  #pragma clang diagnostic pop
#elif defined (__GNUC__)
  /* anonymous unions are enabled by default */
#elif defined (__TMS470__)
  /* anonymous unions are enabled by default */
#elif defined (__TASKING__)
  #pragma warning restore
#elif defined (__CSMC__)
  /* anonymous unions are enabled by default */
#endif


/* =========================================================================================================================== */
/* ================                          Device Specific Peripheral Address Map                           ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripheralAddr
  * @{
  */

#define FSMC_BASE                   0xA0000000UL
#define PWR_BASE                    0x40007000UL
#define RCC_BASE                    0x40021000UL
#define GPIOA_BASE                  0x40010800UL
#define GPIOB_BASE                  0x40010C00UL
#define GPIOC_BASE                  0x40011000UL
#define GPIOD_BASE                  0x40011400UL
#define GPIOE_BASE                  0x40011800UL
#define GPIOF_BASE                  0x40011C00UL
#define GPIOG_BASE                  0x40012000UL
#define AFIO_BASE                   0x40010000UL
#define EXTI_BASE                   0x40010400UL
#define DMA1_BASE                   0x40020000UL
#define DMA2_BASE                   0x40020400UL
#define SDIO_BASE                   0x40018000UL
#define RTC_BASE                    0x40002800UL
#define BKP_BASE                    0x40006C04UL
#define IWDG_BASE                   0x40003000UL
#define WWDG_BASE                   0x40002C00UL
#define TIM1_BASE                   0x40012C00UL
#define TIM8_BASE                   0x40013400UL
#define TIM2_BASE                   0x40000000UL
#define TIM3_BASE                   0x40000400UL
#define TIM4_BASE                   0x40000800UL
#define TIM5_BASE                   0x40000C00UL
#define TIM9_BASE                   0x40014C00UL
#define TIM12_BASE                  0x40001800UL
#define TIM10_BASE                  0x40015000UL
#define TIM11_BASE                  0x40015400UL
#define TIM13_BASE                  0x40001C00UL
#define TIM14_BASE                  0x40002000UL
#define TIM6_BASE                   0x40001000UL
#define TIM7_BASE                   0x40001400UL
#define I2C1_BASE                   0x40005400UL
#define I2C2_BASE                   0x40005800UL
#define SPI1_BASE                   0x40013000UL
#define SPI2_BASE                   0x40003800UL
#define SPI3_BASE                   0x40003C00UL
#define USART1_BASE                 0x40013800UL
#define USART2_BASE                 0x40004400UL
#define USART3_BASE                 0x40004800UL
#define ADC1_BASE                   0x40012400UL
#define ADC2_BASE                   0x40012800UL
#define ADC3_BASE                   0x40013C00UL
#define CAN_BASE                    0x40006400UL
#define DAC_BASE                    0x40007400UL
#define DBG_BASE                    0xE0042000UL
#define UART4_BASE                  0x40004C00UL
#define UART5_BASE                  0x40005000UL
#define CRC_BASE                    0x40023000UL
#define FLASH_BASE                  0x40022000UL
#define USB_BASE                    0x40005C00UL

/** @} */ /* End of group Device_Peripheral_peripheralAddr */


/* =========================================================================================================================== */
/* ================                                  Peripheral declaration                                   ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_declaration
  * @{
  */

#define FSMC                        ((FSMC_Type*)              FSMC_BASE)
#define PWR                         ((PWR_Type*)               PWR_BASE)
#define RCC                         ((RCC_Type*)               RCC_BASE)
#define GPIOA                       ((GPIOA_Type*)             GPIOA_BASE)
#define GPIOB                       ((GPIOA_Type*)             GPIOB_BASE)
#define GPIOC                       ((GPIOA_Type*)             GPIOC_BASE)
#define GPIOD                       ((GPIOA_Type*)             GPIOD_BASE)
#define GPIOE                       ((GPIOA_Type*)             GPIOE_BASE)
#define GPIOF                       ((GPIOA_Type*)             GPIOF_BASE)
#define GPIOG                       ((GPIOA_Type*)             GPIOG_BASE)
#define AFIO                        ((AFIO_Type*)              AFIO_BASE)
#define EXTI                        ((EXTI_Type*)              EXTI_BASE)
#define DMA1                        ((DMA1_Type*)              DMA1_BASE)
#define DMA2                        ((DMA1_Type*)              DMA2_BASE)
#define SDIO                        ((SDIO_Type*)              SDIO_BASE)
#define RTC                         ((RTC_Type*)               RTC_BASE)
#define BKP                         ((BKP_Type*)               BKP_BASE)
#define IWDG                        ((IWDG_Type*)              IWDG_BASE)
#define WWDG                        ((WWDG_Type*)              WWDG_BASE)
#define TIM1                        ((TIM1_Type*)              TIM1_BASE)
#define TIM8                        ((TIM1_Type*)              TIM8_BASE)
#define TIM2                        ((TIM2_Type*)              TIM2_BASE)
#define TIM3                        ((TIM2_Type*)              TIM3_BASE)
#define TIM4                        ((TIM2_Type*)              TIM4_BASE)
#define TIM5                        ((TIM2_Type*)              TIM5_BASE)
#define TIM9                        ((TIM9_Type*)              TIM9_BASE)
#define TIM12                       ((TIM9_Type*)              TIM12_BASE)
#define TIM10                       ((TIM10_Type*)             TIM10_BASE)
#define TIM11                       ((TIM10_Type*)             TIM11_BASE)
#define TIM13                       ((TIM10_Type*)             TIM13_BASE)
#define TIM14                       ((TIM10_Type*)             TIM14_BASE)
#define TIM6                        ((TIM6_Type*)              TIM6_BASE)
#define TIM7                        ((TIM6_Type*)              TIM7_BASE)
#define I2C1                        ((I2C1_Type*)              I2C1_BASE)
#define I2C2                        ((I2C1_Type*)              I2C2_BASE)
#define SPI1                        ((SPI1_Type*)              SPI1_BASE)
#define SPI2                        ((SPI1_Type*)              SPI2_BASE)
#define SPI3                        ((SPI1_Type*)              SPI3_BASE)
#define USART1                      ((USART1_Type*)            USART1_BASE)
#define USART2                      ((USART1_Type*)            USART2_BASE)
#define USART3                      ((USART1_Type*)            USART3_BASE)
#define ADC1                        ((ADC1_Type*)              ADC1_BASE)
#define ADC2                        ((ADC2_Type*)              ADC2_BASE)
#define ADC3                        ((ADC2_Type*)              ADC3_BASE)
#define CAN                         ((CAN_Type*)               CAN_BASE)
#define DAC                         ((DAC_Type*)               DAC_BASE)
#define DBG                         ((DBG_Type*)               DBG_BASE)
#define UART4                       ((UART4_Type*)             UART4_BASE)
#define UART5                       ((UART5_Type*)             UART5_BASE)
#define CRC                         ((CRC_Type*)               CRC_BASE)
#define FLASH                       ((FLASH_Type*)             FLASH_BASE)
#define USB                         ((USB_Type*)               USB_BASE)

/** @} */ /* End of group Device_Peripheral_declaration */


#ifdef __cplusplus
}
#endif

#endif /* STM32F103XX_H */


/** @} */ /* End of group STM32F103xx */

/** @} */ /* End of group  */

